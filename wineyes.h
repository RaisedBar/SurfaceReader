/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* at Mon Mar 14 13:25:53 2011
 */
/* Compiler settings for C:\gwmicro\vewin\wineyes.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __wineyes_h__
#define __wineyes_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef ___Application_FWD_DEFINED__
#define ___Application_FWD_DEFINED__
typedef interface _Application _Application;
#endif 	/* ___Application_FWD_DEFINED__ */


#ifndef ___Mouse_FWD_DEFINED__
#define ___Mouse_FWD_DEFINED__
typedef interface _Mouse _Mouse;
#endif 	/* ___Mouse_FWD_DEFINED__ */


#ifndef ___Window_FWD_DEFINED__
#define ___Window_FWD_DEFINED__
typedef interface _Window _Window;
#endif 	/* ___Window_FWD_DEFINED__ */


#ifndef ___WindowEvents_FWD_DEFINED__
#define ___WindowEvents_FWD_DEFINED__
typedef interface _WindowEvents _WindowEvents;
#endif 	/* ___WindowEvents_FWD_DEFINED__ */


#ifndef __Windows_FWD_DEFINED__
#define __Windows_FWD_DEFINED__
typedef interface Windows Windows;
#endif 	/* __Windows_FWD_DEFINED__ */


#ifndef __WindowStyle_FWD_DEFINED__
#define __WindowStyle_FWD_DEFINED__
typedef interface WindowStyle WindowStyle;
#endif 	/* __WindowStyle_FWD_DEFINED__ */


#ifndef __Clip_FWD_DEFINED__
#define __Clip_FWD_DEFINED__
typedef interface Clip Clip;
#endif 	/* __Clip_FWD_DEFINED__ */


#ifndef __Clips_FWD_DEFINED__
#define __Clips_FWD_DEFINED__
typedef interface Clips Clips;
#endif 	/* __Clips_FWD_DEFINED__ */


#ifndef __Cursor_FWD_DEFINED__
#define __Cursor_FWD_DEFINED__
typedef interface Cursor Cursor;
#endif 	/* __Cursor_FWD_DEFINED__ */


#ifndef ___Keyboard_FWD_DEFINED__
#define ___Keyboard_FWD_DEFINED__
typedef interface _Keyboard _Keyboard;
#endif 	/* ___Keyboard_FWD_DEFINED__ */


#ifndef __RegisteredKey_FWD_DEFINED__
#define __RegisteredKey_FWD_DEFINED__
typedef interface RegisteredKey RegisteredKey;
#endif 	/* __RegisteredKey_FWD_DEFINED__ */


#ifndef __Keys_FWD_DEFINED__
#define __Keys_FWD_DEFINED__
typedef interface Keys Keys;
#endif 	/* __Keys_FWD_DEFINED__ */


#ifndef ___Key_FWD_DEFINED__
#define ___Key_FWD_DEFINED__
typedef interface _Key _Key;
#endif 	/* ___Key_FWD_DEFINED__ */


#ifndef __SetFile_FWD_DEFINED__
#define __SetFile_FWD_DEFINED__
typedef interface SetFile SetFile;
#endif 	/* __SetFile_FWD_DEFINED__ */


#ifndef __CharacterDictionaries_FWD_DEFINED__
#define __CharacterDictionaries_FWD_DEFINED__
typedef interface CharacterDictionaries CharacterDictionaries;
#endif 	/* __CharacterDictionaries_FWD_DEFINED__ */


#ifndef __ColorDictionaries_FWD_DEFINED__
#define __ColorDictionaries_FWD_DEFINED__
typedef interface ColorDictionaries ColorDictionaries;
#endif 	/* __ColorDictionaries_FWD_DEFINED__ */


#ifndef __ExceptionDictionaries_FWD_DEFINED__
#define __ExceptionDictionaries_FWD_DEFINED__
typedef interface ExceptionDictionaries ExceptionDictionaries;
#endif 	/* __ExceptionDictionaries_FWD_DEFINED__ */


#ifndef __GraphicDictionaries_FWD_DEFINED__
#define __GraphicDictionaries_FWD_DEFINED__
typedef interface GraphicDictionaries GraphicDictionaries;
#endif 	/* __GraphicDictionaries_FWD_DEFINED__ */


#ifndef __KeyLabelDictionaries_FWD_DEFINED__
#define __KeyLabelDictionaries_FWD_DEFINED__
typedef interface KeyLabelDictionaries KeyLabelDictionaries;
#endif 	/* __KeyLabelDictionaries_FWD_DEFINED__ */


#ifndef __Desktop_FWD_DEFINED__
#define __Desktop_FWD_DEFINED__
typedef interface Desktop Desktop;
#endif 	/* __Desktop_FWD_DEFINED__ */


#ifndef __Process_FWD_DEFINED__
#define __Process_FWD_DEFINED__
typedef interface Process Process;
#endif 	/* __Process_FWD_DEFINED__ */


#ifndef __SpecialKeySettings_FWD_DEFINED__
#define __SpecialKeySettings_FWD_DEFINED__
typedef interface SpecialKeySettings SpecialKeySettings;
#endif 	/* __SpecialKeySettings_FWD_DEFINED__ */


#ifndef __PunctuationSettings_FWD_DEFINED__
#define __PunctuationSettings_FWD_DEFINED__
typedef interface PunctuationSettings PunctuationSettings;
#endif 	/* __PunctuationSettings_FWD_DEFINED__ */


#ifndef __MouseSearchAttributesSettings_FWD_DEFINED__
#define __MouseSearchAttributesSettings_FWD_DEFINED__
typedef interface MouseSearchAttributesSettings MouseSearchAttributesSettings;
#endif 	/* __MouseSearchAttributesSettings_FWD_DEFINED__ */


#ifndef __LineFilterSettings_FWD_DEFINED__
#define __LineFilterSettings_FWD_DEFINED__
typedef interface LineFilterSettings LineFilterSettings;
#endif 	/* __LineFilterSettings_FWD_DEFINED__ */


#ifndef __ScreenSettings_FWD_DEFINED__
#define __ScreenSettings_FWD_DEFINED__
typedef interface ScreenSettings ScreenSettings;
#endif 	/* __ScreenSettings_FWD_DEFINED__ */


#ifndef __KeyboardSettings_FWD_DEFINED__
#define __KeyboardSettings_FWD_DEFINED__
typedef interface KeyboardSettings KeyboardSettings;
#endif 	/* __KeyboardSettings_FWD_DEFINED__ */


#ifndef __MouseSettings_FWD_DEFINED__
#define __MouseSettings_FWD_DEFINED__
typedef interface MouseSettings MouseSettings;
#endif 	/* __MouseSettings_FWD_DEFINED__ */


#ifndef __GeneralSettings_FWD_DEFINED__
#define __GeneralSettings_FWD_DEFINED__
typedef interface GeneralSettings GeneralSettings;
#endif 	/* __GeneralSettings_FWD_DEFINED__ */


#ifndef __GlobalSettings_FWD_DEFINED__
#define __GlobalSettings_FWD_DEFINED__
typedef interface GlobalSettings GlobalSettings;
#endif 	/* __GlobalSettings_FWD_DEFINED__ */


#ifndef ___BrailleDisplay_FWD_DEFINED__
#define ___BrailleDisplay_FWD_DEFINED__
typedef interface _BrailleDisplay _BrailleDisplay;
#endif 	/* ___BrailleDisplay_FWD_DEFINED__ */


#ifndef ___Synthesizer_FWD_DEFINED__
#define ___Synthesizer_FWD_DEFINED__
typedef interface _Synthesizer _Synthesizer;
#endif 	/* ___Synthesizer_FWD_DEFINED__ */


#ifndef __BrailleTableEntry_FWD_DEFINED__
#define __BrailleTableEntry_FWD_DEFINED__
typedef interface BrailleTableEntry BrailleTableEntry;
#endif 	/* __BrailleTableEntry_FWD_DEFINED__ */


#ifndef __BrailleTables_FWD_DEFINED__
#define __BrailleTables_FWD_DEFINED__
typedef interface BrailleTables BrailleTables;
#endif 	/* __BrailleTables_FWD_DEFINED__ */


#ifndef __BrailleTable_FWD_DEFINED__
#define __BrailleTable_FWD_DEFINED__
typedef interface BrailleTable BrailleTable;
#endif 	/* __BrailleTable_FWD_DEFINED__ */


#ifndef __BrailleControlState_FWD_DEFINED__
#define __BrailleControlState_FWD_DEFINED__
typedef interface BrailleControlState BrailleControlState;
#endif 	/* __BrailleControlState_FWD_DEFINED__ */


#ifndef __BrailleControlStates_FWD_DEFINED__
#define __BrailleControlStates_FWD_DEFINED__
typedef interface BrailleControlStates BrailleControlStates;
#endif 	/* __BrailleControlStates_FWD_DEFINED__ */


#ifndef __BrailleControlType_FWD_DEFINED__
#define __BrailleControlType_FWD_DEFINED__
typedef interface BrailleControlType BrailleControlType;
#endif 	/* __BrailleControlType_FWD_DEFINED__ */


#ifndef __BrailleControlTypes_FWD_DEFINED__
#define __BrailleControlTypes_FWD_DEFINED__
typedef interface BrailleControlTypes BrailleControlTypes;
#endif 	/* __BrailleControlTypes_FWD_DEFINED__ */


#ifndef __BrailleControlInformation_FWD_DEFINED__
#define __BrailleControlInformation_FWD_DEFINED__
typedef interface BrailleControlInformation BrailleControlInformation;
#endif 	/* __BrailleControlInformation_FWD_DEFINED__ */


#ifndef __BrailleOptions_FWD_DEFINED__
#define __BrailleOptions_FWD_DEFINED__
typedef interface BrailleOptions BrailleOptions;
#endif 	/* __BrailleOptions_FWD_DEFINED__ */


#ifndef __BrailleGraphics_FWD_DEFINED__
#define __BrailleGraphics_FWD_DEFINED__
typedef interface BrailleGraphics BrailleGraphics;
#endif 	/* __BrailleGraphics_FWD_DEFINED__ */


#ifndef __BrailleDotPatterns_FWD_DEFINED__
#define __BrailleDotPatterns_FWD_DEFINED__
typedef interface BrailleDotPatterns BrailleDotPatterns;
#endif 	/* __BrailleDotPatterns_FWD_DEFINED__ */


#ifndef __BrailleScrollingOptions_FWD_DEFINED__
#define __BrailleScrollingOptions_FWD_DEFINED__
typedef interface BrailleScrollingOptions BrailleScrollingOptions;
#endif 	/* __BrailleScrollingOptions_FWD_DEFINED__ */


#ifndef __BrailleSettings_FWD_DEFINED__
#define __BrailleSettings_FWD_DEFINED__
typedef interface BrailleSettings BrailleSettings;
#endif 	/* __BrailleSettings_FWD_DEFINED__ */


#ifndef __BrailleAction_FWD_DEFINED__
#define __BrailleAction_FWD_DEFINED__
typedef interface BrailleAction BrailleAction;
#endif 	/* __BrailleAction_FWD_DEFINED__ */


#ifndef __BrailleActions_FWD_DEFINED__
#define __BrailleActions_FWD_DEFINED__
typedef interface BrailleActions BrailleActions;
#endif 	/* __BrailleActions_FWD_DEFINED__ */


#ifndef __BrailleHotKey_FWD_DEFINED__
#define __BrailleHotKey_FWD_DEFINED__
typedef interface BrailleHotKey BrailleHotKey;
#endif 	/* __BrailleHotKey_FWD_DEFINED__ */


#ifndef __BrailleHotKeys_FWD_DEFINED__
#define __BrailleHotKeys_FWD_DEFINED__
typedef interface BrailleHotKeys BrailleHotKeys;
#endif 	/* __BrailleHotKeys_FWD_DEFINED__ */


#ifndef __Verbosity_FWD_DEFINED__
#define __Verbosity_FWD_DEFINED__
typedef interface Verbosity Verbosity;
#endif 	/* __Verbosity_FWD_DEFINED__ */


#ifndef __Hotkeys_FWD_DEFINED__
#define __Hotkeys_FWD_DEFINED__
typedef interface Hotkeys Hotkeys;
#endif 	/* __Hotkeys_FWD_DEFINED__ */


#ifndef __Hotkey_FWD_DEFINED__
#define __Hotkey_FWD_DEFINED__
typedef interface Hotkey Hotkey;
#endif 	/* __Hotkey_FWD_DEFINED__ */


#ifndef __CursorKey_FWD_DEFINED__
#define __CursorKey_FWD_DEFINED__
typedef interface CursorKey CursorKey;
#endif 	/* __CursorKey_FWD_DEFINED__ */


#ifndef __CursorKeyAction_FWD_DEFINED__
#define __CursorKeyAction_FWD_DEFINED__
typedef interface CursorKeyAction CursorKeyAction;
#endif 	/* __CursorKeyAction_FWD_DEFINED__ */


#ifndef __CursorKeys_FWD_DEFINED__
#define __CursorKeys_FWD_DEFINED__
typedef interface CursorKeys CursorKeys;
#endif 	/* __CursorKeys_FWD_DEFINED__ */


#ifndef __HyperactiveWindows_FWD_DEFINED__
#define __HyperactiveWindows_FWD_DEFINED__
typedef interface HyperactiveWindows HyperactiveWindows;
#endif 	/* __HyperactiveWindows_FWD_DEFINED__ */


#ifndef __UserWindows_FWD_DEFINED__
#define __UserWindows_FWD_DEFINED__
typedef interface UserWindows UserWindows;
#endif 	/* __UserWindows_FWD_DEFINED__ */


#ifndef __CharacterDictionary_FWD_DEFINED__
#define __CharacterDictionary_FWD_DEFINED__
typedef interface CharacterDictionary CharacterDictionary;
#endif 	/* __CharacterDictionary_FWD_DEFINED__ */


#ifndef __ExceptionDictionary_FWD_DEFINED__
#define __ExceptionDictionary_FWD_DEFINED__
typedef interface ExceptionDictionary ExceptionDictionary;
#endif 	/* __ExceptionDictionary_FWD_DEFINED__ */


#ifndef __ColorDictionary_FWD_DEFINED__
#define __ColorDictionary_FWD_DEFINED__
typedef interface ColorDictionary ColorDictionary;
#endif 	/* __ColorDictionary_FWD_DEFINED__ */


#ifndef __GraphicDictionary_FWD_DEFINED__
#define __GraphicDictionary_FWD_DEFINED__
typedef interface GraphicDictionary GraphicDictionary;
#endif 	/* __GraphicDictionary_FWD_DEFINED__ */


#ifndef __KeyLabelDictionary_FWD_DEFINED__
#define __KeyLabelDictionary_FWD_DEFINED__
typedef interface KeyLabelDictionary KeyLabelDictionary;
#endif 	/* __KeyLabelDictionary_FWD_DEFINED__ */


#ifndef __UserWindowCoordinates_FWD_DEFINED__
#define __UserWindowCoordinates_FWD_DEFINED__
typedef interface UserWindowCoordinates UserWindowCoordinates;
#endif 	/* __UserWindowCoordinates_FWD_DEFINED__ */


#ifndef __UserWindow_FWD_DEFINED__
#define __UserWindow_FWD_DEFINED__
typedef interface UserWindow UserWindow;
#endif 	/* __UserWindow_FWD_DEFINED__ */


#ifndef __HyperactiveWindow_FWD_DEFINED__
#define __HyperactiveWindow_FWD_DEFINED__
typedef interface HyperactiveWindow HyperactiveWindow;
#endif 	/* __HyperactiveWindow_FWD_DEFINED__ */


#ifndef __ActivatedVerbosity_FWD_DEFINED__
#define __ActivatedVerbosity_FWD_DEFINED__
typedef interface ActivatedVerbosity ActivatedVerbosity;
#endif 	/* __ActivatedVerbosity_FWD_DEFINED__ */


#ifndef __FocusedVerbosity_FWD_DEFINED__
#define __FocusedVerbosity_FWD_DEFINED__
typedef interface FocusedVerbosity FocusedVerbosity;
#endif 	/* __FocusedVerbosity_FWD_DEFINED__ */


#ifndef __MenuVerbosity_FWD_DEFINED__
#define __MenuVerbosity_FWD_DEFINED__
typedef interface MenuVerbosity MenuVerbosity;
#endif 	/* __MenuVerbosity_FWD_DEFINED__ */


#ifndef __AttributeChangeVerbosity_FWD_DEFINED__
#define __AttributeChangeVerbosity_FWD_DEFINED__
typedef interface AttributeChangeVerbosity AttributeChangeVerbosity;
#endif 	/* __AttributeChangeVerbosity_FWD_DEFINED__ */


#ifndef __MouseVerbosity_FWD_DEFINED__
#define __MouseVerbosity_FWD_DEFINED__
typedef interface MouseVerbosity MouseVerbosity;
#endif 	/* __MouseVerbosity_FWD_DEFINED__ */


#ifndef __MiscVerbosity_FWD_DEFINED__
#define __MiscVerbosity_FWD_DEFINED__
typedef interface MiscVerbosity MiscVerbosity;
#endif 	/* __MiscVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeVerbosity_FWD_DEFINED__
#define __BrowseModeVerbosity_FWD_DEFINED__
typedef interface BrowseModeVerbosity BrowseModeVerbosity;
#endif 	/* __BrowseModeVerbosity_FWD_DEFINED__ */


#ifndef __WordVerbosity_FWD_DEFINED__
#define __WordVerbosity_FWD_DEFINED__
typedef interface WordVerbosity WordVerbosity;
#endif 	/* __WordVerbosity_FWD_DEFINED__ */


#ifndef __ExcelVerbosity_FWD_DEFINED__
#define __ExcelVerbosity_FWD_DEFINED__
typedef interface ExcelVerbosity ExcelVerbosity;
#endif 	/* __ExcelVerbosity_FWD_DEFINED__ */


#ifndef __PowerPointVerbosity_FWD_DEFINED__
#define __PowerPointVerbosity_FWD_DEFINED__
typedef interface PowerPointVerbosity PowerPointVerbosity;
#endif 	/* __PowerPointVerbosity_FWD_DEFINED__ */


#ifndef __ScreenPoint_FWD_DEFINED__
#define __ScreenPoint_FWD_DEFINED__
typedef interface ScreenPoint ScreenPoint;
#endif 	/* __ScreenPoint_FWD_DEFINED__ */


#ifndef __WindowPoint_FWD_DEFINED__
#define __WindowPoint_FWD_DEFINED__
typedef interface WindowPoint WindowPoint;
#endif 	/* __WindowPoint_FWD_DEFINED__ */


#ifndef __ClientPoint_FWD_DEFINED__
#define __ClientPoint_FWD_DEFINED__
typedef interface ClientPoint ClientPoint;
#endif 	/* __ClientPoint_FWD_DEFINED__ */


#ifndef __ScreenRectangle_FWD_DEFINED__
#define __ScreenRectangle_FWD_DEFINED__
typedef interface ScreenRectangle ScreenRectangle;
#endif 	/* __ScreenRectangle_FWD_DEFINED__ */


#ifndef __WindowRectangle_FWD_DEFINED__
#define __WindowRectangle_FWD_DEFINED__
typedef interface WindowRectangle WindowRectangle;
#endif 	/* __WindowRectangle_FWD_DEFINED__ */


#ifndef __ClientRectangle_FWD_DEFINED__
#define __ClientRectangle_FWD_DEFINED__
typedef interface ClientRectangle ClientRectangle;
#endif 	/* __ClientRectangle_FWD_DEFINED__ */


#ifndef __Color_FWD_DEFINED__
#define __Color_FWD_DEFINED__
typedef interface Color Color;
#endif 	/* __Color_FWD_DEFINED__ */


#ifndef __WordColumnVerbosity_FWD_DEFINED__
#define __WordColumnVerbosity_FWD_DEFINED__
typedef interface WordColumnVerbosity WordColumnVerbosity;
#endif 	/* __WordColumnVerbosity_FWD_DEFINED__ */


#ifndef __WordFieldVerbosity_FWD_DEFINED__
#define __WordFieldVerbosity_FWD_DEFINED__
typedef interface WordFieldVerbosity WordFieldVerbosity;
#endif 	/* __WordFieldVerbosity_FWD_DEFINED__ */


#ifndef __WordHeaderFooterVerbosity_FWD_DEFINED__
#define __WordHeaderFooterVerbosity_FWD_DEFINED__
typedef interface WordHeaderFooterVerbosity WordHeaderFooterVerbosity;
#endif 	/* __WordHeaderFooterVerbosity_FWD_DEFINED__ */


#ifndef __WordMiscVerbosity_FWD_DEFINED__
#define __WordMiscVerbosity_FWD_DEFINED__
typedef interface WordMiscVerbosity WordMiscVerbosity;
#endif 	/* __WordMiscVerbosity_FWD_DEFINED__ */


#ifndef __WordPictureObjectVerbosity_FWD_DEFINED__
#define __WordPictureObjectVerbosity_FWD_DEFINED__
typedef interface WordPictureObjectVerbosity WordPictureObjectVerbosity;
#endif 	/* __WordPictureObjectVerbosity_FWD_DEFINED__ */


#ifndef __WordReferenceVerbosity_FWD_DEFINED__
#define __WordReferenceVerbosity_FWD_DEFINED__
typedef interface WordReferenceVerbosity WordReferenceVerbosity;
#endif 	/* __WordReferenceVerbosity_FWD_DEFINED__ */


#ifndef __WordRevisionVerbosity_FWD_DEFINED__
#define __WordRevisionVerbosity_FWD_DEFINED__
typedef interface WordRevisionVerbosity WordRevisionVerbosity;
#endif 	/* __WordRevisionVerbosity_FWD_DEFINED__ */


#ifndef __WordSectionVerbosity_FWD_DEFINED__
#define __WordSectionVerbosity_FWD_DEFINED__
typedef interface WordSectionVerbosity WordSectionVerbosity;
#endif 	/* __WordSectionVerbosity_FWD_DEFINED__ */


#ifndef __WordSpellingGrammarVerbosity_FWD_DEFINED__
#define __WordSpellingGrammarVerbosity_FWD_DEFINED__
typedef interface WordSpellingGrammarVerbosity WordSpellingGrammarVerbosity;
#endif 	/* __WordSpellingGrammarVerbosity_FWD_DEFINED__ */


#ifndef __WordTableVerbosity_FWD_DEFINED__
#define __WordTableVerbosity_FWD_DEFINED__
typedef interface WordTableVerbosity WordTableVerbosity;
#endif 	/* __WordTableVerbosity_FWD_DEFINED__ */


#ifndef __PowerPointSlideVerbosity_FWD_DEFINED__
#define __PowerPointSlideVerbosity_FWD_DEFINED__
typedef interface PowerPointSlideVerbosity PowerPointSlideVerbosity;
#endif 	/* __PowerPointSlideVerbosity_FWD_DEFINED__ */


#ifndef __PowerPointPlaybackVerbosity_FWD_DEFINED__
#define __PowerPointPlaybackVerbosity_FWD_DEFINED__
typedef interface PowerPointPlaybackVerbosity PowerPointPlaybackVerbosity;
#endif 	/* __PowerPointPlaybackVerbosity_FWD_DEFINED__ */


#ifndef __ExcelSummaryVerbosity_FWD_DEFINED__
#define __ExcelSummaryVerbosity_FWD_DEFINED__
typedef interface ExcelSummaryVerbosity ExcelSummaryVerbosity;
#endif 	/* __ExcelSummaryVerbosity_FWD_DEFINED__ */


#ifndef __ExcelCellVerbosity_FWD_DEFINED__
#define __ExcelCellVerbosity_FWD_DEFINED__
typedef interface ExcelCellVerbosity ExcelCellVerbosity;
#endif 	/* __ExcelCellVerbosity_FWD_DEFINED__ */


#ifndef __ExcelMiscVerbosity_FWD_DEFINED__
#define __ExcelMiscVerbosity_FWD_DEFINED__
typedef interface ExcelMiscVerbosity ExcelMiscVerbosity;
#endif 	/* __ExcelMiscVerbosity_FWD_DEFINED__ */


#ifndef __ExcelSelectionVerbosity_FWD_DEFINED__
#define __ExcelSelectionVerbosity_FWD_DEFINED__
typedef interface ExcelSelectionVerbosity ExcelSelectionVerbosity;
#endif 	/* __ExcelSelectionVerbosity_FWD_DEFINED__ */


#ifndef __ExceptionEntry_FWD_DEFINED__
#define __ExceptionEntry_FWD_DEFINED__
typedef interface ExceptionEntry ExceptionEntry;
#endif 	/* __ExceptionEntry_FWD_DEFINED__ */


#ifndef __ColorEntry_FWD_DEFINED__
#define __ColorEntry_FWD_DEFINED__
typedef interface ColorEntry ColorEntry;
#endif 	/* __ColorEntry_FWD_DEFINED__ */


#ifndef __KeyLabelEntry_FWD_DEFINED__
#define __KeyLabelEntry_FWD_DEFINED__
typedef interface KeyLabelEntry KeyLabelEntry;
#endif 	/* __KeyLabelEntry_FWD_DEFINED__ */


#ifndef __GraphicEntry_FWD_DEFINED__
#define __GraphicEntry_FWD_DEFINED__
typedef interface GraphicEntry GraphicEntry;
#endif 	/* __GraphicEntry_FWD_DEFINED__ */


#ifndef __CharacterEntry_FWD_DEFINED__
#define __CharacterEntry_FWD_DEFINED__
typedef interface CharacterEntry CharacterEntry;
#endif 	/* __CharacterEntry_FWD_DEFINED__ */


#ifndef ___MousePointer_FWD_DEFINED__
#define ___MousePointer_FWD_DEFINED__
typedef interface _MousePointer _MousePointer;
#endif 	/* ___MousePointer_FWD_DEFINED__ */


#ifndef ___SharedObjects_FWD_DEFINED__
#define ___SharedObjects_FWD_DEFINED__
typedef interface _SharedObjects _SharedObjects;
#endif 	/* ___SharedObjects_FWD_DEFINED__ */


#ifndef ___ClientInformation_FWD_DEFINED__
#define ___ClientInformation_FWD_DEFINED__
typedef interface _ClientInformation _ClientInformation;
#endif 	/* ___ClientInformation_FWD_DEFINED__ */


#ifndef ___Dialog_FWD_DEFINED__
#define ___Dialog_FWD_DEFINED__
typedef interface _Dialog _Dialog;
#endif 	/* ___Dialog_FWD_DEFINED__ */


#ifndef __Text_FWD_DEFINED__
#define __Text_FWD_DEFINED__
typedef interface Text Text;
#endif 	/* __Text_FWD_DEFINED__ */


#ifndef __Screen_FWD_DEFINED__
#define __Screen_FWD_DEFINED__
typedef interface Screen Screen;
#endif 	/* __Screen_FWD_DEFINED__ */


#ifndef ___Control_FWD_DEFINED__
#define ___Control_FWD_DEFINED__
typedef interface _Control _Control;
#endif 	/* ___Control_FWD_DEFINED__ */


#ifndef __Engine_FWD_DEFINED__
#define __Engine_FWD_DEFINED__
typedef interface Engine Engine;
#endif 	/* __Engine_FWD_DEFINED__ */


#ifndef ___Synthesizers_FWD_DEFINED__
#define ___Synthesizers_FWD_DEFINED__
typedef interface _Synthesizers _Synthesizers;
#endif 	/* ___Synthesizers_FWD_DEFINED__ */


#ifndef __Engines_FWD_DEFINED__
#define __Engines_FWD_DEFINED__
typedef interface Engines Engines;
#endif 	/* __Engines_FWD_DEFINED__ */


#ifndef __HyperactiveWindowCommands_FWD_DEFINED__
#define __HyperactiveWindowCommands_FWD_DEFINED__
typedef interface HyperactiveWindowCommands HyperactiveWindowCommands;
#endif 	/* __HyperactiveWindowCommands_FWD_DEFINED__ */


#ifndef __TriggerSearchAttribute_FWD_DEFINED__
#define __TriggerSearchAttribute_FWD_DEFINED__
typedef interface TriggerSearchAttribute TriggerSearchAttribute;
#endif 	/* __TriggerSearchAttribute_FWD_DEFINED__ */


#ifndef __HyperactiveWindowCommand_FWD_DEFINED__
#define __HyperactiveWindowCommand_FWD_DEFINED__
typedef interface HyperactiveWindowCommand HyperactiveWindowCommand;
#endif 	/* __HyperactiveWindowCommand_FWD_DEFINED__ */


#ifndef __IniFile_FWD_DEFINED__
#define __IniFile_FWD_DEFINED__
typedef interface IniFile IniFile;
#endif 	/* __IniFile_FWD_DEFINED__ */


#ifndef ___Speech_FWD_DEFINED__
#define ___Speech_FWD_DEFINED__
typedef interface _Speech _Speech;
#endif 	/* ___Speech_FWD_DEFINED__ */


#ifndef __Accessible_FWD_DEFINED__
#define __Accessible_FWD_DEFINED__
typedef interface Accessible Accessible;
#endif 	/* __Accessible_FWD_DEFINED__ */


#ifndef __AccessibleRole_FWD_DEFINED__
#define __AccessibleRole_FWD_DEFINED__
typedef interface AccessibleRole AccessibleRole;
#endif 	/* __AccessibleRole_FWD_DEFINED__ */


#ifndef __AccessibleState_FWD_DEFINED__
#define __AccessibleState_FWD_DEFINED__
typedef interface AccessibleState AccessibleState;
#endif 	/* __AccessibleState_FWD_DEFINED__ */


#ifndef __Accessibles_FWD_DEFINED__
#define __Accessibles_FWD_DEFINED__
typedef interface Accessibles Accessibles;
#endif 	/* __Accessibles_FWD_DEFINED__ */


#ifndef ___MSAAEvents_FWD_DEFINED__
#define ___MSAAEvents_FWD_DEFINED__
typedef interface _MSAAEvents _MSAAEvents;
#endif 	/* ___MSAAEvents_FWD_DEFINED__ */


#ifndef __Clipboard_FWD_DEFINED__
#define __Clipboard_FWD_DEFINED__
typedef interface Clipboard Clipboard;
#endif 	/* __Clipboard_FWD_DEFINED__ */


#ifndef ___BrowseMode_FWD_DEFINED__
#define ___BrowseMode_FWD_DEFINED__
typedef interface _BrowseMode _BrowseMode;
#endif 	/* ___BrowseMode_FWD_DEFINED__ */


#ifndef __WEDialogs_FWD_DEFINED__
#define __WEDialogs_FWD_DEFINED__
typedef interface WEDialogs WEDialogs;
#endif 	/* __WEDialogs_FWD_DEFINED__ */


#ifndef __OSVersion_FWD_DEFINED__
#define __OSVersion_FWD_DEFINED__
typedef interface OSVersion OSVersion;
#endif 	/* __OSVersion_FWD_DEFINED__ */


#ifndef __WECursor_FWD_DEFINED__
#define __WECursor_FWD_DEFINED__
typedef interface WECursor WECursor;
#endif 	/* __WECursor_FWD_DEFINED__ */


#ifndef __StartupOptions_FWD_DEFINED__
#define __StartupOptions_FWD_DEFINED__
typedef interface StartupOptions StartupOptions;
#endif 	/* __StartupOptions_FWD_DEFINED__ */


#ifndef __WEPM_FWD_DEFINED__
#define __WEPM_FWD_DEFINED__
typedef interface WEPM WEPM;
#endif 	/* __WEPM_FWD_DEFINED__ */


#ifndef __Profiles_FWD_DEFINED__
#define __Profiles_FWD_DEFINED__
typedef interface Profiles Profiles;
#endif 	/* __Profiles_FWD_DEFINED__ */


#ifndef __Profile_FWD_DEFINED__
#define __Profile_FWD_DEFINED__
typedef interface Profile Profile;
#endif 	/* __Profile_FWD_DEFINED__ */


#ifndef __TreeView_FWD_DEFINED__
#define __TreeView_FWD_DEFINED__
typedef interface TreeView TreeView;
#endif 	/* __TreeView_FWD_DEFINED__ */


#ifndef __TreeViewItems_FWD_DEFINED__
#define __TreeViewItems_FWD_DEFINED__
typedef interface TreeViewItems TreeViewItems;
#endif 	/* __TreeViewItems_FWD_DEFINED__ */


#ifndef __TreeViewItem_FWD_DEFINED__
#define __TreeViewItem_FWD_DEFINED__
typedef interface TreeViewItem TreeViewItem;
#endif 	/* __TreeViewItem_FWD_DEFINED__ */


#ifndef __Utilities_FWD_DEFINED__
#define __Utilities_FWD_DEFINED__
typedef interface Utilities Utilities;
#endif 	/* __Utilities_FWD_DEFINED__ */


#ifndef __LocaleInformation_FWD_DEFINED__
#define __LocaleInformation_FWD_DEFINED__
typedef interface LocaleInformation LocaleInformation;
#endif 	/* __LocaleInformation_FWD_DEFINED__ */


#ifndef __LoadedScripts_FWD_DEFINED__
#define __LoadedScripts_FWD_DEFINED__
typedef interface LoadedScripts LoadedScripts;
#endif 	/* __LoadedScripts_FWD_DEFINED__ */


#ifndef __LoadedScript_FWD_DEFINED__
#define __LoadedScript_FWD_DEFINED__
typedef interface LoadedScript LoadedScript;
#endif 	/* __LoadedScript_FWD_DEFINED__ */


#ifndef __Menu_FWD_DEFINED__
#define __Menu_FWD_DEFINED__
typedef interface Menu Menu;
#endif 	/* __Menu_FWD_DEFINED__ */


#ifndef __RegisteredHotkeys_FWD_DEFINED__
#define __RegisteredHotkeys_FWD_DEFINED__
typedef interface RegisteredHotkeys RegisteredHotkeys;
#endif 	/* __RegisteredHotkeys_FWD_DEFINED__ */


#ifndef __RegisteredHotkey_FWD_DEFINED__
#define __RegisteredHotkey_FWD_DEFINED__
typedef interface RegisteredHotkey RegisteredHotkey;
#endif 	/* __RegisteredHotkey_FWD_DEFINED__ */


#ifndef __WindowMessage_FWD_DEFINED__
#define __WindowMessage_FWD_DEFINED__
typedef interface WindowMessage WindowMessage;
#endif 	/* __WindowMessage_FWD_DEFINED__ */


#ifndef __Settings2_FWD_DEFINED__
#define __Settings2_FWD_DEFINED__
typedef interface Settings2 Settings2;
#endif 	/* __Settings2_FWD_DEFINED__ */


#ifndef __SetFileScope_FWD_DEFINED__
#define __SetFileScope_FWD_DEFINED__
typedef interface SetFileScope SetFileScope;
#endif 	/* __SetFileScope_FWD_DEFINED__ */


#ifndef __ScreenSettingsScope_FWD_DEFINED__
#define __ScreenSettingsScope_FWD_DEFINED__
typedef interface ScreenSettingsScope ScreenSettingsScope;
#endif 	/* __ScreenSettingsScope_FWD_DEFINED__ */


#ifndef __KeyboardSettingsScope_FWD_DEFINED__
#define __KeyboardSettingsScope_FWD_DEFINED__
typedef interface KeyboardSettingsScope KeyboardSettingsScope;
#endif 	/* __KeyboardSettingsScope_FWD_DEFINED__ */


#ifndef __MouseSettingsScope_FWD_DEFINED__
#define __MouseSettingsScope_FWD_DEFINED__
typedef interface MouseSettingsScope MouseSettingsScope;
#endif 	/* __MouseSettingsScope_FWD_DEFINED__ */


#ifndef __GeneralSettingsScope_FWD_DEFINED__
#define __GeneralSettingsScope_FWD_DEFINED__
typedef interface GeneralSettingsScope GeneralSettingsScope;
#endif 	/* __GeneralSettingsScope_FWD_DEFINED__ */


#ifndef __HotkeysScope_FWD_DEFINED__
#define __HotkeysScope_FWD_DEFINED__
typedef interface HotkeysScope HotkeysScope;
#endif 	/* __HotkeysScope_FWD_DEFINED__ */


#ifndef __HotkeyScope_FWD_DEFINED__
#define __HotkeyScope_FWD_DEFINED__
typedef interface HotkeyScope HotkeyScope;
#endif 	/* __HotkeyScope_FWD_DEFINED__ */


#ifndef __VerbosityScope_FWD_DEFINED__
#define __VerbosityScope_FWD_DEFINED__
typedef interface VerbosityScope VerbosityScope;
#endif 	/* __VerbosityScope_FWD_DEFINED__ */


#ifndef __PunctuationSettingsScope_FWD_DEFINED__
#define __PunctuationSettingsScope_FWD_DEFINED__
typedef interface PunctuationSettingsScope PunctuationSettingsScope;
#endif 	/* __PunctuationSettingsScope_FWD_DEFINED__ */


#ifndef __SpecialKeySettingsScope_FWD_DEFINED__
#define __SpecialKeySettingsScope_FWD_DEFINED__
typedef interface SpecialKeySettingsScope SpecialKeySettingsScope;
#endif 	/* __SpecialKeySettingsScope_FWD_DEFINED__ */


#ifndef __BrailleSettingsScope_FWD_DEFINED__
#define __BrailleSettingsScope_FWD_DEFINED__
typedef interface BrailleSettingsScope BrailleSettingsScope;
#endif 	/* __BrailleSettingsScope_FWD_DEFINED__ */


#ifndef __BrailleScrollingOptionsScope_FWD_DEFINED__
#define __BrailleScrollingOptionsScope_FWD_DEFINED__
typedef interface BrailleScrollingOptionsScope BrailleScrollingOptionsScope;
#endif 	/* __BrailleScrollingOptionsScope_FWD_DEFINED__ */


#ifndef __BrailleControlInformationScope_FWD_DEFINED__
#define __BrailleControlInformationScope_FWD_DEFINED__
typedef interface BrailleControlInformationScope BrailleControlInformationScope;
#endif 	/* __BrailleControlInformationScope_FWD_DEFINED__ */


#ifndef __BrailleOptionsScope_FWD_DEFINED__
#define __BrailleOptionsScope_FWD_DEFINED__
typedef interface BrailleOptionsScope BrailleOptionsScope;
#endif 	/* __BrailleOptionsScope_FWD_DEFINED__ */


#ifndef __BrailleGraphicsScope_FWD_DEFINED__
#define __BrailleGraphicsScope_FWD_DEFINED__
typedef interface BrailleGraphicsScope BrailleGraphicsScope;
#endif 	/* __BrailleGraphicsScope_FWD_DEFINED__ */


#ifndef __BrowseModeAccessKeyVerbosity_FWD_DEFINED__
#define __BrowseModeAccessKeyVerbosity_FWD_DEFINED__
typedef interface BrowseModeAccessKeyVerbosity BrowseModeAccessKeyVerbosity;
#endif 	/* __BrowseModeAccessKeyVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeAcronymVerbosity_FWD_DEFINED__
#define __BrowseModeAcronymVerbosity_FWD_DEFINED__
typedef interface BrowseModeAcronymVerbosity BrowseModeAcronymVerbosity;
#endif 	/* __BrowseModeAcronymVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeFlashVerbosity_FWD_DEFINED__
#define __BrowseModeFlashVerbosity_FWD_DEFINED__
typedef interface BrowseModeFlashVerbosity BrowseModeFlashVerbosity;
#endif 	/* __BrowseModeFlashVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeFormVerbosity_FWD_DEFINED__
#define __BrowseModeFormVerbosity_FWD_DEFINED__
typedef interface BrowseModeFormVerbosity BrowseModeFormVerbosity;
#endif 	/* __BrowseModeFormVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeHeadingVerbosity_FWD_DEFINED__
#define __BrowseModeHeadingVerbosity_FWD_DEFINED__
typedef interface BrowseModeHeadingVerbosity BrowseModeHeadingVerbosity;
#endif 	/* __BrowseModeHeadingVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeLanguageVerbosity_FWD_DEFINED__
#define __BrowseModeLanguageVerbosity_FWD_DEFINED__
typedef interface BrowseModeLanguageVerbosity BrowseModeLanguageVerbosity;
#endif 	/* __BrowseModeLanguageVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeLinkVerbosity_FWD_DEFINED__
#define __BrowseModeLinkVerbosity_FWD_DEFINED__
typedef interface BrowseModeLinkVerbosity BrowseModeLinkVerbosity;
#endif 	/* __BrowseModeLinkVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeListVerbosity_FWD_DEFINED__
#define __BrowseModeListVerbosity_FWD_DEFINED__
typedef interface BrowseModeListVerbosity BrowseModeListVerbosity;
#endif 	/* __BrowseModeListVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeLongDescVerbosity_FWD_DEFINED__
#define __BrowseModeLongDescVerbosity_FWD_DEFINED__
typedef interface BrowseModeLongDescVerbosity BrowseModeLongDescVerbosity;
#endif 	/* __BrowseModeLongDescVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeMiscVerbosity_FWD_DEFINED__
#define __BrowseModeMiscVerbosity_FWD_DEFINED__
typedef interface BrowseModeMiscVerbosity BrowseModeMiscVerbosity;
#endif 	/* __BrowseModeMiscVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeNewPageVerbosity_FWD_DEFINED__
#define __BrowseModeNewPageVerbosity_FWD_DEFINED__
typedef interface BrowseModeNewPageVerbosity BrowseModeNewPageVerbosity;
#endif 	/* __BrowseModeNewPageVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeObjectVerbosity_FWD_DEFINED__
#define __BrowseModeObjectVerbosity_FWD_DEFINED__
typedef interface BrowseModeObjectVerbosity BrowseModeObjectVerbosity;
#endif 	/* __BrowseModeObjectVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeParagraphVerbosity_FWD_DEFINED__
#define __BrowseModeParagraphVerbosity_FWD_DEFINED__
typedef interface BrowseModeParagraphVerbosity BrowseModeParagraphVerbosity;
#endif 	/* __BrowseModeParagraphVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeQuoteVerbosity_FWD_DEFINED__
#define __BrowseModeQuoteVerbosity_FWD_DEFINED__
typedef interface BrowseModeQuoteVerbosity BrowseModeQuoteVerbosity;
#endif 	/* __BrowseModeQuoteVerbosity_FWD_DEFINED__ */


#ifndef __BrowseModeTableVerbosity_FWD_DEFINED__
#define __BrowseModeTableVerbosity_FWD_DEFINED__
typedef interface BrowseModeTableVerbosity BrowseModeTableVerbosity;
#endif 	/* __BrowseModeTableVerbosity_FWD_DEFINED__ */


#ifndef __ActivatedVerbosityScope_FWD_DEFINED__
#define __ActivatedVerbosityScope_FWD_DEFINED__
typedef interface ActivatedVerbosityScope ActivatedVerbosityScope;
#endif 	/* __ActivatedVerbosityScope_FWD_DEFINED__ */


#ifndef __FocusedVerbosityScope_FWD_DEFINED__
#define __FocusedVerbosityScope_FWD_DEFINED__
typedef interface FocusedVerbosityScope FocusedVerbosityScope;
#endif 	/* __FocusedVerbosityScope_FWD_DEFINED__ */


#ifndef __MenuVerbosityScope_FWD_DEFINED__
#define __MenuVerbosityScope_FWD_DEFINED__
typedef interface MenuVerbosityScope MenuVerbosityScope;
#endif 	/* __MenuVerbosityScope_FWD_DEFINED__ */


#ifndef __AttributeChangeVerbosityScope_FWD_DEFINED__
#define __AttributeChangeVerbosityScope_FWD_DEFINED__
typedef interface AttributeChangeVerbosityScope AttributeChangeVerbosityScope;
#endif 	/* __AttributeChangeVerbosityScope_FWD_DEFINED__ */


#ifndef __MouseVerbosityScope_FWD_DEFINED__
#define __MouseVerbosityScope_FWD_DEFINED__
typedef interface MouseVerbosityScope MouseVerbosityScope;
#endif 	/* __MouseVerbosityScope_FWD_DEFINED__ */


#ifndef __MiscVerbosityScope_FWD_DEFINED__
#define __MiscVerbosityScope_FWD_DEFINED__
typedef interface MiscVerbosityScope MiscVerbosityScope;
#endif 	/* __MiscVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeVerbosityScope_FWD_DEFINED__
#define __BrowseModeVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeVerbosityScope BrowseModeVerbosityScope;
#endif 	/* __BrowseModeVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeAccessKeyVerbosityScope_FWD_DEFINED__
#define __BrowseModeAccessKeyVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeAccessKeyVerbosityScope BrowseModeAccessKeyVerbosityScope;
#endif 	/* __BrowseModeAccessKeyVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeAcronymVerbosityScope_FWD_DEFINED__
#define __BrowseModeAcronymVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeAcronymVerbosityScope BrowseModeAcronymVerbosityScope;
#endif 	/* __BrowseModeAcronymVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeFlashVerbosityScope_FWD_DEFINED__
#define __BrowseModeFlashVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeFlashVerbosityScope BrowseModeFlashVerbosityScope;
#endif 	/* __BrowseModeFlashVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeFormVerbosityScope_FWD_DEFINED__
#define __BrowseModeFormVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeFormVerbosityScope BrowseModeFormVerbosityScope;
#endif 	/* __BrowseModeFormVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeHeadingVerbosityScope_FWD_DEFINED__
#define __BrowseModeHeadingVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeHeadingVerbosityScope BrowseModeHeadingVerbosityScope;
#endif 	/* __BrowseModeHeadingVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeLanguageVerbosityScope_FWD_DEFINED__
#define __BrowseModeLanguageVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeLanguageVerbosityScope BrowseModeLanguageVerbosityScope;
#endif 	/* __BrowseModeLanguageVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeLinkVerbosityScope_FWD_DEFINED__
#define __BrowseModeLinkVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeLinkVerbosityScope BrowseModeLinkVerbosityScope;
#endif 	/* __BrowseModeLinkVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeListVerbosityScope_FWD_DEFINED__
#define __BrowseModeListVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeListVerbosityScope BrowseModeListVerbosityScope;
#endif 	/* __BrowseModeListVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeLongDescVerbosityScope_FWD_DEFINED__
#define __BrowseModeLongDescVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeLongDescVerbosityScope BrowseModeLongDescVerbosityScope;
#endif 	/* __BrowseModeLongDescVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeMiscVerbosityScope_FWD_DEFINED__
#define __BrowseModeMiscVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeMiscVerbosityScope BrowseModeMiscVerbosityScope;
#endif 	/* __BrowseModeMiscVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeNewPageVerbosityScope_FWD_DEFINED__
#define __BrowseModeNewPageVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeNewPageVerbosityScope BrowseModeNewPageVerbosityScope;
#endif 	/* __BrowseModeNewPageVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeObjectVerbosityScope_FWD_DEFINED__
#define __BrowseModeObjectVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeObjectVerbosityScope BrowseModeObjectVerbosityScope;
#endif 	/* __BrowseModeObjectVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeParagraphVerbosityScope_FWD_DEFINED__
#define __BrowseModeParagraphVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeParagraphVerbosityScope BrowseModeParagraphVerbosityScope;
#endif 	/* __BrowseModeParagraphVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeQuoteVerbosityScope_FWD_DEFINED__
#define __BrowseModeQuoteVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeQuoteVerbosityScope BrowseModeQuoteVerbosityScope;
#endif 	/* __BrowseModeQuoteVerbosityScope_FWD_DEFINED__ */


#ifndef __BrowseModeTableVerbosityScope_FWD_DEFINED__
#define __BrowseModeTableVerbosityScope_FWD_DEFINED__
typedef interface BrowseModeTableVerbosityScope BrowseModeTableVerbosityScope;
#endif 	/* __BrowseModeTableVerbosityScope_FWD_DEFINED__ */


#ifndef ___ApplicationEvents_FWD_DEFINED__
#define ___ApplicationEvents_FWD_DEFINED__
typedef interface _ApplicationEvents _ApplicationEvents;
#endif 	/* ___ApplicationEvents_FWD_DEFINED__ */


#ifndef __ApplicationEvents_FWD_DEFINED__
#define __ApplicationEvents_FWD_DEFINED__
typedef interface ApplicationEvents ApplicationEvents;
#endif 	/* __ApplicationEvents_FWD_DEFINED__ */


#ifndef ___SharedObjectEvents_FWD_DEFINED__
#define ___SharedObjectEvents_FWD_DEFINED__
typedef interface _SharedObjectEvents _SharedObjectEvents;
#endif 	/* ___SharedObjectEvents_FWD_DEFINED__ */


#ifndef __SharedObjectEvents_FWD_DEFINED__
#define __SharedObjectEvents_FWD_DEFINED__
typedef interface SharedObjectEvents SharedObjectEvents;
#endif 	/* __SharedObjectEvents_FWD_DEFINED__ */


#ifndef ___ClientInformationEvents_FWD_DEFINED__
#define ___ClientInformationEvents_FWD_DEFINED__
typedef interface _ClientInformationEvents _ClientInformationEvents;
#endif 	/* ___ClientInformationEvents_FWD_DEFINED__ */


#ifndef __ClientInformationEvents_FWD_DEFINED__
#define __ClientInformationEvents_FWD_DEFINED__
typedef interface ClientInformationEvents ClientInformationEvents;
#endif 	/* __ClientInformationEvents_FWD_DEFINED__ */


#ifndef ___Script_FWD_DEFINED__
#define ___Script_FWD_DEFINED__
typedef interface _Script _Script;
#endif 	/* ___Script_FWD_DEFINED__ */


#ifndef ___ScriptEvents_FWD_DEFINED__
#define ___ScriptEvents_FWD_DEFINED__
typedef interface _ScriptEvents _ScriptEvents;
#endif 	/* ___ScriptEvents_FWD_DEFINED__ */


#ifndef __ScriptEvents_FWD_DEFINED__
#define __ScriptEvents_FWD_DEFINED__
typedef interface ScriptEvents ScriptEvents;
#endif 	/* __ScriptEvents_FWD_DEFINED__ */


#ifndef ___MouseEvents_FWD_DEFINED__
#define ___MouseEvents_FWD_DEFINED__
typedef interface _MouseEvents _MouseEvents;
#endif 	/* ___MouseEvents_FWD_DEFINED__ */


#ifndef __MouseEvents_FWD_DEFINED__
#define __MouseEvents_FWD_DEFINED__
typedef interface MouseEvents MouseEvents;
#endif 	/* __MouseEvents_FWD_DEFINED__ */


#ifndef __IWEConnectionPointSink_FWD_DEFINED__
#define __IWEConnectionPointSink_FWD_DEFINED__
typedef interface IWEConnectionPointSink IWEConnectionPointSink;
#endif 	/* __IWEConnectionPointSink_FWD_DEFINED__ */


#ifndef __WindowEvents_FWD_DEFINED__
#define __WindowEvents_FWD_DEFINED__
typedef interface WindowEvents WindowEvents;
#endif 	/* __WindowEvents_FWD_DEFINED__ */


#ifndef ___KeyEvents_FWD_DEFINED__
#define ___KeyEvents_FWD_DEFINED__
typedef interface _KeyEvents _KeyEvents;
#endif 	/* ___KeyEvents_FWD_DEFINED__ */


#ifndef __KeyEvents_FWD_DEFINED__
#define __KeyEvents_FWD_DEFINED__
typedef interface KeyEvents KeyEvents;
#endif 	/* __KeyEvents_FWD_DEFINED__ */


#ifndef __BrailleAttributes_FWD_DEFINED__
#define __BrailleAttributes_FWD_DEFINED__
typedef interface BrailleAttributes BrailleAttributes;
#endif 	/* __BrailleAttributes_FWD_DEFINED__ */


#ifndef ___Braille_FWD_DEFINED__
#define ___Braille_FWD_DEFINED__
typedef interface _Braille _Braille;
#endif 	/* ___Braille_FWD_DEFINED__ */


#ifndef ___BrailleEvents_FWD_DEFINED__
#define ___BrailleEvents_FWD_DEFINED__
typedef interface _BrailleEvents _BrailleEvents;
#endif 	/* ___BrailleEvents_FWD_DEFINED__ */


#ifndef __BrailleEvents_FWD_DEFINED__
#define __BrailleEvents_FWD_DEFINED__
typedef interface BrailleEvents BrailleEvents;
#endif 	/* __BrailleEvents_FWD_DEFINED__ */


#ifndef ___BrailleDisplayEvents_FWD_DEFINED__
#define ___BrailleDisplayEvents_FWD_DEFINED__
typedef interface _BrailleDisplayEvents _BrailleDisplayEvents;
#endif 	/* ___BrailleDisplayEvents_FWD_DEFINED__ */


#ifndef __BrailleDisplayEvents_FWD_DEFINED__
#define __BrailleDisplayEvents_FWD_DEFINED__
typedef interface BrailleDisplayEvents BrailleDisplayEvents;
#endif 	/* __BrailleDisplayEvents_FWD_DEFINED__ */


#ifndef ___BrailleDisplays_FWD_DEFINED__
#define ___BrailleDisplays_FWD_DEFINED__
typedef interface _BrailleDisplays _BrailleDisplays;
#endif 	/* ___BrailleDisplays_FWD_DEFINED__ */


#ifndef ___BrailleDisplaysEvents_FWD_DEFINED__
#define ___BrailleDisplaysEvents_FWD_DEFINED__
typedef interface _BrailleDisplaysEvents _BrailleDisplaysEvents;
#endif 	/* ___BrailleDisplaysEvents_FWD_DEFINED__ */


#ifndef __BrailleDisplaysEvents_FWD_DEFINED__
#define __BrailleDisplaysEvents_FWD_DEFINED__
typedef interface BrailleDisplaysEvents BrailleDisplaysEvents;
#endif 	/* __BrailleDisplaysEvents_FWD_DEFINED__ */


#ifndef ___SpeechEvents_FWD_DEFINED__
#define ___SpeechEvents_FWD_DEFINED__
typedef interface _SpeechEvents _SpeechEvents;
#endif 	/* ___SpeechEvents_FWD_DEFINED__ */


#ifndef __SpeechEvents_FWD_DEFINED__
#define __SpeechEvents_FWD_DEFINED__
typedef interface SpeechEvents SpeechEvents;
#endif 	/* __SpeechEvents_FWD_DEFINED__ */


#ifndef __CharacterOffsets_FWD_DEFINED__
#define __CharacterOffsets_FWD_DEFINED__
typedef interface CharacterOffsets CharacterOffsets;
#endif 	/* __CharacterOffsets_FWD_DEFINED__ */


#ifndef ___MouseCursorEvents_FWD_DEFINED__
#define ___MouseCursorEvents_FWD_DEFINED__
typedef interface _MouseCursorEvents _MouseCursorEvents;
#endif 	/* ___MouseCursorEvents_FWD_DEFINED__ */


#ifndef __MouseCursorEvents_FWD_DEFINED__
#define __MouseCursorEvents_FWD_DEFINED__
typedef interface MouseCursorEvents MouseCursorEvents;
#endif 	/* __MouseCursorEvents_FWD_DEFINED__ */


#ifndef ___EditBox_FWD_DEFINED__
#define ___EditBox_FWD_DEFINED__
typedef interface _EditBox _EditBox;
#endif 	/* ___EditBox_FWD_DEFINED__ */


#ifndef ___Pushbutton_FWD_DEFINED__
#define ___Pushbutton_FWD_DEFINED__
typedef interface _Pushbutton _Pushbutton;
#endif 	/* ___Pushbutton_FWD_DEFINED__ */


#ifndef ___CheckBox_FWD_DEFINED__
#define ___CheckBox_FWD_DEFINED__
typedef interface _CheckBox _CheckBox;
#endif 	/* ___CheckBox_FWD_DEFINED__ */


#ifndef ___RadioButton_FWD_DEFINED__
#define ___RadioButton_FWD_DEFINED__
typedef interface _RadioButton _RadioButton;
#endif 	/* ___RadioButton_FWD_DEFINED__ */


#ifndef __GroupBox_FWD_DEFINED__
#define __GroupBox_FWD_DEFINED__
typedef interface GroupBox GroupBox;
#endif 	/* __GroupBox_FWD_DEFINED__ */


#ifndef __Static_FWD_DEFINED__
#define __Static_FWD_DEFINED__
typedef interface Static Static;
#endif 	/* __Static_FWD_DEFINED__ */


#ifndef ___ComboBox_FWD_DEFINED__
#define ___ComboBox_FWD_DEFINED__
typedef interface _ComboBox _ComboBox;
#endif 	/* ___ComboBox_FWD_DEFINED__ */


#ifndef ___ListBox_FWD_DEFINED__
#define ___ListBox_FWD_DEFINED__
typedef interface _ListBox _ListBox;
#endif 	/* ___ListBox_FWD_DEFINED__ */


#ifndef ___UpDown_FWD_DEFINED__
#define ___UpDown_FWD_DEFINED__
typedef interface _UpDown _UpDown;
#endif 	/* ___UpDown_FWD_DEFINED__ */


#ifndef __ProgressBar_FWD_DEFINED__
#define __ProgressBar_FWD_DEFINED__
typedef interface ProgressBar ProgressBar;
#endif 	/* __ProgressBar_FWD_DEFINED__ */


#ifndef ___TrackBar_FWD_DEFINED__
#define ___TrackBar_FWD_DEFINED__
typedef interface _TrackBar _TrackBar;
#endif 	/* ___TrackBar_FWD_DEFINED__ */


#ifndef __TabControl_FWD_DEFINED__
#define __TabControl_FWD_DEFINED__
typedef interface TabControl TabControl;
#endif 	/* __TabControl_FWD_DEFINED__ */


#ifndef __TreeViewEventInfo_FWD_DEFINED__
#define __TreeViewEventInfo_FWD_DEFINED__
typedef interface TreeViewEventInfo TreeViewEventInfo;
#endif 	/* __TreeViewEventInfo_FWD_DEFINED__ */


#ifndef __ListViewItem_FWD_DEFINED__
#define __ListViewItem_FWD_DEFINED__
typedef interface ListViewItem ListViewItem;
#endif 	/* __ListViewItem_FWD_DEFINED__ */


#ifndef __ListViewItems_FWD_DEFINED__
#define __ListViewItems_FWD_DEFINED__
typedef interface ListViewItems ListViewItems;
#endif 	/* __ListViewItems_FWD_DEFINED__ */


#ifndef __ListViewColumn_FWD_DEFINED__
#define __ListViewColumn_FWD_DEFINED__
typedef interface ListViewColumn ListViewColumn;
#endif 	/* __ListViewColumn_FWD_DEFINED__ */


#ifndef __ListViewColumns_FWD_DEFINED__
#define __ListViewColumns_FWD_DEFINED__
typedef interface ListViewColumns ListViewColumns;
#endif 	/* __ListViewColumns_FWD_DEFINED__ */


#ifndef __ListView_FWD_DEFINED__
#define __ListView_FWD_DEFINED__
typedef interface ListView ListView;
#endif 	/* __ListView_FWD_DEFINED__ */


#ifndef __UpDownEventInfo_FWD_DEFINED__
#define __UpDownEventInfo_FWD_DEFINED__
typedef interface UpDownEventInfo UpDownEventInfo;
#endif 	/* __UpDownEventInfo_FWD_DEFINED__ */


#ifndef ___SynthesizersEvents_FWD_DEFINED__
#define ___SynthesizersEvents_FWD_DEFINED__
typedef interface _SynthesizersEvents _SynthesizersEvents;
#endif 	/* ___SynthesizersEvents_FWD_DEFINED__ */


#ifndef __SynthesizersEvents_FWD_DEFINED__
#define __SynthesizersEvents_FWD_DEFINED__
typedef interface SynthesizersEvents SynthesizersEvents;
#endif 	/* __SynthesizersEvents_FWD_DEFINED__ */


#ifndef __MSAAEventBlock_FWD_DEFINED__
#define __MSAAEventBlock_FWD_DEFINED__
typedef interface MSAAEventBlock MSAAEventBlock;
#endif 	/* __MSAAEventBlock_FWD_DEFINED__ */


#ifndef ____MSAAEvents_FWD_DEFINED__
#define ____MSAAEvents_FWD_DEFINED__
typedef interface __MSAAEvents __MSAAEvents;
#endif 	/* ____MSAAEvents_FWD_DEFINED__ */


#ifndef __MSAAEvents_FWD_DEFINED__
#define __MSAAEvents_FWD_DEFINED__
typedef interface MSAAEvents MSAAEvents;
#endif 	/* __MSAAEvents_FWD_DEFINED__ */


#ifndef __BrowseModeLine_FWD_DEFINED__
#define __BrowseModeLine_FWD_DEFINED__
typedef interface BrowseModeLine BrowseModeLine;
#endif 	/* __BrowseModeLine_FWD_DEFINED__ */


#ifndef __BrowseModeLines_FWD_DEFINED__
#define __BrowseModeLines_FWD_DEFINED__
typedef interface BrowseModeLines BrowseModeLines;
#endif 	/* __BrowseModeLines_FWD_DEFINED__ */


#ifndef ___BrowseModeEvents_FWD_DEFINED__
#define ___BrowseModeEvents_FWD_DEFINED__
typedef interface _BrowseModeEvents _BrowseModeEvents;
#endif 	/* ___BrowseModeEvents_FWD_DEFINED__ */


#ifndef __BrowseModeEvents_FWD_DEFINED__
#define __BrowseModeEvents_FWD_DEFINED__
typedef interface BrowseModeEvents BrowseModeEvents;
#endif 	/* __BrowseModeEvents_FWD_DEFINED__ */


#ifndef __Application_FWD_DEFINED__
#define __Application_FWD_DEFINED__

#ifdef __cplusplus
typedef class Application Application;
#else
typedef struct Application Application;
#endif /* __cplusplus */

#endif 	/* __Application_FWD_DEFINED__ */


#ifndef __Keyboard_FWD_DEFINED__
#define __Keyboard_FWD_DEFINED__

#ifdef __cplusplus
typedef class Keyboard Keyboard;
#else
typedef struct Keyboard Keyboard;
#endif /* __cplusplus */

#endif 	/* __Keyboard_FWD_DEFINED__ */


#ifndef __Key_FWD_DEFINED__
#define __Key_FWD_DEFINED__

#ifdef __cplusplus
typedef class Key Key;
#else
typedef struct Key Key;
#endif /* __cplusplus */

#endif 	/* __Key_FWD_DEFINED__ */


#ifndef __Script_FWD_DEFINED__
#define __Script_FWD_DEFINED__

#ifdef __cplusplus
typedef class Script Script;
#else
typedef struct Script Script;
#endif /* __cplusplus */

#endif 	/* __Script_FWD_DEFINED__ */


#ifndef __Window_FWD_DEFINED__
#define __Window_FWD_DEFINED__

#ifdef __cplusplus
typedef class Window Window;
#else
typedef struct Window Window;
#endif /* __cplusplus */

#endif 	/* __Window_FWD_DEFINED__ */


#ifndef __ClientInformation_FWD_DEFINED__
#define __ClientInformation_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClientInformation ClientInformation;
#else
typedef struct ClientInformation ClientInformation;
#endif /* __cplusplus */

#endif 	/* __ClientInformation_FWD_DEFINED__ */


#ifndef __Mouse_FWD_DEFINED__
#define __Mouse_FWD_DEFINED__

#ifdef __cplusplus
typedef class Mouse Mouse;
#else
typedef struct Mouse Mouse;
#endif /* __cplusplus */

#endif 	/* __Mouse_FWD_DEFINED__ */


#ifndef __Dialog_FWD_DEFINED__
#define __Dialog_FWD_DEFINED__

#ifdef __cplusplus
typedef class Dialog Dialog;
#else
typedef struct Dialog Dialog;
#endif /* __cplusplus */

#endif 	/* __Dialog_FWD_DEFINED__ */


#ifndef __MousePointer_FWD_DEFINED__
#define __MousePointer_FWD_DEFINED__

#ifdef __cplusplus
typedef class MousePointer MousePointer;
#else
typedef struct MousePointer MousePointer;
#endif /* __cplusplus */

#endif 	/* __MousePointer_FWD_DEFINED__ */


#ifndef __Control_FWD_DEFINED__
#define __Control_FWD_DEFINED__

#ifdef __cplusplus
typedef class Control Control;
#else
typedef struct Control Control;
#endif /* __cplusplus */

#endif 	/* __Control_FWD_DEFINED__ */


#ifndef __EditBox_FWD_DEFINED__
#define __EditBox_FWD_DEFINED__

#ifdef __cplusplus
typedef class EditBox EditBox;
#else
typedef struct EditBox EditBox;
#endif /* __cplusplus */

#endif 	/* __EditBox_FWD_DEFINED__ */


#ifndef __Pushbutton_FWD_DEFINED__
#define __Pushbutton_FWD_DEFINED__

#ifdef __cplusplus
typedef class Pushbutton Pushbutton;
#else
typedef struct Pushbutton Pushbutton;
#endif /* __cplusplus */

#endif 	/* __Pushbutton_FWD_DEFINED__ */


#ifndef __CheckBox_FWD_DEFINED__
#define __CheckBox_FWD_DEFINED__

#ifdef __cplusplus
typedef class CheckBox CheckBox;
#else
typedef struct CheckBox CheckBox;
#endif /* __cplusplus */

#endif 	/* __CheckBox_FWD_DEFINED__ */


#ifndef __RadioButton_FWD_DEFINED__
#define __RadioButton_FWD_DEFINED__

#ifdef __cplusplus
typedef class RadioButton RadioButton;
#else
typedef struct RadioButton RadioButton;
#endif /* __cplusplus */

#endif 	/* __RadioButton_FWD_DEFINED__ */


#ifndef __ComboBox_FWD_DEFINED__
#define __ComboBox_FWD_DEFINED__

#ifdef __cplusplus
typedef class ComboBox ComboBox;
#else
typedef struct ComboBox ComboBox;
#endif /* __cplusplus */

#endif 	/* __ComboBox_FWD_DEFINED__ */


#ifndef __ListBox_FWD_DEFINED__
#define __ListBox_FWD_DEFINED__

#ifdef __cplusplus
typedef class ListBox ListBox;
#else
typedef struct ListBox ListBox;
#endif /* __cplusplus */

#endif 	/* __ListBox_FWD_DEFINED__ */


#ifndef __UpDown_FWD_DEFINED__
#define __UpDown_FWD_DEFINED__

#ifdef __cplusplus
typedef class UpDown UpDown;
#else
typedef struct UpDown UpDown;
#endif /* __cplusplus */

#endif 	/* __UpDown_FWD_DEFINED__ */


#ifndef __TrackBar_FWD_DEFINED__
#define __TrackBar_FWD_DEFINED__

#ifdef __cplusplus
typedef class TrackBar TrackBar;
#else
typedef struct TrackBar TrackBar;
#endif /* __cplusplus */

#endif 	/* __TrackBar_FWD_DEFINED__ */


#ifndef __Synthesizer_FWD_DEFINED__
#define __Synthesizer_FWD_DEFINED__

#ifdef __cplusplus
typedef class Synthesizer Synthesizer;
#else
typedef struct Synthesizer Synthesizer;
#endif /* __cplusplus */

#endif 	/* __Synthesizer_FWD_DEFINED__ */


#ifndef __Speech_FWD_DEFINED__
#define __Speech_FWD_DEFINED__

#ifdef __cplusplus
typedef class Speech Speech;
#else
typedef struct Speech Speech;
#endif /* __cplusplus */

#endif 	/* __Speech_FWD_DEFINED__ */


#ifndef __MSAAEventSource_FWD_DEFINED__
#define __MSAAEventSource_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSAAEventSource MSAAEventSource;
#else
typedef struct MSAAEventSource MSAAEventSource;
#endif /* __cplusplus */

#endif 	/* __MSAAEventSource_FWD_DEFINED__ */


#ifndef __BrowseMode_FWD_DEFINED__
#define __BrowseMode_FWD_DEFINED__

#ifdef __cplusplus
typedef class BrowseMode BrowseMode;
#else
typedef struct BrowseMode BrowseMode;
#endif /* __cplusplus */

#endif 	/* __BrowseMode_FWD_DEFINED__ */


#ifndef __SharedObjects_FWD_DEFINED__
#define __SharedObjects_FWD_DEFINED__

#ifdef __cplusplus
typedef class SharedObjects SharedObjects;
#else
typedef struct SharedObjects SharedObjects;
#endif /* __cplusplus */

#endif 	/* __SharedObjects_FWD_DEFINED__ */


#ifndef __BrailleDisplay_FWD_DEFINED__
#define __BrailleDisplay_FWD_DEFINED__

#ifdef __cplusplus
typedef class BrailleDisplay BrailleDisplay;
#else
typedef struct BrailleDisplay BrailleDisplay;
#endif /* __cplusplus */

#endif 	/* __BrailleDisplay_FWD_DEFINED__ */


#ifndef __Braille_FWD_DEFINED__
#define __Braille_FWD_DEFINED__

#ifdef __cplusplus
typedef class Braille Braille;
#else
typedef struct Braille Braille;
#endif /* __cplusplus */

#endif 	/* __Braille_FWD_DEFINED__ */


#ifndef __BrailleDisplays_FWD_DEFINED__
#define __BrailleDisplays_FWD_DEFINED__

#ifdef __cplusplus
typedef class BrailleDisplays BrailleDisplays;
#else
typedef struct BrailleDisplays BrailleDisplays;
#endif /* __cplusplus */

#endif 	/* __BrailleDisplays_FWD_DEFINED__ */


#ifndef __Synthesizers_FWD_DEFINED__
#define __Synthesizers_FWD_DEFINED__

#ifdef __cplusplus
typedef class Synthesizers Synthesizers;
#else
typedef struct Synthesizers Synthesizers;
#endif /* __cplusplus */

#endif 	/* __Synthesizers_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __WindowEyes_LIBRARY_DEFINED__
#define __WindowEyes_LIBRARY_DEFINED__

/* library WindowEyes */
/* [helpfile][helpstring][version][uuid] */ 

typedef /* [helpcontext] */ 
enum WindowEyesScriptingErrorCodes
    {	WE_E_BADCALLBACK	= 0x8004e001,
	WE_E_BADDICTIONARY	= 0x8004e002,
	WE_E_DIALOGXMLPARSE	= 0x8004e003,
	WE_E_CURSORKEYASSIGNACTION	= 0x8004d004,
	WE_E_DUPLICATESHAREDOBJECT	= 0x8004d005,
	WE_E_CANONLYAPPENDTEXTTOTEXT	= 0x8004d006,
	WE_E_CANONLYBECALLEDFROMANOVERLAP	= 0x8004d007,
	WE_E_PORTTOOLONG	= 0x8004d008,
	WE_E_FREEZETOOMUCH	= 0x8004d009,
	WE_E_NOTWITHNEWTVITEM	= 0x8004d00b,
	WE_E_DIALOGCIRCULARCLASSES	= 0x8004d00c,
	WE_E_INTERNAL_OVERLAP	= 0x8004d00d,
	WE_E_XLMPARSENOLANGUAGE	= 0x8004d00e,
	WE_E_BRAILLEOFF	= 0x8004d00f,
	WE_E_NOTCURRENTDISPLAY	= 0x8004d010,
	WE_E_BRAILLEOBJECTINVALID	= 0x8004d011,
	WE_E_NODICTIONARY	= 0x8004d012,
	WE_E_NOBRAILLETRANSLATIONTABLE	= 0x8004d013,
	WE_E_NOTIDENTIFIED	= 0x8004e004,
	WE_E_ALREADYIDENTIFIED	= 0x8004e005,
	WE_E_INVALIDDOTPATTERN	= 0x8004e006,
	WE_E_CONTAINSDUPLICATEDOTS	= 0x8004e007,
	WE_E_SPEECHBOXMODEEXCEEDSCHARACTERLIMIT	= 0x8004e008,
	WE_E_WECOMISMISSING	= 0x8004e009,
	WE_E_CANTSAVESET	= 0x8004e00a,
	WE_E_NOGLOBALPROPERTY	= 0x8004e00b
    } 	WindowEyesScriptingErrorCodes;

typedef /* [helpcontext] */ 
enum BlankLinesMode
    {	blmOff	= 0,
	blmSayBlank	= ( blmOff + 1 ) ,
	blmReadToEndOff	= ( blmSayBlank + 1 ) 
    } 	BlankLinesMode;

typedef /* [helpcontext] */ 
enum CapitalizationMode
    {	cmOff	= 0,
	cmSayCaps	= ( cmOff + 1 ) ,
	cmPitch	= ( cmSayCaps + 1 ) 
    } 	CapitalizationMode;

typedef /* [helpcontext] */ 
enum KeyboardInterruptabilityMode
    {	kimAllKeys	= 0,
	kimCursorKeysOff	= ( kimAllKeys + 1 ) ,
	kimCursorKeysOnly	= ( kimCursorKeysOff + 1 ) ,
	kimControlAlt	= ( kimCursorKeysOnly + 1 ) ,
	kimOff	= ( kimControlAlt + 1 ) 
    } 	KeyboardInterruptabilityMode;

typedef /* [helpcontext] */ 
enum KeyboardVoiceMode
    {	kvmOff	= 0,
	kvmCharacters	= ( kvmOff + 1 ) ,
	kvmWords	= ( kvmCharacters + 1 ) ,
	kvmWordsNumbers	= ( kvmWords + 1 ) ,
	kvmCharactersWords	= ( kvmWordsNumbers + 1 ) ,
	kvmCharactersWordsNumbers	= ( kvmCharactersWords + 1 ) ,
	kvmWordsInterrupt	= ( kvmCharactersWordsNumbers + 1 ) ,
	kvmWordsNumbersInterrupt	= ( kvmWordsInterrupt + 1 ) 
    } 	KeyboardVoiceMode;

typedef /* [helpcontext] */ 
enum LineFilterMode
    {	lfmOff	= 0,
	lfmOn	= ( lfmOff + 1 ) ,
	lfmReadToEnd	= ( lfmOn + 1 ) 
    } 	LineFilterMode;

typedef /* [helpcontext] */ 
enum MixedCaseMode
    {	mcmOff	= 0,
	mcmOn	= ( mcmOff + 1 ) ,
	mcmOnWithAcronyms	= ( mcmOn + 1 ) 
    } 	MixedCaseMode;

typedef /* [helpcontext] */ 
enum NumberMode
    {	nmOff	= 0,
	nmOn	= ( nmOff + 1 ) ,
	nmSynthesizer	= ( nmOn + 1 ) 
    } 	NumberMode;

typedef /* [helpcontext] */ 
enum AutoMode
    {	amOff	= 0,
	amAuto	= ( amOff + 1 ) ,
	amOn	= ( amAuto + 1 ) 
    } 	AutoMode;

typedef /* [helpcontext] */ 
enum PunctuationMode
    {	pmOff	= 0,
	pmDictionaryOnly	= ( pmOff + 1 ) ,
	pmOn	= ( pmDictionaryOnly + 1 ) 
    } 	PunctuationMode;

typedef /* [helpcontext] */ 
enum RepeatMode
    {	rmOff	= 0,
	rmSayRepeats	= ( rmOff + 1 ) ,
	rmIgnore	= ( rmSayRepeats + 1 ) 
    } 	RepeatMode;

typedef /* [helpcontext] */ 
enum MouseVoiceMode
    {	mvmOff	= 0,
	mvmOnPointerIdOff	= ( mvmOff + 1 ) ,
	mvmOnPointerIdDelayed	= ( mvmOnPointerIdOff + 1 ) ,
	mvmOnPointerIdDelayedDictionaryOnly	= ( mvmOnPointerIdDelayed + 1 ) ,
	mvmOnPointerIdImmediate	= ( mvmOnPointerIdDelayedDictionaryOnly + 1 ) ,
	mvmOnPointerIdImmediateDictionaryOnly	= ( mvmOnPointerIdImmediate + 1 ) 
    } 	MouseVoiceMode;

typedef /* [helpcontext] */ 
enum MouseInterruptabilityMode
    {	mimMove	= 0,
	mimClick	= ( mimMove + 1 ) ,
	mimMoveClick	= ( mimClick + 1 ) ,
	mimOff	= ( mimMoveClick + 1 ) 
    } 	MouseInterruptabilityMode;

typedef /* [helpcontext] */ 
enum MouseBoundaryMode
    {	mbmFullScreen	= 0,
	mbmActiveWindow	= ( mbmFullScreen + 1 ) ,
	mbmFocusedWindow	= ( mbmActiveWindow + 1 ) ,
	mbmUserWindow	= ( mbmFocusedWindow + 1 ) 
    } 	MouseBoundaryMode;

typedef /* [helpcontext] */ 
enum MouseUpDownMode
    {	mudmCharacter	= 0,
	mudmWord	= ( mudmCharacter + 1 ) ,
	mudmLine	= ( mudmWord + 1 ) ,
	mudBeginningOfLineToMouse	= ( mudmLine + 1 ) ,
	mudFromMouseToEndOfLine	= ( mudBeginningOfLineToMouse + 1 ) 
    } 	MouseUpDownMode;

typedef /* [helpcontext] */ 
enum HighlightTextMode
    {	htmAuto	= 0,
	htmHighlight	= ( htmAuto + 1 ) 
    } 	HighlightTextMode;

typedef /* [helpcontext] */ 
enum GraphicDictionaryMode
    {	gdmOff	= 0,
	gdmDictionaryOnly	= ( gdmOff + 1 ) ,
	gdmOn	= ( gdmDictionaryOnly + 1 ) ,
	gdmGraphicOnly	= ( gdmOn + 1 ) 
    } 	GraphicDictionaryMode;

typedef /* [helpcontext] */ 
enum ColorDictionaryMode
    {	cdmOff	= 0,
	cdmExact	= ( cdmOff + 1 ) ,
	cmdExactOrClosest	= ( cdmExact + 1 ) 
    } 	ColorDictionaryMode;

typedef /* [helpcontext] */ 
enum MenuMode
    {	mmBeginner	= 0,
	mmIntermediate	= ( mmBeginner + 1 ) ,
	mmAdvanced	= ( mmIntermediate + 1 ) 
    } 	MenuMode;

typedef /* [helpcontext] */ 
enum GlobalMode
    {	gmVoiceVerbosity	= 0,
	gmOff	= ( gmVoiceVerbosity + 1 ) ,
	gmVoice	= ( gmOff + 1 ) ,
	gmVerbosity	= ( gmVoice + 1 ) 
    } 	GlobalMode;

typedef /* [helpcontext] */ 
enum HyperactiveMode
    {	hmOff	= 0,
	hmMessagesOff	= ( hmOff + 1 ) ,
	hmMessagesOn	= ( hmMessagesOff + 1 ) 
    } 	HyperactiveMode;

typedef /* [helpcontext] */ 
enum AutoLoadMode
    {	almOff	= 0,
	almMessagesOff	= ( almOff + 1 ) ,
	almMessagesOn	= ( almMessagesOff + 1 ) 
    } 	AutoLoadMode;

typedef /* [helpcontext] */ 
enum BrailleAttributeMarking
    {	bamHighlight	= 0,
	bamBold	= 1,
	bamUnderline	= 2,
	bamItalic	= 3,
	bamStrikeout	= 4,
	bamAll	= 5,
	bamNone	= 6
    } 	BrailleAttributeMarking;

typedef /* [helpcontext] */ 
enum BrailleQuickMessageMode
    {	bqmDisabled	= 0,
	bqmOnWithNoTimeout	= ( bqmDisabled + 1 ) ,
	bqmOnWithTimeout	= ( bqmOnWithNoTimeout + 1 ) 
    } 	BrailleQuickMessageMode;

typedef /* [helpcontext] */ 
enum BrailleGraphicsVerbosity
    {	bgvNone	= 0,
	bgvBraille	= ( bgvNone + 1 ) ,
	bgvBrailleSpeech	= ( bgvBraille + 1 ) ,
	bgvGraphic	= ( bgvBrailleSpeech + 1 ) ,
	bgvBrailleGraphic	= ( bgvGraphic + 1 ) ,
	bgvBrailleSpeechGraphic	= ( bgvBrailleGraphic + 1 ) 
    } 	BrailleGraphicsVerbosity;

typedef /* [helpcontext] */ 
enum BrailleInformationOrder
    {	bioTypeNameData	= 0,
	bioTypeDataName	= ( bioTypeNameData + 1 ) ,
	bioNameDataType	= ( bioTypeDataName + 1 ) ,
	bioNameTypeData	= ( bioNameDataType + 1 ) ,
	bioDataTypeName	= ( bioNameTypeData + 1 ) ,
	bioDataNameType	= ( bioDataTypeName + 1 ) 
    } 	BrailleInformationOrder;

typedef /* [helpcontext] */ 
enum Language
    {	langEnglish	= 0,
	langPolish	= ( langEnglish + 1 ) ,
	langGerman	= ( langPolish + 1 ) ,
	langCroatian	= ( langGerman + 1 ) ,
	langFrench	= ( langCroatian + 1 ) ,
	langItalian	= ( langFrench + 1 ) ,
	langCzech	= ( langItalian + 1 ) ,
	langNorwegian	= ( langCzech + 1 ) ,
	langPortuguese	= ( langNorwegian + 1 ) ,
	langDutch	= ( langPortuguese + 1 ) ,
	langTurkish	= ( langDutch + 1 ) ,
	langKorean	= ( langTurkish + 1 ) ,
	langSwedish	= ( langKorean + 1 ) ,
	langSpanish	= ( langSwedish + 1 ) 
    } 	Language;

typedef /* [helpcontext] */ 
enum UserWindowStatus
    {	uwsNeutral	= 0,
	uwsSilent	= ( uwsNeutral + 1 ) ,
	uwsSpeak	= ( uwsSilent + 1 ) ,
	uwsFloat	= ( uwsSpeak + 1 ) 
    } 	UserWindowStatus;

typedef /* [helpcontext] */ 
enum HyperWindowCommand
    {	hwcUndefined	= 0,
	hwcSpeakWindow	= ( hwcUndefined + 1 ) ,
	hwcSpeakString	= ( hwcSpeakWindow + 1 ) ,
	hwcSpeakHighlight	= ( hwcSpeakString + 1 ) ,
	hwcActivateWindow	= ( hwcSpeakHighlight + 1 ) ,
	hwcLoadSet	= ( hwcActivateWindow + 1 ) ,
	hwcExecuteHotKey	= ( hwcLoadSet + 1 ) ,
	hwcBeep	= ( hwcExecuteHotKey + 1 ) ,
	hwcRouteMouseToWindow	= ( hwcBeep + 1 ) 
    } 	HyperWindowCommand;

typedef /* [helpcontext] */ 
enum HyperWindowTrigger
    {	hwtAnyChange	= 0,
	hwtContainsAttribute	= ( hwtAnyChange + 1 ) ,
	hwtDoesNotContainAttribute	= ( hwtContainsAttribute + 1 ) ,
	hwtContainsString	= ( hwtDoesNotContainAttribute + 1 ) ,
	hwtDoesNotContainString	= ( hwtContainsString + 1 ) ,
	hwtContainsCursor	= ( hwtDoesNotContainString + 1 ) ,
	hwtDoesNotContainCursor	= ( hwtContainsCursor + 1 ) ,
	hwtContainsFocus	= ( hwtDoesNotContainCursor + 1 ) ,
	hwtDoesNotContainFocus	= ( hwtContainsFocus + 1 ) 
    } 	HyperWindowTrigger;

typedef /* [helpcontext] */ 
enum FloatWindowPosition
    {	fwpConstant	= 0,
	fwpBeginningOfHighlight	= ( fwpConstant + 1 ) ,
	fwpEndOfHighlight	= ( fwpBeginningOfHighlight + 1 ) ,
	fwpCursorPlusConstant	= ( fwpEndOfHighlight + 1 ) ,
	fwpCursorMinusConstant	= ( fwpCursorPlusConstant + 1 ) ,
	fwpCursorPlusAttribute	= ( fwpCursorMinusConstant + 1 ) ,
	fwpCursorMinusAttriubte	= ( fwpCursorPlusAttribute + 1 ) ,
	fwpConstantPlusAttribute	= ( fwpCursorMinusAttriubte + 1 ) ,
	fwpConstantMinusAttriubte	= ( fwpConstantPlusAttribute + 1 ) ,
	fwpBeginningOfFocusWindow	= ( fwpConstantMinusAttriubte + 1 ) ,
	fwpEndOfFocusWindow	= ( fwpBeginningOfFocusWindow + 1 ) ,
	fwpBeginningOfFocusWindowPlusConstant	= ( fwpEndOfFocusWindow + 1 ) ,
	fwpBeginningOfFocusWindowMinusConstant	= ( fwpBeginningOfFocusWindowPlusConstant + 1 ) ,
	fwpEndOfFocusWindowPlusConstant	= ( fwpBeginningOfFocusWindowMinusConstant + 1 ) ,
	fwpEndOfFocusWindowMinusConstant	= ( fwpEndOfFocusWindowPlusConstant + 1 ) ,
	fwpBeginningOfStringPlusConstant	= ( fwpEndOfFocusWindowMinusConstant + 1 ) ,
	fwpBeginningOfStringMinusConstant	= ( fwpBeginningOfStringPlusConstant + 1 ) ,
	fwpEndOfStringPlusConstant	= ( fwpBeginningOfStringMinusConstant + 1 ) ,
	fwpEndOfStringMinusConstant	= ( fwpEndOfStringPlusConstant + 1 ) ,
	fwpBeginningOfHighlightPlusConstant	= ( fwpEndOfStringMinusConstant + 1 ) ,
	fwpBeginningOfHighlightMinusConstant	= ( fwpBeginningOfHighlightPlusConstant + 1 ) ,
	fwpEndOfHighlightPlusConstant	= ( fwpBeginningOfHighlightMinusConstant + 1 ) ,
	fwpEndOfHighlightMinusConstant	= ( fwpEndOfHighlightPlusConstant + 1 ) 
    } 	FloatWindowPosition;

typedef /* [helpcontext] */ 
enum KeyFilterState
    {	kfsEither	= 0,
	kfsDown	= ( kfsEither + 1 ) ,
	kfsUp	= ( kfsDown + 1 ) 
    } 	KeyFilterState;

typedef /* [helpcontext] */ 
enum KeyModifiers
    {	kmNone	= 0,
	kmShift	= 1,
	kmControl	= 2,
	kmAlt	= 4,
	kmWindows	= 8,
	kmApplication	= 16,
	kmInsert	= 32,
	kmNumlock	= 64,
	kmAltGR	= 128,
	kmNumpad	= 256
    } 	KeyModifiers;

typedef /* [helpcontext] */ 
enum VerbosityShortcut
    {	scNone	= 0,
	scBeforeOption	= ( scNone + 1 ) ,
	scAfterOption	= ( scBeforeOption + 1 ) 
    } 	VerbosityShortcut;

typedef /* [helpcontext] */ 
enum VerbosityListviewHeaders
    {	lvhNone	= 0,
	lvhAllButFirstColumn	= ( lvhNone + 1 ) ,
	lvhAll	= ( lvhAllButFirstColumn + 1 ) 
    } 	VerbosityListviewHeaders;

typedef /* [helpcontext] */ 
enum VerbosityMeasurementUnits
    {	muInches	= 0,
	muCentimeters	= ( muInches + 1 ) ,
	muMillimeters	= ( muCentimeters + 1 ) ,
	muPoints	= ( muMillimeters + 1 ) 
    } 	VerbosityMeasurementUnits;

typedef /* [helpcontext] */ 
enum ClipType
    {	ctUnknown	= 0,
	ctText	= 1,
	ctBitmap	= 2,
	ctFakeText	= 3
    } 	ClipType;

typedef /* [helpcontext] */ 
enum FontStyle
    {	fsPlain	= 0,
	fsItalic	= 1,
	fsStruckout	= 2,
	fsUnderlined	= 4,
	fsBold	= 8,
	fsNofont	= 128
    } 	FontStyle;

typedef /* [helpcontext] */ 
enum WordPageVerbosity
    {	wpgNone	= 0,
	wpgCurrent	= ( wpgNone + 1 ) ,
	wpgCurrentTotal	= ( wpgCurrent + 1 ) 
    } 	WordPageVerbosity;

typedef /* [helpcontext] */ 
enum PowerPointEffectsVerbosity
    {	pefNone	= 0,
	pefSummary	= ( pefNone + 1 ) ,
	pefSummaryDetails	= ( pefSummary + 1 ) 
    } 	PowerPointEffectsVerbosity;

typedef /* [helpcontext] */ 
enum ExcelPositionVerbosity
    {	epNever	= 0,
	epAlways	= ( epNever + 1 ) ,
	epIfNoHeader	= ( epAlways + 1 ) 
    } 	ExcelPositionVerbosity;

typedef /* [helpcontext] */ 
enum ExcelCountsVerbosity
    {	ecWorksheet	= 0,
	ecWorkbook	= ( ecWorksheet + 1 ) 
    } 	ExcelCountsVerbosity;

typedef /* [helpcontext] */ 
enum BrowseModeAcronymIndication
    {	baiNone	= 0,
	baiInclueType	= ( baiNone + 1 ) ,
	baiExpand	= ( baiInclueType + 1 ) ,
	baiReplace	= ( baiExpand + 1 ) 
    } 	BrowseModeAcronymIndication;

typedef /* [helpcontext] */ 
enum BrowseModeSuspendRefresh
    {	bsrNone	= 0,
	bsrAll	= ( bsrNone + 1 ) ,
	bsrFlash	= ( bsrAll + 1 ) 
    } 	BrowseModeSuspendRefresh;

typedef /* [helpcontext] */ 
enum BrowseModeTableHeaders
    {	bthOff	= 0,
	bthAttributeOnly	= ( bthOff + 1 ) ,
	bthColumn	= ( bthAttributeOnly + 1 ) ,
	bthRow	= ( bthColumn + 1 ) ,
	bthColumnOrRow	= ( bthRow + 1 ) ,
	bthColumnAndRow	= ( bthColumnOrRow + 1 ) ,
	bthRxCy	= ( bthColumnAndRow + 1 ) 
    } 	BrowseModeTableHeaders;

typedef /* [helpcontext] */ 
enum BrowseModeTableIndication
    {	btiNone	= 0,
	btiAll	= ( btiNone + 1 ) ,
	btiSmart	= ( btiAll + 1 ) 
    } 	BrowseModeTableIndication;

typedef /* [helpcontext] */ 
enum BrowseModeLinkIndication
    {	bliNone	= 0,
	bliBefore	= ( bliNone + 1 ) ,
	bliAfter	= ( bliBefore + 1 ) 
    } 	BrowseModeLinkIndication;

typedef /* [helpcontext] */ 
enum BrowseModeNewPageRead
    {	bnrFirst24	= 0,
	bnrEntire	= ( bnrFirst24 + 1 ) ,
	bnrNone	= ( bnrEntire + 1 ) 
    } 	BrowseModeNewPageRead;

typedef /* [helpcontext] */ 
enum TextAlignment
    {	taLeft	= 0,
	taCenter	= ( taLeft + 1 ) ,
	taRight	= ( taCenter + 1 ) 
    } 	TextAlignment;

typedef /* [helpcontext] */ 
enum VerticalAlignment
    {	vaTop	= 0,
	vaCenter	= ( vaTop + 1 ) ,
	vaBottom	= ( vaCenter + 1 ) 
    } 	VerticalAlignment;

typedef /* [helpcontext] */ 
enum CheckState
    {	csUnchecked	= 0,
	csChecked	= ( csUnchecked + 1 ) ,
	csPartiallyChecked	= ( csChecked + 1 ) 
    } 	CheckState;

typedef /* [helpcontext] */ 
enum ComboBoxType
    {	cbtDropDown	= 0,
	cbtDropDownList	= ( cbtDropDown + 1 ) ,
	cbtSimple	= ( cbtDropDownList + 1 ) 
    } 	ComboBoxType;

typedef /* [helpcontext] */ 
enum ListBoxType
    {	lbtSingleSelect	= 0,
	lbtMultipleSelect	= ( lbtSingleSelect + 1 ) ,
	lbtExtendedSelect	= ( lbtMultipleSelect + 1 ) ,
	lbtNoSelect	= ( lbtExtendedSelect + 1 ) 
    } 	ListBoxType;

typedef /* [helpcontext] */ 
enum TickPlacement
    {	tpNone	= 0,
	tpEnds	= ( tpNone + 1 ) ,
	tpAuto	= ( tpEnds + 1 ) 
    } 	TickPlacement;

typedef /* [helpcontext] */ 
enum TickLocation
    {	tlLeft	= 0,
	tlTop	= ( tlLeft + 1 ) ,
	tlRight	= ( tlTop + 1 ) ,
	tlBottom	= ( tlRight + 1 ) ,
	tlBoth	= ( tlBottom + 1 ) 
    } 	TickLocation;

typedef /* [helpcontext] */ 
enum VirtualKeyCode
    {	vk_LBUTTON	= 0x1,
	vk_RBUTTON	= 0x2,
	vk_CANCEL	= 0x3,
	vk_MBUTTON	= 0x4,
	vk_XBUTTON1	= 0x5,
	vk_XBUTTON2	= 0x6,
	vk_BACK	= 0x8,
	vk_BACKSPACE	= 0x8,
	vk_TAB	= 0x9,
	vk_CLEAR	= 0xc,
	vk_RETURN	= 0xd,
	vk_ENTER	= 0xd,
	vk_SHIFT	= 0x10,
	vk_CONTROL	= 0x11,
	vk_MENU	= 0x12,
	vk_ALT	= 0x12,
	vk_PAUSE	= 0x13,
	vk_CAPITAL	= 0x14,
	vk_KANA	= 0x15,
	vk_HANGEUL	= 0x15,
	vk_HANGUL	= 0x15,
	vk_JUNJA	= 0x17,
	vk_FINAL	= 0x18,
	vk_HANJA	= 0x19,
	vk_KANJI	= 0x19,
	vk_ESCAPE	= 0x1b,
	vk_CONVERT	= 0x1c,
	vk_NONCONVERT	= 0x1d,
	vk_ACCEPT	= 0x1e,
	vk_MODECHANGE	= 0x1f,
	vk_SPACE	= 0x20,
	vk_PRIOR	= 0x21,
	vk_PAGEUP	= 0x21,
	vk_NEXT	= 0x22,
	vk_PAGEDOWN	= 0x22,
	vk_END	= 0x23,
	vk_HOME	= 0x24,
	vk_LEFT	= 0x25,
	vk_UP	= 0x26,
	vk_RIGHT	= 0x27,
	vk_DOWN	= 0x28,
	vk_SELECT	= 0x29,
	vk_PRINT	= 0x2a,
	vk_EXECUTE	= 0x2b,
	vk_SNAPSHOT	= 0x2c,
	vk_INSERT	= 0x2d,
	vk_DELETE	= 0x2e,
	vk_HELP	= 0x2f,
	vk_0	= 0x30,
	vk_1	= 0x31,
	vk_2	= 0x32,
	vk_3	= 0x33,
	vk_4	= 0x34,
	vk_5	= 0x35,
	vk_6	= 0x36,
	vk_7	= 0x37,
	vk_8	= 0x38,
	vk_9	= 0x39,
	vk_A	= 0x41,
	vk_B	= 0x42,
	vk_C	= 0x43,
	vk_D	= 0x44,
	vk_E	= 0x45,
	vk_F	= 0x46,
	vk_G	= 0x47,
	vk_H	= 0x48,
	vk_I	= 0x49,
	vk_J	= 0x4a,
	vk_K	= 0x4b,
	vk_L	= 0x4c,
	vk_M	= 0x4d,
	vk_N	= 0x4e,
	vk_O	= 0x4f,
	vk_P	= 0x50,
	vk_Q	= 0x51,
	vk_R	= 0x52,
	vk_S	= 0x53,
	vk_T	= 0x54,
	vk_U	= 0x55,
	vk_V	= 0x56,
	vk_W	= 0x57,
	vk_X	= 0x58,
	vk_Y	= 0x59,
	vk_Z	= 0x5a,
	vk_LWIN	= 0x5b,
	vk_RWIN	= 0x5c,
	vk_APPS	= 0x5d,
	vk_SLEEP	= 0x5f,
	vk_NUMPAD0	= 0x60,
	vk_NUMPAD1	= 0x61,
	vk_NUMPAD2	= 0x62,
	vk_NUMPAD3	= 0x63,
	vk_NUMPAD4	= 0x64,
	vk_NUMPAD5	= 0x65,
	vk_NUMPAD6	= 0x66,
	vk_NUMPAD7	= 0x67,
	vk_NUMPAD8	= 0x68,
	vk_NUMPAD9	= 0x69,
	vk_MULTIPLY	= 0x6a,
	vk_ADD	= 0x6b,
	vk_SEPARATOR	= 0x6c,
	vk_SUBTRACT	= 0x6d,
	vk_DECIMAL	= 0x6e,
	vk_DIVIDE	= 0x6f,
	vk_F1	= 0x70,
	vk_F2	= 0x71,
	vk_F3	= 0x72,
	vk_F4	= 0x73,
	vk_F5	= 0x74,
	vk_F6	= 0x75,
	vk_F7	= 0x76,
	vk_F8	= 0x77,
	vk_F9	= 0x78,
	vk_F10	= 0x79,
	vk_F11	= 0x7a,
	vk_F12	= 0x7b,
	vk_F13	= 0x7c,
	vk_F14	= 0x7d,
	vk_F15	= 0x7e,
	vk_F16	= 0x7f,
	vk_F17	= 0x80,
	vk_F18	= 0x81,
	vk_F19	= 0x82,
	vk_F20	= 0x83,
	vk_F21	= 0x84,
	vk_F22	= 0x85,
	vk_F23	= 0x86,
	vk_F24	= 0x87,
	vk_NUMLOCK	= 0x90,
	vk_SCROLL	= 0x91,
	vk_OEM_NEC_EQUAL	= 0x92,
	vk_OEM_FJ_JISHO	= 0x92,
	vk_OEM_FJ_MASSHOU	= 0x93,
	vk_OEM_FJ_TOUROKU	= 0x94,
	vk_OEM_FJ_LOYA	= 0x95,
	vk_OEM_FJ_ROYA	= 0x96,
	vk_LSHIFT	= 0xa0,
	vk_RSHIFT	= 0xa1,
	vk_LCONTROL	= 0xa2,
	vk_RCONTROL	= 0xa3,
	vk_LMENU	= 0xa4,
	vk_RMENU	= 0xa5,
	vk_LALT	= 0xa4,
	vk_RALT	= 0xa5,
	vk_BROWSER_BACK	= 0xa6,
	vk_BROWSER_FORWARD	= 0xa7,
	vk_BROWSER_REFRESH	= 0xa8,
	vk_BROWSER_STOP	= 0xa9,
	vk_BROWSER_SEARCH	= 0xaa,
	vk_BROWSER_FAVORITES	= 0xab,
	vk_BROWSER_HOME	= 0xac,
	vk_VOLUME_MUTE	= 0xad,
	vk_VOLUME_DOWN	= 0xae,
	vk_VOLUME_UP	= 0xaf,
	vk_MEDIA_NEXT_TRACK	= 0xb0,
	vk_MEDIA_PREV_TRACK	= 0xb1,
	vk_MEDIA_STOP	= 0xb2,
	vk_MEDIA_PLAY_PAUSE	= 0xb3,
	vk_LAUNCH_MAIL	= 0xb4,
	vk_LAUNCH_MEDIA_SELECT	= 0xb5,
	vk_LAUNCH_APP1	= 0xb6,
	vk_LAUNCH_APP2	= 0xb7,
	vk_OEM_1	= 0xba,
	vk_SEMICOLON	= 0xba,
	vk_OEM_PLUS	= 0xbb,
	vk_PLUS	= 0xbb,
	vk_OEM_COMMA	= 0xbc,
	vk_COMMA	= 0xbc,
	vk_OEM_MINUS	= 0xbd,
	vk_MINUS	= 0xbd,
	vk_OEM_PERIOD	= 0xbe,
	vk_PERIOD	= 0xbe,
	vk_OEM_2	= 0xbf,
	vk_SLASH	= 0xbf,
	vk_OEM_3	= 0xc0,
	vk_BACKQUOTE	= 0xc0,
	vk_GRAVEACCENT	= 0xc0,
	vk_OEM_4	= 0xdb,
	vk_LEFTBRACKET	= 0xdb,
	vk_OEM_5	= 0xdc,
	vk_BACKSLASH	= 0xdc,
	vk_OEM_6	= 0xdd,
	vk_RIGHTBRACKET	= 0xdd,
	vk_OEM_7	= 0xde,
	vk_QUOTE	= 0xde,
	vk_OEM_8	= 0xdf,
	vk_OEM_AX	= 0xe1,
	vk_OEM_102	= 0xe2,
	vk_ICO_HELP	= 0xe3,
	vk_ICO_00	= 0xe4,
	vk_PROCESSKEY	= 0xe5,
	vk_ICO_CLEAR	= 0xe6,
	vk_PACKET	= 0xe7,
	vk_OEM_RESET	= 0xe9,
	vk_OEM_JUMP	= 0xea,
	vk_OEM_PA1	= 0xeb,
	vk_OEM_PA2	= 0xec,
	vk_OEM_PA3	= 0xed,
	vk_OEM_WSCTRL	= 0xee,
	vk_OEM_CUSEL	= 0xef,
	vk_OEM_ATTN	= 0xf0,
	vk_OEM_FINISH	= 0xf1,
	vk_OEM_COPY	= 0xf2,
	vk_OEM_AUTO	= 0xf3,
	vk_OEM_ENLW	= 0xf4,
	vk_OEM_BACKTAB	= 0xf5,
	vk_ATTN	= 0xf6,
	vk_CRSEL	= 0xf7,
	vk_EXSEL	= 0xf8,
	vk_EREOF	= 0xf9,
	vk_PLAY	= 0xfa,
	vk_ZOOM	= 0xfb,
	vk_NONAME	= 0xfc,
	vk_PA1	= 0xfd,
	vk_OEM_CLEAR	= 0xfe
    } 	VirtualKeyCode;

typedef /* [helpcontext] */ 
enum WindowType
    {	wtNotWindow	= 0,
	wtOriginalClass	= 0,
	wtOther	= 1,
	wtDialog	= 2,
	wtPropertySheet	= 3,
	wtMenu	= 4,
	wtMDIChild	= 5,
	wtMDIClient	= 6,
	wtMDIFrame	= 7,
	wtButton	= 8,
	wtCheckBox	= 9,
	wtComboBox	= 10,
	wtCustomControl	= 11,
	wtEdit	= 12,
	wtGroupBox	= 13,
	wtIconText	= 14,
	wtListBox	= 15,
	wtRadioButton	= 16,
	wtScrollBar	= 17,
	wtStatic	= 18,
	wtTab	= 19,
	wtTrackBar	= 20,
	wtListView	= 21,
	wtTreeView	= 22,
	wtHotkey	= 23,
	wtRichEdit	= 24,
	wtAnimate	= 25,
	wtProgress	= 26,
	wtStatus	= 27,
	wtUpDown	= 28,
	wtVoid	= 29,
	wtToolTip	= 31
    } 	WindowType;

typedef /* [helpcontext] */ 
enum WindowStatus
    {	wsMinimized	= 0,
	wsMaximized	= ( wsMinimized + 1 ) ,
	wsNormal	= ( wsMaximized + 1 ) ,
	wsRestored	= ( wsNormal + 1 ) 
    } 	WindowStatus;

typedef /* [helpcontext] */ 
enum HotkeyID
    {	hkNone	= 0,
	hkPriorCharacter	= ( hkNone + 1 ) ,
	hkCharacter	= ( hkPriorCharacter + 1 ) ,
	hkNextCharacter	= ( hkCharacter + 1 ) ,
	hkPriorWord	= ( hkNextCharacter + 1 ) ,
	hkWord	= ( hkPriorWord + 1 ) ,
	hkNextWord	= ( hkWord + 1 ) ,
	hkPriorLine	= ( hkNextWord + 1 ) ,
	hkLine	= ( hkPriorLine + 1 ) ,
	hkNextLine	= ( hkLine + 1 ) ,
	hkPriorSentence	= ( hkNextLine + 1 ) ,
	hkSentence	= ( hkPriorSentence + 1 ) ,
	hkNextSentence	= ( hkSentence + 1 ) ,
	hkPriorParagraph	= ( hkNextSentence + 1 ) ,
	hkParagraph	= ( hkPriorParagraph + 1 ) ,
	hkNextParagrah	= ( hkParagraph + 1 ) ,
	hkTopToCursor	= ( hkNextParagrah + 1 ) ,
	hkCursorToBottom	= ( hkTopToCursor + 1 ) ,
	hkLeftToCursor	= ( hkCursorToBottom + 1 ) ,
	hkCursorToRight	= ( hkLeftToCursor + 1 ) ,
	hkUserWindow0	= ( hkCursorToRight + 1 ) ,
	hkUserWindow1	= ( hkUserWindow0 + 1 ) ,
	hkUserWindow2	= ( hkUserWindow1 + 1 ) ,
	hkUserWindow3	= ( hkUserWindow2 + 1 ) ,
	hkUserWindow4	= ( hkUserWindow3 + 1 ) ,
	hkUserWindow5	= ( hkUserWindow4 + 1 ) ,
	hkUserWindow6	= ( hkUserWindow5 + 1 ) ,
	hkUserWindow7	= ( hkUserWindow6 + 1 ) ,
	hkUserWindow8	= ( hkUserWindow7 + 1 ) ,
	hkUserWindow9	= ( hkUserWindow8 + 1 ) ,
	hkUserWindow10	= ( hkUserWindow9 + 1 ) ,
	hkUserWindow11	= ( hkUserWindow10 + 1 ) ,
	hkUserWindow12	= ( hkUserWindow11 + 1 ) ,
	hkUserWindow13	= ( hkUserWindow12 + 1 ) ,
	hkUserWindow14	= ( hkUserWindow13 + 1 ) ,
	hkUserWindow15	= ( hkUserWindow14 + 1 ) ,
	hkUserWindow16	= ( hkUserWindow15 + 1 ) ,
	hkUserWindow17	= ( hkUserWindow16 + 1 ) ,
	hkUserWindow18	= ( hkUserWindow17 + 1 ) ,
	hkUserWindow19	= ( hkUserWindow18 + 1 ) ,
	hkAnyWindow	= ( hkUserWindow19 + 1 ) ,
	hkActiveUserWindow	= ( hkAnyWindow + 1 ) ,
	hkReadToEnd	= ( hkActiveUserWindow + 1 ) ,
	hkUnicodeAndAttributes	= ( hkReadToEnd + 1 ) ,
	hkFieldData	= ( hkUnicodeAndAttributes + 1 ) ,
	hkFieldName	= ( hkFieldData + 1 ) ,
	hkLabelFieldName	= ( hkFieldName + 1 ) ,
	hkSpeakSummary	= ( hkLabelFieldName + 1 ) ,
	hkDefaultButton	= ( hkSpeakSummary + 1 ) ,
	hkAnyLine	= ( hkDefaultButton + 1 ) ,
	hkHighlight	= ( hkAnyLine + 1 ) ,
	hkSetHighlightColor	= ( hkHighlight + 1 ) ,
	hkHighlightRotor	= ( hkSetHighlightColor + 1 ) ,
	hkTimeAndDate	= ( hkHighlightRotor + 1 ) ,
	hkPosition	= ( hkTimeAndDate + 1 ) ,
	hkSilence	= ( hkPosition + 1 ) ,
	hkVerbosity	= ( hkSilence + 1 ) ,
	hkMenu	= ( hkVerbosity + 1 ) ,
	hkBypass	= ( hkMenu + 1 ) ,
	hkAttributeChangeToggle	= ( hkBypass + 1 ) ,
	hkMouseBoundaryRotor	= ( hkAttributeChangeToggle + 1 ) ,
	hkSingleClickLeftButton	= ( hkMouseBoundaryRotor + 1 ) ,
	hkSingleClickMiddleButton	= ( hkSingleClickLeftButton + 1 ) ,
	hkSingleClickRightButton	= ( hkSingleClickMiddleButton + 1 ) ,
	hkDoubleClickLeftButton	= ( hkSingleClickRightButton + 1 ) ,
	hkDoubleClickMiddleButton	= ( hkDoubleClickLeftButton + 1 ) ,
	hkDoubleClickRightButton	= ( hkDoubleClickMiddleButton + 1 ) ,
	hkToggleLeftButton	= ( hkDoubleClickRightButton + 1 ) ,
	hkToggleMiddleButton	= ( hkToggleLeftButton + 1 ) ,
	hkToggleRightButton	= ( hkToggleMiddleButton + 1 ) ,
	hkDragAndDrop	= ( hkToggleRightButton + 1 ) ,
	hkMouseHorizontalLock	= ( hkDragAndDrop + 1 ) ,
	hkMouseVerticalLock	= ( hkMouseHorizontalLock + 1 ) ,
	hkWEMouseToggle	= ( hkMouseVerticalLock + 1 ) ,
	hkMouseUp	= ( hkWEMouseToggle + 1 ) ,
	hkMouseDown	= ( hkMouseUp + 1 ) ,
	hkMouseLeft	= ( hkMouseDown + 1 ) ,
	hkMouseRight	= ( hkMouseLeft + 1 ) ,
	hkMouseTopLeft	= ( hkMouseRight + 1 ) ,
	hkMouseTopRight	= ( hkMouseTopLeft + 1 ) ,
	hkMouseBottomLeft	= ( hkMouseTopRight + 1 ) ,
	hkMouseBottomRight	= ( hkMouseBottomLeft + 1 ) ,
	hkMousePriorCharacter	= ( hkMouseBottomRight + 1 ) ,
	hkMouseCharacter	= ( hkMousePriorCharacter + 1 ) ,
	hkMouseNextCharacter	= ( hkMouseCharacter + 1 ) ,
	hkMousePriorWord	= ( hkMouseNextCharacter + 1 ) ,
	hkMouseWord	= ( hkMousePriorWord + 1 ) ,
	hkMouseNextWord	= ( hkMouseWord + 1 ) ,
	hkMousePriorLine	= ( hkMouseNextWord + 1 ) ,
	hkMouseLine	= ( hkMousePriorLine + 1 ) ,
	hkMouseNextLine	= ( hkMouseLine + 1 ) ,
	hkMousePriorSentence	= ( hkMouseNextLine + 1 ) ,
	hkMouseSentence	= ( hkMousePriorSentence + 1 ) ,
	hkMouseNextSentence	= ( hkMouseSentence + 1 ) ,
	hkMousePriorParagraph	= ( hkMouseNextSentence + 1 ) ,
	hkMouseParagraph	= ( hkMousePriorParagraph + 1 ) ,
	hkMouseNextParagraph	= ( hkMouseParagraph + 1 ) ,
	hkMousePriorIcon	= ( hkMouseNextParagraph + 1 ) ,
	hkMouseIcon	= ( hkMousePriorIcon + 1 ) ,
	hkMouseNextIcon	= ( hkMouseIcon + 1 ) ,
	hkMousePriorClip	= ( hkMouseNextIcon + 1 ) ,
	hkMouseClip	= ( hkMousePriorClip + 1 ) ,
	hkMouseNextClip	= ( hkMouseClip + 1 ) ,
	hkTopToMouse	= ( hkMouseNextClip + 1 ) ,
	hkMouseToBottom	= ( hkTopToMouse + 1 ) ,
	hkLeftToMouse	= ( hkMouseToBottom + 1 ) ,
	hkMouseToRight	= ( hkLeftToMouse + 1 ) ,
	hkMouseBeginningOfLine	= ( hkMouseToRight + 1 ) ,
	hkMouseEndOfLine	= ( hkMouseBeginningOfLine + 1 ) ,
	hkMouseUpDownSpeak	= ( hkMouseEndOfLine + 1 ) ,
	hkMouseToFocus	= ( hkMouseUpDownSpeak + 1 ) ,
	hkCursorToMouse	= ( hkMouseToFocus + 1 ) ,
	hkSyncWeAndMouse	= ( hkCursorToMouse + 1 ) ,
	hkRouteToSpecifiedHighlight	= ( hkSyncWeAndMouse + 1 ) ,
	hkRouteMouseToWindow	= ( hkRouteToSpecifiedHighlight + 1 ) ,
	hkMousePosition	= ( hkRouteMouseToWindow + 1 ) ,
	hkMouseUnicodeAndAttributes	= ( hkMousePosition + 1 ) ,
	hkMouseSearch	= ( hkMouseUnicodeAndAttributes + 1 ) ,
	hkMouseContinueSearch	= ( hkMouseSearch + 1 ) ,
	hkMousePriorAttribute	= ( hkMouseContinueSearch + 1 ) ,
	hkMouseNextAttribute	= ( hkMousePriorAttribute + 1 ) ,
	hkMousePriorControl	= ( hkMouseNextAttribute + 1 ) ,
	hkMouseNextControl	= ( hkMousePriorControl + 1 ) ,
	hkDescribePointer	= ( hkMouseNextControl + 1 ) ,
	hkCapturePointer	= ( hkDescribePointer + 1 ) ,
	hkEditDictionaries	= ( hkCapturePointer + 1 ) ,
	hkSpeakAllToggle	= ( hkEditDictionaries + 1 ) ,
	hkToggleAllVoicesApp	= ( hkSpeakAllToggle + 1 ) ,
	hkToggleAllVoices	= ( hkToggleAllVoicesApp + 1 ) ,
	hkEntireScreen	= ( hkToggleAllVoices + 1 ) ,
	hkReadActiveWindow	= ( hkEntireScreen + 1 ) ,
	hkTitleApp	= ( hkReadActiveWindow + 1 ) ,
	hkFocusTitle	= ( hkTitleApp + 1 ) ,
	hkStatusLine	= ( hkFocusTitle + 1 ) ,
	hkLastFlashAndTooltip	= ( hkStatusLine + 1 ) ,
	hkProgressOrScrollbar	= ( hkLastFlashAndTooltip + 1 ) ,
	hkReadMenuBar	= ( hkProgressOrScrollbar + 1 ) ,
	hkHighlightedBlock	= ( hkReadMenuBar + 1 ) ,
	hkKeyDescriber	= ( hkHighlightedBlock + 1 ) ,
	hkContextSensitiveHelp	= ( hkKeyDescriber + 1 ) ,
	hkVoiceDown	= ( hkContextSensitiveHelp + 1 ) ,
	hkVoiceUp	= ( hkVoiceDown + 1 ) ,
	hkVoiceSelectionRotor	= ( hkVoiceUp + 1 ) ,
	hkVoiceParameterRotor	= ( hkVoiceSelectionRotor + 1 ) ,
	hkNumbersRotor	= ( hkVoiceParameterRotor + 1 ) ,
	hkSignalCursorPositionToggle	= ( hkNumbersRotor + 1 ) ,
	hkWordMode	= ( hkSignalCursorPositionToggle + 1 ) ,
	hkLineFilterStatusRotor	= ( hkWordMode + 1 ) ,
	hkCapitalizationAlertRotor	= ( hkLineFilterStatusRotor + 1 ) ,
	hkFormatAlertToggle	= ( hkCapitalizationAlertRotor + 1 ) ,
	hkSetFormatAlertOffset	= ( hkFormatAlertToggle + 1 ) ,
	hkSelectUserWindow	= ( hkSetFormatAlertOffset + 1 ) ,
	hkUserWindowCoordinates	= ( hkSelectUserWindow + 1 ) ,
	hkUserWindowTopLeft	= ( hkUserWindowCoordinates + 1 ) ,
	hkUserWindowBottomRight	= ( hkUserWindowTopLeft + 1 ) ,
	hkUserWindowDefinition	= ( hkUserWindowBottomRight + 1 ) ,
	hkUserWindowStatus	= ( hkUserWindowDefinition + 1 ) ,
	hkReadUserWindowCoordinates	= ( hkUserWindowStatus + 1 ) ,
	hkSetUserWindowColor	= ( hkReadUserWindowCoordinates + 1 ) ,
	hkSelectHyperactiveWindow	= ( hkSetUserWindowColor + 1 ) ,
	hkHyperactiveWindowCoordinates	= ( hkSelectHyperactiveWindow + 1 ) ,
	hkHyperactiveWindowTopLeft	= ( hkHyperactiveWindowCoordinates + 1 ) ,
	hkHyperactiveWindowBottomRight	= ( hkHyperactiveWindowTopLeft + 1 ) ,
	hkHyperactiveWindowDefinition	= ( hkHyperactiveWindowBottomRight + 1 ) ,
	hkReadHyperactiveWindowCoordinates	= ( hkHyperactiveWindowDefinition + 1 ) ,
	hkHyperactiveWindowsRotor	= ( hkReadHyperactiveWindowCoordinates + 1 ) ,
	hkAutodetectCursor	= ( hkHyperactiveWindowsRotor + 1 ) ,
	hkAutoLabelGraphics	= ( hkAutodetectCursor + 1 ) ,
	hkBrowseMode	= ( hkAutoLabelGraphics + 1 ) ,
	hkSwitchLanguage	= ( hkBrowseMode + 1 ) ,
	hkSystemTray	= ( hkSwitchLanguage + 1 ) ,
	hkReclass	= ( hkSystemTray + 1 ) ,
	hkRedraw	= ( hkReclass + 1 ) ,
	hkLoadSet	= ( hkRedraw + 1 ) ,
	hkSaveSet	= ( hkLoadSet + 1 ) ,
	hkReloadScript	= ( hkSaveSet + 1 ) ,
	hkDumpOSM	= ( hkReloadScript + 1 ) ,
	hkLinkNext	= ( hkDumpOSM + 1 ) ,
	hkLinkPrior	= ( hkLinkNext + 1 ) ,
	hkControlNext	= ( hkLinkPrior + 1 ) ,
	hkControlPrior	= ( hkControlNext + 1 ) ,
	hkSpecifiedControlNext	= ( hkControlPrior + 1 ) ,
	hkSpecifiedControlPrior	= ( hkSpecifiedControlNext + 1 ) ,
	hkTextNext	= ( hkSpecifiedControlPrior + 1 ) ,
	hkTextPrior	= ( hkTextNext + 1 ) ,
	hkGraphicNext	= ( hkTextPrior + 1 ) ,
	hkGraphicPrior	= ( hkGraphicNext + 1 ) ,
	hkFrameNext	= ( hkGraphicPrior + 1 ) ,
	hkFramePrior	= ( hkFrameNext + 1 ) ,
	hkDifferentLineNext	= ( hkFramePrior + 1 ) ,
	hkDifferentLinePrior	= ( hkDifferentLineNext + 1 ) ,
	hkVisitedLinkNext	= ( hkDifferentLinePrior + 1 ) ,
	hkVisitedLinkPrior	= ( hkVisitedLinkNext + 1 ) ,
	hkAnchorNext	= ( hkVisitedLinkPrior + 1 ) ,
	hkAnchorPrior	= ( hkAnchorNext + 1 ) ,
	hkFieldsetNext	= ( hkAnchorPrior + 1 ) ,
	hkFieldSetPrior	= ( hkFieldsetNext + 1 ) ,
	hkFormNext	= ( hkFieldSetPrior + 1 ) ,
	hkFormPrior	= ( hkFormNext + 1 ) ,
	hkHeadingNext	= ( hkFormPrior + 1 ) ,
	hkHeadingPrior	= ( hkHeadingNext + 1 ) ,
	hkParagraphNext	= ( hkHeadingPrior + 1 ) ,
	hkParagraphPrior	= ( hkParagraphNext + 1 ) ,
	hkBlockQuoteNext	= ( hkParagraphPrior + 1 ) ,
	hkBlockQuotePrior	= ( hkBlockQuoteNext + 1 ) ,
	hkListNext	= ( hkBlockQuotePrior + 1 ) ,
	hkListPrior	= ( hkListNext + 1 ) ,
	hkListItemNext	= ( hkListPrior + 1 ) ,
	hkListItemPrior	= ( hkListItemNext + 1 ) ,
	hkTableNext	= ( hkListItemPrior + 1 ) ,
	hkTablePrior	= ( hkTableNext + 1 ) ,
	hkEnterTableMode	= ( hkTablePrior + 1 ) ,
	hkExitTableMode	= ( hkEnterTableMode + 1 ) ,
	hkExitAllTableModes	= ( hkExitTableMode + 1 ) ,
	hkBrowseModeCellRight	= ( hkExitAllTableModes + 1 ) ,
	hkBrowseModeCellLeft	= ( hkBrowseModeCellRight + 1 ) ,
	hkBrowseModeCellUp	= ( hkBrowseModeCellLeft + 1 ) ,
	hkBrowseModeCellDown	= ( hkBrowseModeCellUp + 1 ) ,
	hkEndOfRow	= ( hkBrowseModeCellDown + 1 ) ,
	hkBeginningOfRow	= ( hkEndOfRow + 1 ) ,
	hkTopOfColumn	= ( hkBeginningOfRow + 1 ) ,
	hkBottomOfColumn	= ( hkTopOfColumn + 1 ) ,
	hkHeaderRotor	= ( hkBottomOfColumn + 1 ) ,
	hkBrowseModeElementProperties	= ( hkHeaderRotor + 1 ) ,
	hkPlacemarkerDialog	= ( hkBrowseModeElementProperties + 1 ) ,
	hkPlacemarkerNext	= ( hkPlacemarkerDialog + 1 ) ,
	hkPlacemarkerPrior	= ( hkPlacemarkerNext + 1 ) ,
	hkPlacemarkerHotkey	= ( hkPlacemarkerPrior + 1 ) ,
	hkBrowseModePageNavigation	= ( hkPlacemarkerHotkey + 1 ) ,
	hkPreviousPosition	= ( hkBrowseModePageNavigation + 1 ) ,
	hkAutoLoad	= ( hkPreviousPosition + 1 ) ,
	hkRefreshRotor	= ( hkAutoLoad + 1 ) ,
	hkLineNext	= ( hkRefreshRotor + 1 ) ,
	hkLinePrior	= ( hkLineNext + 1 ) ,
	hkSpellingOrGrammarNext	= ( hkLinePrior + 1 ) ,
	hkSpellingOrGrammarPrior	= ( hkSpellingOrGrammarNext + 1 ) ,
	hkRevisionNext	= ( hkSpellingOrGrammarPrior + 1 ) ,
	hkRevisionPrior	= ( hkRevisionNext + 1 ) ,
	hkTableCellRight	= ( hkRevisionPrior + 1 ) ,
	hkTableCellLeft	= ( hkTableCellRight + 1 ) ,
	hkTableCellUp	= ( hkTableCellLeft + 1 ) ,
	hkTableCellDown	= ( hkTableCellUp + 1 ) ,
	hkToFirstCellOfColumn	= ( hkTableCellDown + 1 ) ,
	hkToLastCellOfColumn	= ( hkToFirstCellOfColumn + 1 ) ,
	hkToFirstCellOfRow	= ( hkToLastCellOfColumn + 1 ) ,
	hkToLastCellOfRow	= ( hkToFirstCellOfRow + 1 ) ,
	hkToTopLeftCell	= ( hkToLastCellOfRow + 1 ) ,
	hkToBottomRightCell	= ( hkToTopLeftCell + 1 ) ,
	hkRow	= ( hkToBottomRightCell + 1 ) ,
	hkFromRowStart	= ( hkRow + 1 ) ,
	hkRowToEnd	= ( hkFromRowStart + 1 ) ,
	hkFirstRowCell	= ( hkRowToEnd + 1 ) ,
	hkColumn	= ( hkFirstRowCell + 1 ) ,
	hkFromColumnStart	= ( hkColumn + 1 ) ,
	hkColumnToEnd	= ( hkFromColumnStart + 1 ) ,
	hkFirstColumnCell	= ( hkColumnToEnd + 1 ) ,
	hkCurrentCell	= ( hkFirstColumnCell + 1 ) ,
	hkElementProperties	= ( hkCurrentCell + 1 ) ,
	hkPageNavigation	= ( hkElementProperties + 1 ) ,
	hkHeaderAndTotals	= ( hkPageNavigation + 1 ) ,
	hkMonitorCells	= ( hkHeaderAndTotals + 1 ) ,
	hkMonitorCell1	= ( hkMonitorCells + 1 ) ,
	hkMonitorCell2	= ( hkMonitorCell1 + 1 ) ,
	hkMonitorCell3	= ( hkMonitorCell2 + 1 ) ,
	hkMonitorCell4	= ( hkMonitorCell3 + 1 ) ,
	hkMonitorCell5	= ( hkMonitorCell4 + 1 ) ,
	hkMonitorCell6	= ( hkMonitorCell5 + 1 ) ,
	hkMonitorCell7	= ( hkMonitorCell6 + 1 ) ,
	hkMonitorCell8	= ( hkMonitorCell7 + 1 ) ,
	hkMonitorCell9	= ( hkMonitorCell8 + 1 ) ,
	hkMonitorCell10	= ( hkMonitorCell9 + 1 ) ,
	hkAnyMonitorCell	= ( hkMonitorCell10 + 1 ) ,
	hkReadTotalCell	= ( hkAnyMonitorCell + 1 ) ,
	hkReadComment	= ( hkReadTotalCell + 1 ) ,
	hkReadFormula	= ( hkReadComment + 1 ) ,
	hkPreviousCell	= ( hkReadFormula + 1 ) ,
	hkOutlookCalendar	= ( hkPreviousCell + 1 ) ,
	hkShutdownWindowEyes	= ( hkOutlookCalendar + 1 ) ,
	hkBatteryLevel	= ( hkShutdownWindowEyes + 1 ) ,
	hkWordEnhanced	= 0x80000001,
	hkOfficeAttributeStatus	= 0x80000002,
	hkOfficeSmartTab	= 0x80000003,
	hkScriptStatusRotor	= ( hkBatteryLevel + 1 ) 
    } 	HotkeyID;

typedef /* [helpcontext] */ 
enum BrailleHotkeyID
    {	bhkNone	= -1,
	bhkPriorBrailleLine	= 1001,
	bhkNextBrailleLine	= ( bhkPriorBrailleLine + 1 ) ,
	bhkScrollBrailleLeft	= ( bhkNextBrailleLine + 1 ) ,
	bhkScrollBrailleRight	= ( bhkScrollBrailleLeft + 1 ) ,
	bhkBrailleTrackingToggle	= ( bhkScrollBrailleRight + 1 ) ,
	bhkBrailleGraphicMode	= ( bhkBrailleTrackingToggle + 1 ) ,
	bhk6Or8DotToggle	= ( bhkBrailleGraphicMode + 2 ) ,
	bhkScrollModeToggle	= ( bhk6Or8DotToggle + 1 ) ,
	bhkAttributesToShowRotor	= ( bhkScrollModeToggle + 1 ) ,
	bhkShowAttributesToggle	= ( bhkAttributesToShowRotor + 1 ) ,
	bhkTopLine	= ( bhkShowAttributesToggle + 1 ) ,
	bhkBottomLine	= ( bhkTopLine + 1 ) ,
	bhkToFocus	= ( bhkBottomLine + 1 ) ,
	bhkToMenuBar	= ( bhkToFocus + 1 ) ,
	bhkToTitleBar	= ( bhkToMenuBar + 1 ) ,
	bhkToStatusLine	= ( bhkToTitleBar + 1 ) ,
	bhkQuickMessageRotor	= ( bhkToStatusLine + 1 ) ,
	bhkDisplayIndividualAttributesRotor	= ( bhkQuickMessageRotor + 1 ) ,
	bhkBrailleWindowToggle	= ( bhkDisplayIndividualAttributesRotor + 1 ) ,
	bhkIndentToggle	= ( bhkBrailleWindowToggle + 1 ) ,
	bhkSpacingToggle	= ( bhkIndentToggle + 1 ) ,
	bhkDisplaySpecifiedCellAttributes	= ( bhkSpacingToggle + 1 ) ,
	bhkGrade2BrailleToggle	= ( bhkDisplaySpecifiedCellAttributes + 1 ) ,
	bhkUntranslateAtCursor	= ( bhkGrade2BrailleToggle + 1 ) ,
	bhkUntranslateAtMouse	= ( bhkUntranslateAtCursor + 1 ) ,
	bhkAutoUntranslateAtCursor	= ( bhkUntranslateAtMouse + 1 ) ,
	bhkExpandSymbolsToggle	= ( bhkAutoUntranslateAtCursor + 1 ) ,
	bhkStickyShift	= ( bhkExpandSymbolsToggle + 1 ) ,
	bhkStickyControl	= ( bhkStickyShift + 1 ) ,
	bhkStickyAlt	= ( bhkStickyControl + 1 ) ,
	bhkStickyWindows	= ( bhkStickyAlt + 1 ) ,
	bhkStickyMenu	= ( bhkStickyWindows + 1 ) ,
	bhkStickyInsert	= ( bhkStickyMenu + 1 ) ,
	bhkClearStickyKeys	= ( bhkStickyInsert + 1 ) ,
	bhkNameToggle	= ( bhkClearStickyKeys + 1 ) ,
	bhkTypeToggle	= ( bhkNameToggle + 1 ) ,
	bhkStickyAltGr	= ( bhkTypeToggle + 1 ) ,
	bhkAutoRouteCursorToggle	= ( bhkStickyAltGr + 1 ) ,
	bhkRotorDisplayMode	= ( bhkAutoRouteCursorToggle + 1 ) ,
	bhkLeftOneCell	= ( bhkRotorDisplayMode + 1 ) ,
	bhkRightOneCell	= ( bhkLeftOneCell + 1 ) 
    } 	BrailleHotkeyID;

typedef /* [helpcontext] */ 
enum MouseButton
    {	mbNone	= -1,
	mbLeft	= 0,
	mbMiddle	= 1,
	mbRight	= 2
    } 	MouseButton;

typedef /* [helpcontext] */ 
enum Voice
    {	voiceKeyboard	= 0,
	voiceScreen	= ( voiceKeyboard + 1 ) ,
	voiceMouse	= ( voiceScreen + 1 ) 
    } 	Voice;

typedef /* [helpcontext] */ 
enum MouseBoundary
    {	mbFullScreen	= 0,
	mbActiveWindow	= ( mbFullScreen + 1 ) ,
	mbFocusWindow	= ( mbActiveWindow + 1 ) ,
	mbUserWindow	= ( mbFocusWindow + 1 ) 
    } 	MouseBoundary;

typedef /* [helpcontext] */ 
enum KeyDisposition
    {	kdDiscard	= 0,
	kdPass	= 1,
	kdProcess	= 2,
	kdSilence	= 0x40000000
    } 	KeyDisposition;

typedef /* [helpcontext] */ 
enum BaudRate
    {	br300	= 0,
	br1200	= ( br300 + 1 ) ,
	br2400	= ( br1200 + 1 ) ,
	br4800	= ( br2400 + 1 ) ,
	br9600	= ( br4800 + 1 ) ,
	br38400	= ( br9600 + 1 ) 
    } 	BaudRate;

typedef /* [helpcontext] */ 
enum DataBits
    {	db7	= 0,
	db8	= ( db7 + 1 ) 
    } 	DataBits;

typedef /* [helpcontext] */ 
enum StopBits
    {	sb1	= 0,
	sb2	= ( sb1 + 1 ) 
    } 	StopBits;

typedef /* [helpcontext] */ 
enum Parity
    {	parityNone	= 0,
	parityOdd	= ( parityNone + 1 ) ,
	parityEven	= ( parityOdd + 1 ) ,
	parityMark	= ( parityEven + 1 ) 
    } 	Parity;

typedef /* [helpcontext] */ 
enum FlowControl
    {	fcXonXoff	= 0,
	fcRtsCts	= ( fcXonXoff + 1 ) ,
	fcDsrDtr	= ( fcRtsCts + 1 ) 
    } 	FlowControl;

typedef /* [helpcontext] */ 
enum PortType
    {	ptCom	= 0,
	ptLpt	= ( ptCom + 1 ) 
    } 	PortType;

typedef /* [helpcontext] */ 
enum WindowTypeStatus
    {	wtsOff	= 0,
	wtsBefore	= ( wtsOff + 1 ) ,
	wtsAfter	= ( wtsBefore + 1 ) 
    } 	WindowTypeStatus;

typedef /* [helpcontext] */ 
enum DialogEvent
    {	dialogCreated	= 0x110,
	dialogClosing	= 0x10,
	buttonClicked	= 0,
	buttonDisable	= 4,
	buttonDoubleClicked	= 5,
	buttonFocus	= 6,
	buttonBlur	= 7,
	checkboxClicked	= 0,
	checkboxDisable	= 4,
	checkboxDoubleClicked	= 5,
	checkboxFocus	= 6,
	checkboxBlur	= 7,
	radiobuttonClicked	= 0,
	radiobuttonDisable	= 4,
	radiobuttonDoubleClicked	= 5,
	radiobuttonFocus	= 6,
	radiobuttonBlur	= 7,
	staticClicked	= 0,
	staticDoubleClicked	= 1,
	staticEnabled	= 2,
	staticDisabled	= 3,
	editboxFocus	= 0x100,
	editboxBlur	= 0x200,
	editboxChange	= 0x300,
	editboxUpdate	= 0x400,
	editboxMemoryError	= 0x500,
	editboxTooMuchText	= 0x501,
	editboxHorizontalScroll	= 0x601,
	editboxVerticalScroll	= 0x602,
	editboxAlignmentLTR	= 0x700,
	editboxAlignmentRTL	= 0x701,
	listboxMemoryError	= -2,
	listboxSelectionChange	= 1,
	listboxDoubleClicked	= 2,
	listboxSelectionCancel	= 3,
	listboxFocus	= 4,
	listboxBlur	= 5,
	comboboxMemoryError	= -1,
	comboboxSelectionChange	= 1,
	comboboxDoubleClicked	= 2,
	comboboxFocus	= 3,
	comboboxBlur	= 4,
	comboboxEditChange	= 5,
	comboboxEditUpdate	= 6,
	comboboxDropdown	= 7,
	comboboxCloseup	= 8,
	comboboxSelectionEndOk	= 9,
	comboboxSelectionEndCancel	= 10,
	trackbarLineUp	= 0,
	trackbarLineDown	= 1,
	trackbarPageUp	= 2,
	trackbarPageDown	= 3,
	trackbarTop	= 6,
	trackbarBottom	= 7,
	trackbarEndTrack	= 8,
	updownUp	= 0,
	updownLeft	= 0,
	updownDown	= 1,
	updownRight	= 1,
	updownChange	= -722,
	listviewFocus	= -7,
	listviewBlur	= -8,
	listviewItemChanged	= -101,
	listviewKeydown	= -155,
	listviewClicked	= -2,
	treeviewFocus	= -7,
	treeviewBlur	= -8,
	treeviewSelectionChange	= -451,
	treeviewItemExpanded	= -455,
	treeviewSelectionChanging	= -450,
	treeviewItemExpanding	= -454,
	treeviewKeydown	= -412,
	treeviewClicked	= -2,
	menuSelection	= 0x126
    } 	DialogEvent;

typedef /* [helpcontext] */ 
enum listviewView
    {	lvvIcon	= 0,
	lvvList	= ( lvvIcon + 1 ) ,
	lvvReport	= ( lvvList + 1 ) ,
	lvvSmallIcon	= ( lvvReport + 1 ) ,
	lvvTile	= ( lvvSmallIcon + 1 ) 
    } 	listviewView;

typedef /* [helpcontext] */ 
enum listviewSort
    {	lvsNone	= 0,
	lvsAscending	= ( lvsNone + 1 ) ,
	lvsDescending	= ( lvsAscending + 1 ) 
    } 	listviewSort;

typedef /* [helpcontext] */ 
enum listviewCheck
    {	lvcUnchecked	= 0,
	lvcChecked	= ( lvcUnchecked + 1 ) ,
	lvcNocheck	= ( lvcChecked + 1 ) 
    } 	listviewCheck;

typedef /* [helpcontext] */ 
enum CommonFileDialogFlags
    {	cfdfAllowMultiSelect	= 0x200,
	cfdfCreatePrompt	= 0x2000,
	cfdfDoNotAddToRecent	= 0x2000000,
	cfdfEnableDialogResizing	= 0x800000,
	cfdfUseExplorerStyleInterface	= 0x80000,
	cfdfFileMustExist	= 0x1000,
	cfdfForceShowHidden	= 0x10000000,
	cfdfHideReadOnlyCheck	= 0x4,
	cfdfUseLongFileNames	= 0x200000,
	cfdfNoChangeDirectory	= 0x8,
	cfdfDoNotDereferenceLinks	= 0x100000,
	cfdfNoLongFileNames	= 0x40000,
	cfdfNoNetworkButton	= 0x20000,
	cfdfDoNotAllowReadOnlyFiles	= 0x8000,
	cfdfWarnIfFileExists	= 0x2,
	cfdfPathMustExist	= 0x800,
	cfdfNoPlacesBar	= 0x20000000
    } 	CommonFileDialogFlags;

typedef /* [helpcontext] */ 
enum CursorKeyActions
    {	ckaUndefined	= 0,
	ckaPriorCharacterBefore	= ( ckaUndefined + 1 ) ,
	ckaPriorCharacterAfter	= ( ckaPriorCharacterBefore + 1 ) ,
	ckaCharacterBefore	= ( ckaPriorCharacterAfter + 1 ) ,
	ckaCharacterAfter	= ( ckaCharacterBefore + 1 ) ,
	ckaNextCharacter	= ( ckaCharacterAfter + 1 ) ,
	ckaWordPrior	= ( ckaNextCharacter + 1 ) ,
	ckaWord	= ( ckaWordPrior + 1 ) ,
	ckaWordNext	= ( ckaWord + 1 ) ,
	ckaLinePrior	= ( ckaWordNext + 1 ) ,
	ckaLine	= ( ckaLinePrior + 1 ) ,
	ckaLineNext	= ( ckaLine + 1 ) ,
	ckaSentence	= ( ckaLineNext + 1 ) ,
	ckaParagraph	= ( ckaSentence + 1 ) ,
	ckaToEndOfLine	= ( ckaParagraph + 1 ) ,
	ckaHighlight	= ( ckaToEndOfLine + 1 ) ,
	ckaHighlightedText	= ( ckaHighlight + 1 ) ,
	ckaCursorPosition	= ( ckaHighlightedText + 1 ) ,
	ckaFieldData	= ( ckaCursorPosition + 1 ) ,
	ckaFieldName	= ( ckaFieldData + 1 ) ,
	ckaFieldNameAndData	= ( ckaFieldName + 1 ) ,
	ckaTitleStatus	= ( ckaFieldNameAndData + 1 ) ,
	ckaSpeakWindow	= ( ckaTitleStatus + 1 ) ,
	ckaActiveWindow	= ( ckaSpeakWindow + 1 ) ,
	ckaMouseToWindow	= ( ckaActiveWindow + 1 ) ,
	ckaMouseTopLeft	= ( ckaMouseToWindow + 1 ) ,
	ckaLoadSet	= ( ckaMouseTopLeft + 1 ) ,
	ckaIgnoreSpeakWindows	= ( ckaLoadSet + 1 ) ,
	ckaExecuteHotkey	= ( ckaIgnoreSpeakWindows + 1 ) ,
	ckaWordEnhanced	= ( ckaExecuteHotkey + 1 ) ,
	ckaOfficeAttributeStatus	= ( ckaWordEnhanced + 1 ) ,
	ckaOfficeSmartTab	= ( ckaOfficeAttributeStatus + 1 ) 
    } 	CursorKeyActions;

typedef /* [helpcontext] */ 
enum OfficeAttriubteStatus
    {	oasBold	= 0,
	oasItalic	= ( oasBold + 1 ) ,
	oasUnderline	= ( oasItalic + 1 ) ,
	oasShowAll	= ( oasUnderline + 1 ) ,
	oasFontSize	= ( oasShowAll + 1 ) 
    } 	OfficeAttributeStatus;

typedef /* [helpcontext] */ 
enum AccessibleSelection
    {	accTakeFocus	= 1,
	accTakeSelection	= 2,
	accExtendSelection	= 4,
	accAddSelection	= 8,
	accRemoveSelection	= 16
    } 	AccessibleSelection;

typedef /* [helpcontext] */ 
enum AccessibleRoleEnum
    {	role_SYSTEM_TITLEBAR	= 0x1,
	role_SYSTEM_MENUBAR	= 0x2,
	role_SYSTEM_SCROLLBAR	= 0x3,
	role_SYSTEM_GRIP	= 0x4,
	role_SYSTEM_SOUND	= 0x5,
	role_SYSTEM_CURSOR	= 0x6,
	role_SYSTEM_CARET	= 0x7,
	role_SYSTEM_ALERT	= 0x8,
	role_SYSTEM_WINDOW	= 0x9,
	role_SYSTEM_CLIENT	= 0xa,
	role_SYSTEM_MENUPOPUP	= 0xb,
	role_SYSTEM_MENUITEM	= 0xc,
	role_SYSTEM_TOOLTIP	= 0xd,
	role_SYSTEM_APPLICATION	= 0xe,
	role_SYSTEM_DOCUMENT	= 0xf,
	role_SYSTEM_PANE	= 0x10,
	role_SYSTEM_CHART	= 0x11,
	role_SYSTEM_DIALOG	= 0x12,
	role_SYSTEM_BORDER	= 0x13,
	role_SYSTEM_GROUPING	= 0x14,
	role_SYSTEM_SEPARATOR	= 0x15,
	role_SYSTEM_TOOLBAR	= 0x16,
	role_SYSTEM_STATUSBAR	= 0x17,
	role_SYSTEM_TABLE	= 0x18,
	role_SYSTEM_COLUMNHEADER	= 0x19,
	role_SYSTEM_ROWHEADER	= 0x1a,
	role_SYSTEM_COLUMN	= 0x1b,
	role_SYSTEM_ROW	= 0x1c,
	role_SYSTEM_CELL	= 0x1d,
	role_SYSTEM_LINK	= 0x1e,
	role_SYSTEM_HELPBALLOON	= 0x1f,
	role_SYSTEM_CHARACTER	= 0x20,
	role_SYSTEM_LIST	= 0x21,
	role_SYSTEM_LISTITEM	= 0x22,
	role_SYSTEM_OUTLINE	= 0x23,
	role_SYSTEM_OUTLINEITEM	= 0x24,
	role_SYSTEM_PAGETAB	= 0x25,
	role_SYSTEM_PROPERTYPAGE	= 0x26,
	role_SYSTEM_INDICATOR	= 0x27,
	role_SYSTEM_GRAPHIC	= 0x28,
	role_SYSTEM_STATICTEXT	= 0x29,
	role_SYSTEM_TEXT	= 0x2a,
	role_SYSTEM_PUSHBUTTON	= 0x2b,
	role_SYSTEM_CHECKBUTTON	= 0x2c,
	role_SYSTEM_RADIOBUTTON	= 0x2d,
	role_SYSTEM_COMBOBOX	= 0x2e,
	role_SYSTEM_DROPLIST	= 0x2f,
	role_SYSTEM_PROGRESSBAR	= 0x30,
	role_SYSTEM_DIAL	= 0x31,
	role_SYSTEM_HOTKEYFIELD	= 0x32,
	role_SYSTEM_SLIDER	= 0x33,
	role_SYSTEM_SPINBUTTON	= 0x34,
	role_SYSTEM_DIAGRAM	= 0x35,
	role_SYSTEM_ANIMATION	= 0x36,
	role_SYSTEM_EQUATION	= 0x37,
	role_SYSTEM_BUTTONDROPDOWN	= 0x38,
	role_SYSTEM_BUTTONMENU	= 0x39,
	role_SYSTEM_BUTTONDROPDOWNGRID	= 0x3a,
	role_SYSTEM_WHITESPACE	= 0x3b,
	role_SYSTEM_PAGETABLIST	= 0x3c,
	role_SYSTEM_CLOCK	= 0x3d,
	role_SYSTEM_SPLITBUTTON	= 0x3e,
	role_SYSTEM_IPADDRESS	= 0x3f,
	role_SYSTEM_OUTLINEBUTTON	= 0x40
    } 	AccessibleRoleEnum;

typedef /* [helpcontext] */ 
enum AccessibleStateEnum
    {	state_SYSTEM_NORMAL	= 0,
	state_SYSTEM_UNAVAILABLE	= 0x1,
	state_SYSTEM_SELECTED	= 0x2,
	state_SYSTEM_FOCUSED	= 0x4,
	state_SYSTEM_PRESSED	= 0x8,
	state_SYSTEM_CHECKED	= 0x10,
	state_SYSTEM_MIXED	= 0x20,
	state_SYSTEM_INDETERMINATE	= 0x20,
	state_SYSTEM_READONLY	= 0x40,
	state_SYSTEM_HOTTRACKED	= 0x80,
	state_SYSTEM_DEFAULT	= 0x100,
	state_SYSTEM_EXPANDED	= 0x200,
	state_SYSTEM_COLLAPSED	= 0x400,
	state_SYSTEM_BUSY	= 0x800,
	state_SYSTEM_FLOATING	= 0x1000,
	state_SYSTEM_MARQUEED	= 0x2000,
	state_SYSTEM_ANIMATED	= 0x4000,
	state_SYSTEM_INVISIBLE	= 0x8000,
	state_SYSTEM_OFFSCREEN	= 0x10000,
	state_SYSTEM_SIZEABLE	= 0x20000,
	state_SYSTEM_MOVEABLE	= 0x40000,
	state_SYSTEM_SELFVOICING	= 0x80000,
	state_SYSTEM_FOCUSABLE	= 0x100000,
	state_SYSTEM_SELECTABLE	= 0x200000,
	state_SYSTEM_LINKED	= 0x400000,
	state_SYSTEM_TRAVERSED	= 0x800000,
	state_SYSTEM_MULTISELECTABLE	= 0x1000000,
	state_SYSTEM_EXTSELECTABLE	= 0x2000000,
	state_SYSTEM_ALERT_LOW	= 0x4000000,
	state_SYSTEM_ALERT_MEDIUM	= 0x8000000,
	state_SYSTEM_ALERT_HIGH	= 0x10000000,
	state_SYSTEM_PROTECTED	= 0x20000000,
	state_SYSTEM_HASPOPUP	= 0x40000000
    } 	AccessibleStateEnum;

typedef /* [helpcontext] */ 
enum AccessibleObjectID
    {	objid_WINDOW	= 0,
	objid_SYSMENU	= 0xffffffff,
	objid_TITLEBAR	= 0xfffffffe,
	objid_MENU	= 0xfffffffd,
	objid_CLIENT	= 0xfffffffc,
	objid_VSCROLL	= 0xfffffffb,
	objid_HSCROLL	= 0xfffffffa,
	objid_SIZEGRIP	= 0xfffffff9
    } 	AccessibleObjectID;

typedef /* [helpcontext] */ 
enum MSAAEventID
    {	event_SYSTEM_SOUND	= 0x1,
	event_SYSTEM_ALERT	= 0x2,
	event_SYSTEM_FOREGROUND	= 0x3,
	event_SYSTEM_MENUSTART	= 0x4,
	event_SYSTEM_MENUEND	= 0x5,
	event_SYSTEM_MENUPOPUPSTART	= 0x6,
	event_SYSTEM_MENUPOPUPEND	= 0x7,
	event_SYSTEM_CAPTURESTART	= 0x8,
	event_SYSTEM_CAPTUREEND	= 0x9,
	event_SYSTEM_MOVESIZESTART	= 0xa,
	event_SYSTEM_MOVESIZEEND	= 0xb,
	event_SYSTEM_CONTEXTHELPSTART	= 0xc,
	event_SYSTEM_CONTEXTHELPEND	= 0xd,
	event_SYSTEM_DRAGDROPSTART	= 0xe,
	event_SYSTEM_DRAGDROPEND	= 0xf,
	event_SYSTEM_DIALOGSTART	= 0x10,
	event_SYSTEM_DIALOGEND	= 0x11,
	event_SYSTEM_SCROLLINGSTART	= 0x12,
	event_SYSTEM_SCROLLINGEND	= 0x13,
	event_SYSTEM_SWITCHSTART	= 0x14,
	event_SYSTEM_SWITCHEND	= 0x15,
	event_SYSTEM_MINIMIZESTART	= 0x16,
	event_SYSTEM_MINIMIZEEND	= 0x17,
	event_CONSOLE_CARET	= 0x4001,
	event_CONSOLE_UPDATE_REGION	= 0x4002,
	event_CONSOLE_UPDATE_SIMPLE	= 0x4003,
	event_CONSOLE_UPDATE_SCROLL	= 0x4004,
	event_CONSOLE_LAYOUT	= 0x4005,
	event_CONSOLE_START_APPLICATION	= 0x4006,
	event_CONSOLE_END_APPLICATION	= 0x4007,
	event_OBJECT_SHOW	= 0x8002,
	event_OBJECT_HIDE	= 0x8003,
	event_OBJECT_REORDER	= 0x8004,
	event_OBJECT_FOCUS	= 0x8005,
	event_OBJECT_SELECTION	= 0x8006,
	event_OBJECT_SELECTIONADD	= 0x8007,
	event_OBJECT_SELECTIONREMOVE	= 0x8008,
	event_OBJECT_SELECTIONWITHIN	= 0x8009,
	event_OBJECT_STATECHANGE	= 0x800a,
	event_OBJECT_LOCATIONCHANGE	= 0x800b,
	event_OBJECT_NAMECHANGE	= 0x800c,
	event_OBJECT_DESCRIPTIONCHANGE	= 0x800d,
	event_OBJECT_VALUECHANGE	= 0x800e,
	event_OBJECT_PARENTCHANGE	= 0x800f,
	event_OBJECT_HELPCHANGE	= 0x8010,
	event_OBJECT_DEFACTIONCHANGE	= 0x8011,
	event_OBJECT_ACCELERATORCHANGE	= 0x8012,
	event_OBJECT_INVOKED	= 0x8013,
	event_OBJECT_TEXTSELECTIONCHANGED	= 0x8014,
	event_OBJECT_CONTENTSCROLLED	= 0x8015
    } 	MSAAEventID;

typedef /* [helpcontext] */ 
enum MessageBeeps
    {	mbAsterisk	= 0,
	mbDefaultBeep	= ( mbAsterisk + 1 ) ,
	mbExclamation	= ( mbDefaultBeep + 1 ) ,
	mbSystemExit	= ( mbExclamation + 1 ) ,
	mbCriticalStop	= ( mbSystemExit + 1 ) ,
	mbQuestion	= ( mbCriticalStop + 1 ) ,
	mbSystemStart	= ( mbQuestion + 1 ) ,
	mbSystemWelcome	= ( mbSystemStart + 1 ) 
    } 	MessageBeeps;

typedef /* [helpcontext] */ 
enum FilterMatch
    {	fmExact	= 0,
	fmStartsWith	= ( fmExact + 1 ) ,
	fmContains	= ( fmStartsWith + 1 ) ,
	fmEndsWith	= ( fmContains + 1 ) 
    } 	FilterMatch;

typedef /* [helpcontext] */ 
enum CursorType
    {	ctMousePointer	= 0,
	ctWECursor	= ( ctMousePointer + 1 ) 
    } 	CursorType;

typedef /* [helpcontext] */ 
enum OnScreenVisibility
    {	osvNone	= 0,
	osvComplete	= ( osvNone + 1 ) ,
	osvPartial	= ( osvComplete + 1 ) 
    } 	OnScreenVisibility;

typedef /* [helpcontext] */ 
enum SystemMetric
    {	sm_CXSCREEN	= 0,
	sm_CYSCREEN	= 1,
	sm_CXVSCROLL	= 2,
	sm_CYHSCROLL	= 3,
	sm_CYCAPTION	= 4,
	sm_CXBORDER	= 5,
	sm_CYBORDER	= 6,
	sm_CXDLGFRAME	= 7,
	sm_CYDLGFRAME	= 8,
	sm_CYVTHUMB	= 9,
	sm_CXHTHUMB	= 10,
	sm_CXICON	= 11,
	sm_CYICON	= 12,
	sm_CXCURSOR	= 13,
	sm_CYCURSOR	= 14,
	sm_CYMENU	= 15,
	sm_CXFULLSCREEN	= 16,
	sm_CYFULLSCREEN	= 17,
	sm_CYKANJIWINDOW	= 18,
	sm_MOUSEPRESENT	= 19,
	sm_CYVSCROLL	= 20,
	sm_CXHSCROLL	= 21,
	sm_DEBUG	= 22,
	sm_SWAPBUTTON	= 23,
	sm_RESERVED1	= 24,
	sm_RESERVED2	= 25,
	sm_RESERVED3	= 26,
	sm_RESERVED4	= 27,
	sm_CXMIN	= 28,
	sm_CYMIN	= 29,
	sm_CXSIZE	= 30,
	sm_CYSIZE	= 31,
	sm_CXFRAME	= 32,
	sm_CYFRAME	= 33,
	sm_CXMINTRACK	= 34,
	sm_CYMINTRACK	= 35,
	sm_CXDOUBLECLK	= 36,
	sm_CYDOUBLECLK	= 37,
	sm_CXICONSPACING	= 38,
	sm_CYICONSPACING	= 39,
	sm_MENUDROPALIGNMENT	= 40,
	sm_PENWINDOWS	= 41,
	sm_DBCSENABLED	= 42,
	sm_CMOUSEBUTTONS	= 43,
	sm_CXFIXEDFRAME	= sm_CXDLGFRAME,
	sm_CYFIXEDFRAME	= sm_CYDLGFRAME,
	sm_CXSIZEFRAME	= sm_CXFRAME,
	sm_CYSIZEFRAME	= sm_CYFRAME,
	sm_SECURE	= 44,
	sm_CXEDGE	= 45,
	sm_CYEDGE	= 46,
	sm_CXMINSPACING	= 47,
	sm_CYMINSPACING	= 48,
	sm_CXSMICON	= 49,
	sm_CYSMICON	= 50,
	sm_CYSMCAPTION	= 51,
	sm_CXSMSIZE	= 52,
	sm_CYSMSIZE	= 53,
	sm_CXMENUSIZE	= 54,
	sm_CYMENUSIZE	= 55,
	sm_ARRANGE	= 56,
	sm_CXMINIMIZED	= 57,
	sm_CYMINIMIZED	= 58,
	sm_CXMAXTRACK	= 59,
	sm_CYMAXTRACK	= 60,
	sm_CXMAXIMIZED	= 61,
	sm_CYMAXIMIZED	= 62,
	sm_NETWORK	= 63,
	sm_CLEANBOOT	= 67,
	sm_CXDRAG	= 68,
	sm_CYDRAG	= 69,
	sm_SHOWSOUNDS	= 70,
	sm_CXMENUCHECK	= 71,
	sm_CYMENUCHECK	= 72,
	sm_SLOWMACHINE	= 73,
	sm_MIDEASTENABLED	= 74,
	sm_MOUSEWHEELPRESENT	= 75,
	sm_XVIRTUALSCREEN	= 76,
	sm_YVIRTUALSCREEN	= 77,
	sm_CXVIRTUALSCREEN	= 78,
	sm_CYVIRTUALSCREEN	= 79,
	sm_CMONITORS	= 80,
	sm_SAMEDISPLAYFORMAT	= 81,
	sm_IMMENABLED	= 82,
	sm_CXFOCUSBORDER	= 83,
	sm_CYFOCUSBORDER	= 84,
	sm_TABLETPC	= 86,
	sm_MEDIACENTER	= 87,
	sm_STARTER	= 88,
	sm_SERVERR2	= 89,
	sm_MOUSEHORIZONTALWHEELPRESENT	= 91,
	sm_CXPADDEDBORDER	= 92,
	sm_REMOTESESSION	= 0x1000,
	sm_SHUTTINGDOWN	= 0x2000,
	sm_REMOTECONTROL	= 0x2001,
	sm_CARETBLINKINGENABLED	= 0x2002
    } 	SystemMetric;

typedef /* [helpcontext] */ 
enum BrowseModeState
    {	bmsDisabled	= 0,
	bmsEnabled	= ( bmsDisabled + 1 ) ,
	bmsSuspended	= ( bmsEnabled + 1 ) ,
	bmsLoading	= ( bmsSuspended + 1 ) ,
	bmsActive	= ( bmsLoading + 1 ) 
    } 	BrowseModeState;

typedef /* [helpcontext] */ 
enum OSProductSuiteMask
    {	psmBackOffice	= 0x4,
	psmBlade	= 0x400,
	psmCluster	= 0x4000,
	psmDataCenter	= 0x80,
	psmEnterprise	= 0x2,
	psmEmbedded	= 0x40,
	psmPersonal	= 0x200,
	psmSingleUserTS	= 0x100,
	psmSmallBusiness	= 0x1,
	psmSmallBusinessRestricted	= 0x20,
	psmStorage	= 0x2000,
	psmTerminal	= 0x10
    } 	OSProductSuiteMask;

typedef /* [helpcontext] */ 
enum OSProductType
    {	ptDomainController	= 0x2,
	ptServer	= 0x3,
	ptWorkstation	= 0x1
    } 	OSProductType;

typedef /* [helpcontext] */ 
enum MenuFlags
    {	mfDisabled	= 0x1,
	mfPulldown	= 0x2,
	mfChecked	= 0x4,
	mfDialog	= 0x8,
	mfSystem	= 0x10,
	mfSystemChild	= 0x20
    } 	MenuFlags;

typedef /* [helpcontext] */ 
enum BrailleDisplayType
    {	bdtNONE	= 0,
	bdtPOWERBRAILLE	= 1,
	bdtALVA	= 2,
	bdtBRAILLEWINDOW	= 3,
	bdtBRAILLELITE40	= 4,
	bdtBRAILLELITE18	= 5,
	bdtVARIO	= 6,
	bdtALVA280	= 7,
	bdtALVA240	= 8,
	bdtHT	= 9,
	bdtBRAILLEX	= 10,
	bdtBRAILLEXEL	= 11,
	bdtBRAILLENOTE	= 12,
	bdtVOYAGER	= 13,
	bdtDM80	= 14,
	bdtTVB2040	= 15,
	bdtTVBMINI	= 16,
	bdtME20	= 17,
	bdtME40	= 18,
	bdtZEPHYR	= 19,
	bdtMETEC	= 21,
	bdtEASY	= 22,
	bdtINKA	= 23,
	bdtBRAILLEX2	= 24,
	bdtFREEDOM	= 25,
	bdtTHDZ	= 26,
	bdtHANSONE	= 27,
	bdtEUROBRL	= 28,
	bdtSUPERVARIO	= 29,
	bdtPRONTO	= 30,
	bdtHEDO	= 31,
	bdtHT_COM	= 32,
	bdtTHDZ_PB	= 33,
	bdtVARIOCONNECT	= 34,
	bdtTRIO	= 35,
	bdtSYNCBRAILLE	= 36,
	bdtALVANEW	= 37,
	bdtBRAILLEMEMO	= 38,
	bdtLILLI	= 39,
	bdtOEM	= 100
    } 	BrailleDisplayType;

typedef /* [helpcontext] */ 
enum BrailleFreezeLocation
    {	bflLeft	= 0,
	bflStart	= bflLeft,
	bflRight	= ( bflStart + 1 ) ,
	bflEnd	= bflRight
    } 	BrailleFreezeLocation;

typedef /* [helpcontext] */ 
enum BrailleControlTypeEnum
    {	bctNone	= 0,
	bctControlID	= ( bctNone + 1 ) ,
	bctFieldName	= ( bctControlID + 1 ) ,
	bctFieldData	= ( bctFieldName + 1 ) ,
	bctSeparator	= ( bctFieldData + 1 ) ,
	bctQuickMessageMode	= ( bctSeparator + 1 ) 
    } 	BrailleControlTypeEnum;

typedef /* [helpcontext] */ 
enum BrailleActionType
    {	batNothing	= 0,
	batHotkey	= ( batNothing + 1 ) ,
	batBrailleHotkey	= ( batHotkey + 1 ) ,
	batKeypress	= ( batBrailleHotkey + 1 ) ,
	batCharacter	= ( batKeypress + 1 ) 
    } 	BrailleActionType;

typedef /* [helpcontext] */ 
enum BraillePatternBlinkStyle
    {	bbsAlwaysUp	= 0,
	bbsBlink	= 1
    } 	BraillePatternBlinkStyle;

typedef /* [helpcontext] */ 
enum BrailleDisplayMode
    {	bdmStructured	= 0,
	bdmLine	= ( bdmStructured + 1 ) ,
	bdmSpeechBox	= ( bdmLine + 1 ) 
    } 	BrailleDisplayMode;

typedef /* [helpcontext] */ 
enum StartupOptionsCurrentUser
    {	scuNever	= 0,
	scuAlways	= 1,
	scuUseCurrent	= 2
    } 	StartupOptionsCurrentUser;

typedef /* [helpcontext] */ 
enum AccessibleProperty
    {	apName	= 0x1,
	apValue	= 0x2,
	apRole	= 0x4,
	apState	= 0x8,
	apRectangle	= 0x10,
	apShortcutKey	= 0x20,
	apDefaultAction	= 0x400,
	apDescription	= 0x800,
	apWindow	= 0x4000,
	apAll	= 0x4c3f
    } 	AccessibleProperty;

typedef /* [helpcontext] */ 
enum ProfileType
    {	ptProfile	= 0,
	ptAllUsers	= ( ptProfile + 1 ) ,
	ptOSUser	= ( ptAllUsers + 1 ) 
    } 	ProfileType;

typedef /* [helpcontext] */ 
enum TreeViewInsert
    {	tviRoot	= -0x10000,
	tviFirst	= -0xffff,
	tviLast	= -0xfffe,
	tviSort	= -0xfffd
    } 	TreeViewInsert;

typedef /* [helpcontext] */ 
enum treeviewCheck
    {	tvcUnchecked	= 0,
	tvcChecked	= ( tvcUnchecked + 1 ) ,
	tvcNocheck	= ( tvcChecked + 1 ) 
    } 	treeviewCheck;

typedef /* [helpcontext] */ 
enum treeviewExpandAction
    {	tveCollapse	= 1,
	tveExpand	= ( tveCollapse + 1 ) ,
	tveToggle	= ( tveExpand + 1 ) 
    } 	treeviewExpandAction;

typedef /* [helpcontext] */ 
enum WindowFilterScope
    {	wfsWindowOnly	= 1,
	wfsChildrenOnly	= 2,
	wfsWindowAndChildren	= 3
    } 	WindowFilterScope;

typedef /* [helpcontext] */ 
enum ListViewColumnWidth
    {	lvcwAutoSize	= -1,
	lvcwAutoSizeUseHeader	= -2
    } 	ListViewColumnWidth;

typedef /* [helpcontext] */ 
enum LoadedScriptStatus
    {	ssRunning	= 1,
	ssRunningWithErrors	= 2,
	ssStarting	= 3,
	ssStopping	= 0x10000000,
	ssStopped	= 0x80000000,
	ssFileNotFound	= 0x80000001,
	ssDecryptionError1	= 0x80000002,
	ssDecryptionError2	= 0x80000003,
	ssAccessDenied	= 0x80000004,
	ssUntrusted	= 0x80000005
    } 	LoadedScriptStatus;

typedef /* [helpcontext] */ 
enum MenuItemFlags
    {	mifChecked	= 0x8L,
	mifUnchecked	= 0L,
	mifDisabled	= 0x2L,
	mifEnabled	= 0L,
	mifGrayed	= 0x1L,
	mifSeparator	= 0x800L
    } 	MenuItemFlags;

typedef /* [helpcontext] */ 
enum WindowEyesCopyProtection
    {	cpNone	= 0,
	cpEverlock	= 1,
	cpDongle	= 2,
	cpUnknown	= -1
    } 	WindowEyesCopyProtection;

typedef /* [helpcontext] */ 
enum MenuActiveStatus
    {	maInactive	= 0,
	maContext	= ( maInactive + 1 ) ,
	maNonContext	= ( maContext + 1 ) 
    } 	MenuActiveStatus;

typedef /* [helpcontext] */ 
enum WindowEyesLicenseType
    {	ltNormal	= 0,
	ltDemo	= ( ltNormal + 1 ) ,
	ltEvaluation	= ( ltDemo + 1 ) ,
	ltLeaseToOwn	= ( ltEvaluation + 1 ) 
    } 	WindowEyesLicenseType;

typedef /* [helpcontext] */ 
enum SystemButtonId
    {	idOK	= 1,
	idCANCEL	= ( idOK + 1 ) ,
	idABORT	= ( idCANCEL + 1 ) ,
	idRETRY	= ( idABORT + 1 ) ,
	idIGNORE	= ( idRETRY + 1 ) ,
	idYES	= ( idIGNORE + 1 ) ,
	idNO	= ( idYES + 1 ) ,
	idCLOSE	= ( idNO + 1 ) ,
	idHELP	= ( idCLOSE + 1 ) ,
	idTRYAGAIN	= ( idHELP + 1 ) ,
	idCONTINUE	= ( idTRYAGAIN + 1 ) 
    } 	SystemButtonId;

typedef /* [helpcontext] */ 
enum MouseWheelDirection
    {	wdForward	= 0,
	wdBackward	= ( wdForward + 1 ) 
    } 	MouseWheelDirection;

typedef /* [helpcontext] */ 
enum SetFileScopes
    {	scLocal	= 0,
	scGlobal	= ( scLocal + 1 ) 
    } 	SetFileScopes;

typedef /* [helpcontext] */ 
enum BrailleTracking
    {	btFocus	= 0,
	btMouse	= ( btFocus + 1 ) 
    } 	BrailleTracking;








































































































































































































typedef Clip TextClip;


EXTERN_C const IID LIBID_WindowEyes;

#ifndef ___Application_INTERFACE_DEFINED__
#define ___Application_INTERFACE_DEFINED__

/* interface _Application */
/* [object][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__Application;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5e437833-ecc1-46ee-aad6-0de913811d3e")
    _Application : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ActiveWindow( 
            /* [retval][out] */ _Window **activeWindow) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ActiveWindow( 
            /* [in] */ _Window *activeWindow) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FocusedWindow( 
            /* [retval][out] */ _Window **focusedWindow) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FocusedWindow( 
            /* [in] */ _Window *focusedWindow) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Windows( 
            /* [retval][out] */ Windows **windows) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Mouse( 
            /* [retval][out] */ _Mouse **mouse) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cursor( 
            /* [retval][out] */ Cursor **cursor) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Keyboard( 
            /* [retval][out] */ _Keyboard **keyboard) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ActiveSettings( 
            /* [retval][out] */ SetFile **settings) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ActiveCharacterDictionaries( 
            /* [retval][out] */ CharacterDictionaries **dicts) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ActiveColorDictionaries( 
            /* [retval][out] */ ColorDictionaries **dicts) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ActiveExceptionDictionaries( 
            /* [retval][out] */ ExceptionDictionaries **dicts) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ActiveGraphicDictionaries( 
            /* [retval][out] */ GraphicDictionaries **dicts) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ActiveKeyLabelDictionaries( 
            /* [retval][out] */ KeyLabelDictionaries **dicts) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *fullName) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrailleDisplays( 
            /* [retval][out] */ BrailleDisplays	**display) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentLanguage( 
            /* [retval][out] */ Language *lang) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Clips( 
            /* [optional][in] */ VARIANT RealTime,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SerialNumber( 
            /* [retval][out] */ BSTR *serial) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserName( 
            /* [retval][out] */ BSTR *username) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CompanyName( 
            /* [retval][out] */ BSTR *companyname) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ BSTR *weversion) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReleaseDate( 
            /* [retval][out] */ DATE *date) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DesktopWindow( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SharedObjects( 
            /* [retval][out] */ _SharedObjects **sharedObjects) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClientInformation( 
            /* [retval][out] */ _ClientInformation **clientInformation) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WECursor( 
            /* [retval][out] */ WECursor **weCursor) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ Text **text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ActiveMDIChild( 
            /* [retval][out] */ _Window **child) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Screen( 
            /* [retval][out] */ Screen **Screen) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Synthesizers( 
            /* [retval][out] */ _Synthesizers **synthesizers) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Highlight( 
            /* [optional][in] */ VARIANT RealTime,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IniFile( 
            /* [in] */ BSTR file,
            /* [retval][out] */ IniFile **iniFile) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Speech( 
            /* [retval][out] */ _Speech **speech) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MSAAEventSource( 
            /* [retval][out] */ _MSAAEvents **msaa) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TickCount( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Clipboard( 
            /* [retval][out] */ Clipboard **ClipBoard) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ActiveCursorType( 
            /* [retval][out] */ CursorType *type) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ActiveCursorType( 
            /* [in] */ CursorType type) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrowseMode( 
            /* [retval][out] */ _BrowseMode **browseMode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WEDialogs( 
            /* [retval][out] */ WEDialogs **weDialogs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Braille( 
            /* [retval][out] */ Braille	**braille) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OSVersion( 
            /* [retval][out] */ OSVersion **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Quit( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PixelColor( 
            /* [in] */ ScreenPoint *point,
            /* [retval][out] */ Color **color) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Color( 
            /* [in] */ int Red,
            /* [in] */ int Green,
            /* [in] */ int Blue,
            /* [retval][out] */ Color **color) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScreenPoint( 
            /* [in] */ int x,
            /* [in] */ int y,
            /* [retval][out] */ ScreenPoint **sPoint) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScreenRectangle( 
            /* [in] */ int left,
            /* [in] */ int top,
            /* [in] */ int right,
            /* [in] */ int bottom,
            /* [retval][out] */ ScreenRectangle **sRect) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExecuteHotkey( 
            /* [in] */ HotkeyID hotkey,
            /* [optional][in] */ VARIANT KeyAction) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClientIdentify( 
            /* [in] */ VARIANT script) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExecuteBrailleHotkey( 
            /* [in] */ BrailleHotkeyID hotkey) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Dialog( 
            /* [in] */ BSTR xmlName,
            /* [in] */ BSTR dialogName,
            /* [in] */ VARIANT eventHandler,
            /* [optional][in] */ VARIANT parameter,
            /* [optional][in] */ VARIANT parentWindow,
            /* [retval][out] */ _Dialog **dialog) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Strings( 
            /* [in] */ BSTR xmlName,
            /* [retval][out] */ IDispatch **dictionary) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PlaySound( 
            /* [in] */ VARIANT sound) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetSystemMetric( 
            /* [in] */ SystemMetric Metric,
            /* [retval][out] */ int *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartScript( 
            /* [in] */ BSTR ScriptName) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunInSystemTray( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StartupOptions( 
            /* [retval][out] */ StartupOptions **startupOptions) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WEPM( 
            /* [in] */ BSTR WEPMFile,
            /* [retval][out] */ WEPM **Wepm) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Profiles( 
            /* [retval][out] */ Profiles **profiles) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Utilities( 
            /* [retval][out] */ Utilities **utilities) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEndActive( 
            /* [retval][out] */ VARIANT_BOOL *readToEndActive) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RefreshSets( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Menu( 
            /* [in] */ BSTR xmlName,
            /* [in] */ BSTR MenuName,
            /* [in] */ VARIANT eventHandler,
            /* [optional][in] */ VARIANT parameter,
            /* [retval][out] */ Menu **Menu) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentLocaleID( 
            /* [retval][out] */ long *LocaleID) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CopyProtection( 
            /* [retval][out] */ WindowEyesCopyProtection *protection) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MenuActive( 
            /* [retval][out] */ MenuActiveStatus *menuActiveStatus) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LicenseType( 
            /* [retval][out] */ WindowEyesLicenseType *licenseType) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AttachWindowMessage( 
            /* [in] */ VARIANT function,
            /* [in] */ long message,
            /* [optional][in] */ VARIANT filterBy,
            /* [optional][in] */ VARIANT includeChildren,
            /* [optional][in] */ VARIANT functionParameter,
            /* [retval][out] */ WindowMessage **windowMessage) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RunInSystemTray( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _ApplicationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Application * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Application * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Application * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Application * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Application * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Application * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Application * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Application * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Application * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveWindow )( 
            _Application * This,
            /* [retval][out] */ _Window **activeWindow);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ActiveWindow )( 
            _Application * This,
            /* [in] */ _Window *activeWindow);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FocusedWindow )( 
            _Application * This,
            /* [retval][out] */ _Window **focusedWindow);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FocusedWindow )( 
            _Application * This,
            /* [in] */ _Window *focusedWindow);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Windows )( 
            _Application * This,
            /* [retval][out] */ Windows **windows);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mouse )( 
            _Application * This,
            /* [retval][out] */ _Mouse **mouse);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cursor )( 
            _Application * This,
            /* [retval][out] */ Cursor **cursor);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Keyboard )( 
            _Application * This,
            /* [retval][out] */ _Keyboard **keyboard);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveSettings )( 
            _Application * This,
            /* [retval][out] */ SetFile **settings);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveCharacterDictionaries )( 
            _Application * This,
            /* [retval][out] */ CharacterDictionaries **dicts);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveColorDictionaries )( 
            _Application * This,
            /* [retval][out] */ ColorDictionaries **dicts);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveExceptionDictionaries )( 
            _Application * This,
            /* [retval][out] */ ExceptionDictionaries **dicts);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveGraphicDictionaries )( 
            _Application * This,
            /* [retval][out] */ GraphicDictionaries **dicts);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveKeyLabelDictionaries )( 
            _Application * This,
            /* [retval][out] */ KeyLabelDictionaries **dicts);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            _Application * This,
            /* [retval][out] */ BSTR *fullName);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _Application * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrailleDisplays )( 
            _Application * This,
            /* [retval][out] */ BrailleDisplays	**display);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentLanguage )( 
            _Application * This,
            /* [retval][out] */ Language *lang);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Clips )( 
            _Application * This,
            /* [optional][in] */ VARIANT RealTime,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SerialNumber )( 
            _Application * This,
            /* [retval][out] */ BSTR *serial);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserName )( 
            _Application * This,
            /* [retval][out] */ BSTR *username);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompanyName )( 
            _Application * This,
            /* [retval][out] */ BSTR *companyname);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            _Application * This,
            /* [retval][out] */ BSTR *weversion);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReleaseDate )( 
            _Application * This,
            /* [retval][out] */ DATE *date);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DesktopWindow )( 
            _Application * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SharedObjects )( 
            _Application * This,
            /* [retval][out] */ _SharedObjects **sharedObjects);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientInformation )( 
            _Application * This,
            /* [retval][out] */ _ClientInformation **clientInformation);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WECursor )( 
            _Application * This,
            /* [retval][out] */ WECursor **weCursor);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            _Application * This,
            /* [retval][out] */ Text **text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveMDIChild )( 
            _Application * This,
            /* [retval][out] */ _Window **child);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Screen )( 
            _Application * This,
            /* [retval][out] */ Screen **Screen);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Synthesizers )( 
            _Application * This,
            /* [retval][out] */ _Synthesizers **synthesizers);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Highlight )( 
            _Application * This,
            /* [optional][in] */ VARIANT RealTime,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IniFile )( 
            _Application * This,
            /* [in] */ BSTR file,
            /* [retval][out] */ IniFile **iniFile);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Speech )( 
            _Application * This,
            /* [retval][out] */ _Speech **speech);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MSAAEventSource )( 
            _Application * This,
            /* [retval][out] */ _MSAAEvents **msaa);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TickCount )( 
            _Application * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Clipboard )( 
            _Application * This,
            /* [retval][out] */ Clipboard **ClipBoard);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveCursorType )( 
            _Application * This,
            /* [retval][out] */ CursorType *type);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ActiveCursorType )( 
            _Application * This,
            /* [in] */ CursorType type);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseMode )( 
            _Application * This,
            /* [retval][out] */ _BrowseMode **browseMode);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WEDialogs )( 
            _Application * This,
            /* [retval][out] */ WEDialogs **weDialogs);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Braille )( 
            _Application * This,
            /* [retval][out] */ Braille	**braille);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OSVersion )( 
            _Application * This,
            /* [retval][out] */ OSVersion **obj);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Quit )( 
            _Application * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PixelColor )( 
            _Application * This,
            /* [in] */ ScreenPoint *point,
            /* [retval][out] */ Color **color);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Color )( 
            _Application * This,
            /* [in] */ int Red,
            /* [in] */ int Green,
            /* [in] */ int Blue,
            /* [retval][out] */ Color **color);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScreenPoint )( 
            _Application * This,
            /* [in] */ int x,
            /* [in] */ int y,
            /* [retval][out] */ ScreenPoint **sPoint);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScreenRectangle )( 
            _Application * This,
            /* [in] */ int left,
            /* [in] */ int top,
            /* [in] */ int right,
            /* [in] */ int bottom,
            /* [retval][out] */ ScreenRectangle **sRect);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExecuteHotkey )( 
            _Application * This,
            /* [in] */ HotkeyID hotkey,
            /* [optional][in] */ VARIANT KeyAction);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClientIdentify )( 
            _Application * This,
            /* [in] */ VARIANT script);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExecuteBrailleHotkey )( 
            _Application * This,
            /* [in] */ BrailleHotkeyID hotkey);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Dialog )( 
            _Application * This,
            /* [in] */ BSTR xmlName,
            /* [in] */ BSTR dialogName,
            /* [in] */ VARIANT eventHandler,
            /* [optional][in] */ VARIANT parameter,
            /* [optional][in] */ VARIANT parentWindow,
            /* [retval][out] */ _Dialog **dialog);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Strings )( 
            _Application * This,
            /* [in] */ BSTR xmlName,
            /* [retval][out] */ IDispatch **dictionary);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PlaySound )( 
            _Application * This,
            /* [in] */ VARIANT sound);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetSystemMetric )( 
            _Application * This,
            /* [in] */ SystemMetric Metric,
            /* [retval][out] */ int *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartScript )( 
            _Application * This,
            /* [in] */ BSTR ScriptName);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunInSystemTray )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StartupOptions )( 
            _Application * This,
            /* [retval][out] */ StartupOptions **startupOptions);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WEPM )( 
            _Application * This,
            /* [in] */ BSTR WEPMFile,
            /* [retval][out] */ WEPM **Wepm);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Profiles )( 
            _Application * This,
            /* [retval][out] */ Profiles **profiles);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Utilities )( 
            _Application * This,
            /* [retval][out] */ Utilities **utilities);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEndActive )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *readToEndActive);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RefreshSets )( 
            _Application * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Menu )( 
            _Application * This,
            /* [in] */ BSTR xmlName,
            /* [in] */ BSTR MenuName,
            /* [in] */ VARIANT eventHandler,
            /* [optional][in] */ VARIANT parameter,
            /* [retval][out] */ Menu **Menu);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentLocaleID )( 
            _Application * This,
            /* [retval][out] */ long *LocaleID);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CopyProtection )( 
            _Application * This,
            /* [retval][out] */ WindowEyesCopyProtection *protection);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MenuActive )( 
            _Application * This,
            /* [retval][out] */ MenuActiveStatus *menuActiveStatus);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LicenseType )( 
            _Application * This,
            /* [retval][out] */ WindowEyesLicenseType *licenseType);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AttachWindowMessage )( 
            _Application * This,
            /* [in] */ VARIANT function,
            /* [in] */ long message,
            /* [optional][in] */ VARIANT filterBy,
            /* [optional][in] */ VARIANT includeChildren,
            /* [optional][in] */ VARIANT functionParameter,
            /* [retval][out] */ WindowMessage **windowMessage);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RunInSystemTray )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } _ApplicationVtbl;

    interface _Application
    {
        CONST_VTBL struct _ApplicationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Application_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Application_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Application_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Application_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Application_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Application_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Application_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Application_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _Application_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Application_get_ActiveWindow(This,activeWindow)	\
    ( (This)->lpVtbl -> get_ActiveWindow(This,activeWindow) ) 

#define _Application_put_ActiveWindow(This,activeWindow)	\
    ( (This)->lpVtbl -> put_ActiveWindow(This,activeWindow) ) 

#define _Application_get_FocusedWindow(This,focusedWindow)	\
    ( (This)->lpVtbl -> get_FocusedWindow(This,focusedWindow) ) 

#define _Application_put_FocusedWindow(This,focusedWindow)	\
    ( (This)->lpVtbl -> put_FocusedWindow(This,focusedWindow) ) 

#define _Application_get_Windows(This,windows)	\
    ( (This)->lpVtbl -> get_Windows(This,windows) ) 

#define _Application_get_Mouse(This,mouse)	\
    ( (This)->lpVtbl -> get_Mouse(This,mouse) ) 

#define _Application_get_Cursor(This,cursor)	\
    ( (This)->lpVtbl -> get_Cursor(This,cursor) ) 

#define _Application_get_Keyboard(This,keyboard)	\
    ( (This)->lpVtbl -> get_Keyboard(This,keyboard) ) 

#define _Application_get_ActiveSettings(This,settings)	\
    ( (This)->lpVtbl -> get_ActiveSettings(This,settings) ) 

#define _Application_get_ActiveCharacterDictionaries(This,dicts)	\
    ( (This)->lpVtbl -> get_ActiveCharacterDictionaries(This,dicts) ) 

#define _Application_get_ActiveColorDictionaries(This,dicts)	\
    ( (This)->lpVtbl -> get_ActiveColorDictionaries(This,dicts) ) 

#define _Application_get_ActiveExceptionDictionaries(This,dicts)	\
    ( (This)->lpVtbl -> get_ActiveExceptionDictionaries(This,dicts) ) 

#define _Application_get_ActiveGraphicDictionaries(This,dicts)	\
    ( (This)->lpVtbl -> get_ActiveGraphicDictionaries(This,dicts) ) 

#define _Application_get_ActiveKeyLabelDictionaries(This,dicts)	\
    ( (This)->lpVtbl -> get_ActiveKeyLabelDictionaries(This,dicts) ) 

#define _Application_get_FullName(This,fullName)	\
    ( (This)->lpVtbl -> get_FullName(This,fullName) ) 

#define _Application_get_Name(This,name)	\
    ( (This)->lpVtbl -> get_Name(This,name) ) 

#define _Application_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define _Application_get_BrailleDisplays(This,display)	\
    ( (This)->lpVtbl -> get_BrailleDisplays(This,display) ) 

#define _Application_get_CurrentLanguage(This,lang)	\
    ( (This)->lpVtbl -> get_CurrentLanguage(This,lang) ) 

#define _Application_get_Clips(This,RealTime,clips)	\
    ( (This)->lpVtbl -> get_Clips(This,RealTime,clips) ) 

#define _Application_get_SerialNumber(This,serial)	\
    ( (This)->lpVtbl -> get_SerialNumber(This,serial) ) 

#define _Application_get_UserName(This,username)	\
    ( (This)->lpVtbl -> get_UserName(This,username) ) 

#define _Application_get_CompanyName(This,companyname)	\
    ( (This)->lpVtbl -> get_CompanyName(This,companyname) ) 

#define _Application_get_Version(This,weversion)	\
    ( (This)->lpVtbl -> get_Version(This,weversion) ) 

#define _Application_get_ReleaseDate(This,date)	\
    ( (This)->lpVtbl -> get_ReleaseDate(This,date) ) 

#define _Application_get_DesktopWindow(This,window)	\
    ( (This)->lpVtbl -> get_DesktopWindow(This,window) ) 

#define _Application_get_SharedObjects(This,sharedObjects)	\
    ( (This)->lpVtbl -> get_SharedObjects(This,sharedObjects) ) 

#define _Application_get_ClientInformation(This,clientInformation)	\
    ( (This)->lpVtbl -> get_ClientInformation(This,clientInformation) ) 

#define _Application_get_WECursor(This,weCursor)	\
    ( (This)->lpVtbl -> get_WECursor(This,weCursor) ) 

#define _Application_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define _Application_get_ActiveMDIChild(This,child)	\
    ( (This)->lpVtbl -> get_ActiveMDIChild(This,child) ) 

#define _Application_get_Screen(This,Screen)	\
    ( (This)->lpVtbl -> get_Screen(This,Screen) ) 

#define _Application_get_Synthesizers(This,synthesizers)	\
    ( (This)->lpVtbl -> get_Synthesizers(This,synthesizers) ) 

#define _Application_get_Highlight(This,RealTime,clips)	\
    ( (This)->lpVtbl -> get_Highlight(This,RealTime,clips) ) 

#define _Application_get_IniFile(This,file,iniFile)	\
    ( (This)->lpVtbl -> get_IniFile(This,file,iniFile) ) 

#define _Application_get_Speech(This,speech)	\
    ( (This)->lpVtbl -> get_Speech(This,speech) ) 

#define _Application_get_MSAAEventSource(This,msaa)	\
    ( (This)->lpVtbl -> get_MSAAEventSource(This,msaa) ) 

#define _Application_get_TickCount(This,prop)	\
    ( (This)->lpVtbl -> get_TickCount(This,prop) ) 

#define _Application_get_Clipboard(This,ClipBoard)	\
    ( (This)->lpVtbl -> get_Clipboard(This,ClipBoard) ) 

#define _Application_get_ActiveCursorType(This,type)	\
    ( (This)->lpVtbl -> get_ActiveCursorType(This,type) ) 

#define _Application_put_ActiveCursorType(This,type)	\
    ( (This)->lpVtbl -> put_ActiveCursorType(This,type) ) 

#define _Application_get_BrowseMode(This,browseMode)	\
    ( (This)->lpVtbl -> get_BrowseMode(This,browseMode) ) 

#define _Application_get_WEDialogs(This,weDialogs)	\
    ( (This)->lpVtbl -> get_WEDialogs(This,weDialogs) ) 

#define _Application_get_Braille(This,braille)	\
    ( (This)->lpVtbl -> get_Braille(This,braille) ) 

#define _Application_get_OSVersion(This,obj)	\
    ( (This)->lpVtbl -> get_OSVersion(This,obj) ) 

#define _Application_Quit(This)	\
    ( (This)->lpVtbl -> Quit(This) ) 

#define _Application_PixelColor(This,point,color)	\
    ( (This)->lpVtbl -> PixelColor(This,point,color) ) 

#define _Application_Color(This,Red,Green,Blue,color)	\
    ( (This)->lpVtbl -> Color(This,Red,Green,Blue,color) ) 

#define _Application_ScreenPoint(This,x,y,sPoint)	\
    ( (This)->lpVtbl -> ScreenPoint(This,x,y,sPoint) ) 

#define _Application_ScreenRectangle(This,left,top,right,bottom,sRect)	\
    ( (This)->lpVtbl -> ScreenRectangle(This,left,top,right,bottom,sRect) ) 

#define _Application_ExecuteHotkey(This,hotkey,KeyAction)	\
    ( (This)->lpVtbl -> ExecuteHotkey(This,hotkey,KeyAction) ) 

#define _Application_ClientIdentify(This,script)	\
    ( (This)->lpVtbl -> ClientIdentify(This,script) ) 

#define _Application_ExecuteBrailleHotkey(This,hotkey)	\
    ( (This)->lpVtbl -> ExecuteBrailleHotkey(This,hotkey) ) 

#define _Application_Dialog(This,xmlName,dialogName,eventHandler,parameter,parentWindow,dialog)	\
    ( (This)->lpVtbl -> Dialog(This,xmlName,dialogName,eventHandler,parameter,parentWindow,dialog) ) 

#define _Application_Strings(This,xmlName,dictionary)	\
    ( (This)->lpVtbl -> Strings(This,xmlName,dictionary) ) 

#define _Application_PlaySound(This,sound)	\
    ( (This)->lpVtbl -> PlaySound(This,sound) ) 

#define _Application_GetSystemMetric(This,Metric,Result)	\
    ( (This)->lpVtbl -> GetSystemMetric(This,Metric,Result) ) 

#define _Application_StartScript(This,ScriptName)	\
    ( (This)->lpVtbl -> StartScript(This,ScriptName) ) 

#define _Application_get_RunInSystemTray(This,prop)	\
    ( (This)->lpVtbl -> get_RunInSystemTray(This,prop) ) 

#define _Application_get_StartupOptions(This,startupOptions)	\
    ( (This)->lpVtbl -> get_StartupOptions(This,startupOptions) ) 

#define _Application_get_WEPM(This,WEPMFile,Wepm)	\
    ( (This)->lpVtbl -> get_WEPM(This,WEPMFile,Wepm) ) 

#define _Application_get_Profiles(This,profiles)	\
    ( (This)->lpVtbl -> get_Profiles(This,profiles) ) 

#define _Application_get_Utilities(This,utilities)	\
    ( (This)->lpVtbl -> get_Utilities(This,utilities) ) 

#define _Application_get_ReadToEndActive(This,readToEndActive)	\
    ( (This)->lpVtbl -> get_ReadToEndActive(This,readToEndActive) ) 

#define _Application_RefreshSets(This)	\
    ( (This)->lpVtbl -> RefreshSets(This) ) 

#define _Application_Menu(This,xmlName,MenuName,eventHandler,parameter,Menu)	\
    ( (This)->lpVtbl -> Menu(This,xmlName,MenuName,eventHandler,parameter,Menu) ) 

#define _Application_get_CurrentLocaleID(This,LocaleID)	\
    ( (This)->lpVtbl -> get_CurrentLocaleID(This,LocaleID) ) 

#define _Application_get_CopyProtection(This,protection)	\
    ( (This)->lpVtbl -> get_CopyProtection(This,protection) ) 

#define _Application_get_MenuActive(This,menuActiveStatus)	\
    ( (This)->lpVtbl -> get_MenuActive(This,menuActiveStatus) ) 

#define _Application_get_LicenseType(This,licenseType)	\
    ( (This)->lpVtbl -> get_LicenseType(This,licenseType) ) 

#define _Application_AttachWindowMessage(This,function,message,filterBy,includeChildren,functionParameter,windowMessage)	\
    ( (This)->lpVtbl -> AttachWindowMessage(This,function,message,filterBy,includeChildren,functionParameter,windowMessage) ) 

#define _Application_put_RunInSystemTray(This,prop)	\
    ( (This)->lpVtbl -> put_RunInSystemTray(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Application_INTERFACE_DEFINED__ */


#ifndef ___Mouse_INTERFACE_DEFINED__
#define ___Mouse_INTERFACE_DEFINED__

/* interface _Mouse */
/* [object][version][helpstring][helpcontext][hidden][dual][uuid] */ 


EXTERN_C const IID IID__Mouse;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c065c0a0-1e67-49f3-bbdd-3e0a9fdd5eda")
    _Mouse : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ ScreenPoint **point) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ ScreenPoint *point) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BoundingRectangle( 
            /* [retval][out] */ ScreenRectangle **boundary) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Pointer( 
            /* [retval][out] */ _MousePointer **pointer) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftButtonState( 
            /* [retval][out] */ VARIANT_BOOL *state) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MiddleButtonState( 
            /* [retval][out] */ VARIANT_BOOL *state) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RightButtonState( 
            /* [retval][out] */ VARIANT_BOOL *state) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ButtonDown( 
            /* [in] */ MouseButton button) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ButtonUp( 
            /* [in] */ MouseButton button) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Click( 
            /* [in] */ MouseButton button,
            /* [in] */ short count) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToFocus( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DisplaySearchDialog( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ContinueSearch( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Sync( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ButtonDownEx( 
            /* [in] */ VARIANT Button,
            /* [in] */ VARIANT KeyboardModifiers) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClickEx( 
            /* [in] */ VARIANT Button,
            /* [in] */ VARIANT ClickCount,
            /* [in] */ VARIANT KeyboardModifiers) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _MouseVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Mouse * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Mouse * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Mouse * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Mouse * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Mouse * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Mouse * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Mouse * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Mouse * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Mouse * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _Mouse * This,
            /* [retval][out] */ ScreenPoint **point);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            _Mouse * This,
            /* [in] */ ScreenPoint *point);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingRectangle )( 
            _Mouse * This,
            /* [retval][out] */ ScreenRectangle **boundary);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pointer )( 
            _Mouse * This,
            /* [retval][out] */ _MousePointer **pointer);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _Mouse * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonState )( 
            _Mouse * This,
            /* [retval][out] */ VARIANT_BOOL *state);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MiddleButtonState )( 
            _Mouse * This,
            /* [retval][out] */ VARIANT_BOOL *state);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonState )( 
            _Mouse * This,
            /* [retval][out] */ VARIANT_BOOL *state);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ButtonDown )( 
            _Mouse * This,
            /* [in] */ MouseButton button);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ButtonUp )( 
            _Mouse * This,
            /* [in] */ MouseButton button);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Click )( 
            _Mouse * This,
            /* [in] */ MouseButton button,
            /* [in] */ short count);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ToFocus )( 
            _Mouse * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DisplaySearchDialog )( 
            _Mouse * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ContinueSearch )( 
            _Mouse * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Sync )( 
            _Mouse * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ButtonDownEx )( 
            _Mouse * This,
            /* [in] */ VARIANT Button,
            /* [in] */ VARIANT KeyboardModifiers);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClickEx )( 
            _Mouse * This,
            /* [in] */ VARIANT Button,
            /* [in] */ VARIANT ClickCount,
            /* [in] */ VARIANT KeyboardModifiers);
        
        END_INTERFACE
    } _MouseVtbl;

    interface _Mouse
    {
        CONST_VTBL struct _MouseVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Mouse_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Mouse_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Mouse_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Mouse_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Mouse_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Mouse_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Mouse_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Mouse_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _Mouse_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Mouse_get_Position(This,point)	\
    ( (This)->lpVtbl -> get_Position(This,point) ) 

#define _Mouse_put_Position(This,point)	\
    ( (This)->lpVtbl -> put_Position(This,point) ) 

#define _Mouse_get_BoundingRectangle(This,boundary)	\
    ( (This)->lpVtbl -> get_BoundingRectangle(This,boundary) ) 

#define _Mouse_get_Pointer(This,pointer)	\
    ( (This)->lpVtbl -> get_Pointer(This,pointer) ) 

#define _Mouse_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _Mouse_get_LeftButtonState(This,state)	\
    ( (This)->lpVtbl -> get_LeftButtonState(This,state) ) 

#define _Mouse_get_MiddleButtonState(This,state)	\
    ( (This)->lpVtbl -> get_MiddleButtonState(This,state) ) 

#define _Mouse_get_RightButtonState(This,state)	\
    ( (This)->lpVtbl -> get_RightButtonState(This,state) ) 

#define _Mouse_ButtonDown(This,button)	\
    ( (This)->lpVtbl -> ButtonDown(This,button) ) 

#define _Mouse_ButtonUp(This,button)	\
    ( (This)->lpVtbl -> ButtonUp(This,button) ) 

#define _Mouse_Click(This,button,count)	\
    ( (This)->lpVtbl -> Click(This,button,count) ) 

#define _Mouse_ToFocus(This)	\
    ( (This)->lpVtbl -> ToFocus(This) ) 

#define _Mouse_DisplaySearchDialog(This)	\
    ( (This)->lpVtbl -> DisplaySearchDialog(This) ) 

#define _Mouse_ContinueSearch(This)	\
    ( (This)->lpVtbl -> ContinueSearch(This) ) 

#define _Mouse_Sync(This)	\
    ( (This)->lpVtbl -> Sync(This) ) 

#define _Mouse_ButtonDownEx(This,Button,KeyboardModifiers)	\
    ( (This)->lpVtbl -> ButtonDownEx(This,Button,KeyboardModifiers) ) 

#define _Mouse_ClickEx(This,Button,ClickCount,KeyboardModifiers)	\
    ( (This)->lpVtbl -> ClickEx(This,Button,ClickCount,KeyboardModifiers) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Mouse_INTERFACE_DEFINED__ */


#ifndef ___Window_INTERFACE_DEFINED__
#define ___Window_INTERFACE_DEFINED__

/* interface _Window */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__Window;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("138e1f63-840e-4e85-898e-14e19842c754")
    _Window : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ long *Handle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rectangle( 
            /* [retval][out] */ WindowRectangle **Rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rectangle( 
            /* [in] */ VARIANT Rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WindowType *Type) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ WindowType Type) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OriginalType( 
            /* [retval][out] */ WindowType *OriginalType) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DirectChildren( 
            /* [retval][out] */ Windows **directChildren) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ Windows **children) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Overlap( 
            /* [retval][out] */ _Window **Overlap) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ WindowStyle **Style) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CaretWidth( 
            /* [retval][out] */ long *Width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClassName( 
            /* [retval][out] */ BSTR *className) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OriginalClassName( 
            /* [retval][out] */ BSTR *className) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ModuleName( 
            /* [retval][out] */ BSTR *moduleName) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Desktop( 
            /* [retval][out] */ Desktop **desktop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Process( 
            /* [retval][out] */ Process **process) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClientArea( 
            /* [retval][out] */ ClientRectangle **rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *Title) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ WindowStatus *Status) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Status( 
            /* [in] */ WindowStatus Status) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SetFileName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [optional][in] */ VARIANT RealTime,
            /* [retval][out] */ Clips **Selection) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FieldData( 
            /* [retval][out] */ BSTR *Data) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FieldName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Accessible( 
            /* [optional][in] */ VARIANT objectID,
            /* [retval][out] */ Accessible **accessible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentUserWindowID( 
            /* [retval][out] */ long *uwin) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CurrentUserWindowID( 
            /* [in] */ long uwin) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentHyperactiveWindowID( 
            /* [retval][out] */ BSTR *hwin) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CurrentHyperactiveWindowID( 
            /* [in] */ BSTR hwin) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NativeObjectModel( 
            /* [retval][out] */ IDispatch **objectModel) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AlwaysOnTop( 
            /* [retval][out] */ VARIANT_BOOL *topmost) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AlwaysOnTop( 
            /* [in] */ VARIANT_BOOL topmost) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Settings( 
            /* [retval][out] */ SetFile **settings) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsValid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OnScreenVisibility( 
            /* [retval][out] */ OnScreenVisibility *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FormatAlertOffset( 
            /* [retval][out] */ WindowPoint **offset) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FormatAlertOffset( 
            /* [in] */ WindowPoint *offset) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clips( 
            /* [optional][in] */ VARIANT IncludeChildren,
            /* [optional][in] */ VARIANT RealTime,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowPoint( 
            /* [in] */ long X,
            /* [in] */ long Y,
            /* [retval][out] */ WindowPoint **Point) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowRectangle( 
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom,
            /* [retval][out] */ WindowRectangle **Rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClientPoint( 
            /* [in] */ long X,
            /* [in] */ long Y,
            /* [retval][out] */ ClientPoint **Point) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClientRectangle( 
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom,
            /* [retval][out] */ ClientRectangle **Rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Control( 
            /* [optional][in] */ VARIANT id,
            /* [retval][out] */ IDispatch **control) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Focus( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SendMessage( 
            /* [in] */ long message,
            /* [in] */ VARIANT wParam,
            /* [in] */ VARIANT lParam,
            /* [retval][out] */ long *result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PostMessage( 
            /* [in] */ long message,
            /* [in] */ long wParam,
            /* [in] */ long lParam) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Redraw( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadSet( 
            /* [in] */ BSTR SetFileName,
            /* [retval][out] */ VARIANT_BOOL *Success) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Settings2( 
            /* [retval][out] */ Settings2 **settings) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _WindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Window * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Window * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Window * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Window * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Window * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Window * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Window * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Window * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Window * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _Window * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            _Window * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            _Window * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            _Window * This,
            /* [retval][out] */ long *Handle);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rectangle )( 
            _Window * This,
            /* [retval][out] */ WindowRectangle **Rectangle);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rectangle )( 
            _Window * This,
            /* [in] */ VARIANT Rectangle);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            _Window * This,
            /* [retval][out] */ WindowType *Type);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            _Window * This,
            /* [in] */ WindowType Type);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginalType )( 
            _Window * This,
            /* [retval][out] */ WindowType *OriginalType);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DirectChildren )( 
            _Window * This,
            /* [retval][out] */ Windows **directChildren);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            _Window * This,
            /* [retval][out] */ Windows **children);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Overlap )( 
            _Window * This,
            /* [retval][out] */ _Window **Overlap);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            _Window * This,
            /* [retval][out] */ WindowStyle **Style);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CaretWidth )( 
            _Window * This,
            /* [retval][out] */ long *Width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _Window * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassName )( 
            _Window * This,
            /* [retval][out] */ BSTR *className);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginalClassName )( 
            _Window * This,
            /* [retval][out] */ BSTR *className);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ModuleName )( 
            _Window * This,
            /* [retval][out] */ BSTR *moduleName);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Desktop )( 
            _Window * This,
            /* [retval][out] */ Desktop **desktop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Process )( 
            _Window * This,
            /* [retval][out] */ Process **process);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientArea )( 
            _Window * This,
            /* [retval][out] */ ClientRectangle **rectangle);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            _Window * This,
            /* [retval][out] */ BSTR *Title);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            _Window * This,
            /* [retval][out] */ WindowStatus *Status);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Status )( 
            _Window * This,
            /* [in] */ WindowStatus Status);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SetFileName )( 
            _Window * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            _Window * This,
            /* [optional][in] */ VARIANT RealTime,
            /* [retval][out] */ Clips **Selection);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FieldData )( 
            _Window * This,
            /* [retval][out] */ BSTR *Data);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FieldName )( 
            _Window * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Accessible )( 
            _Window * This,
            /* [optional][in] */ VARIANT objectID,
            /* [retval][out] */ Accessible **accessible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentUserWindowID )( 
            _Window * This,
            /* [retval][out] */ long *uwin);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentUserWindowID )( 
            _Window * This,
            /* [in] */ long uwin);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentHyperactiveWindowID )( 
            _Window * This,
            /* [retval][out] */ BSTR *hwin);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentHyperactiveWindowID )( 
            _Window * This,
            /* [in] */ BSTR hwin);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NativeObjectModel )( 
            _Window * This,
            /* [retval][out] */ IDispatch **objectModel);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlwaysOnTop )( 
            _Window * This,
            /* [retval][out] */ VARIANT_BOOL *topmost);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlwaysOnTop )( 
            _Window * This,
            /* [in] */ VARIANT_BOOL topmost);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Settings )( 
            _Window * This,
            /* [retval][out] */ SetFile **settings);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsValid )( 
            _Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OnScreenVisibility )( 
            _Window * This,
            /* [retval][out] */ OnScreenVisibility *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FormatAlertOffset )( 
            _Window * This,
            /* [retval][out] */ WindowPoint **offset);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FormatAlertOffset )( 
            _Window * This,
            /* [in] */ WindowPoint *offset);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clips )( 
            _Window * This,
            /* [optional][in] */ VARIANT IncludeChildren,
            /* [optional][in] */ VARIANT RealTime,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowPoint )( 
            _Window * This,
            /* [in] */ long X,
            /* [in] */ long Y,
            /* [retval][out] */ WindowPoint **Point);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowRectangle )( 
            _Window * This,
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom,
            /* [retval][out] */ WindowRectangle **Rectangle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClientPoint )( 
            _Window * This,
            /* [in] */ long X,
            /* [in] */ long Y,
            /* [retval][out] */ ClientPoint **Point);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClientRectangle )( 
            _Window * This,
            /* [in] */ long Left,
            /* [in] */ long Top,
            /* [in] */ long Right,
            /* [in] */ long Bottom,
            /* [retval][out] */ ClientRectangle **Rectangle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Control )( 
            _Window * This,
            /* [optional][in] */ VARIANT id,
            /* [retval][out] */ IDispatch **control);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            _Window * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            _Window * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            _Window * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SendMessage )( 
            _Window * This,
            /* [in] */ long message,
            /* [in] */ VARIANT wParam,
            /* [in] */ VARIANT lParam,
            /* [retval][out] */ long *result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PostMessage )( 
            _Window * This,
            /* [in] */ long message,
            /* [in] */ long wParam,
            /* [in] */ long lParam);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Redraw )( 
            _Window * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadSet )( 
            _Window * This,
            /* [in] */ BSTR SetFileName,
            /* [retval][out] */ VARIANT_BOOL *Success);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Settings2 )( 
            _Window * This,
            /* [retval][out] */ Settings2 **settings);
        
        END_INTERFACE
    } _WindowVtbl;

    interface _Window
    {
        CONST_VTBL struct _WindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Window_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Window_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Window_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Window_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Window_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Window_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Window_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Window_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _Window_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Window_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define _Window_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define _Window_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define _Window_get_Handle(This,Handle)	\
    ( (This)->lpVtbl -> get_Handle(This,Handle) ) 

#define _Window_get_Rectangle(This,Rectangle)	\
    ( (This)->lpVtbl -> get_Rectangle(This,Rectangle) ) 

#define _Window_put_Rectangle(This,Rectangle)	\
    ( (This)->lpVtbl -> put_Rectangle(This,Rectangle) ) 

#define _Window_get_Type(This,Type)	\
    ( (This)->lpVtbl -> get_Type(This,Type) ) 

#define _Window_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define _Window_get_OriginalType(This,OriginalType)	\
    ( (This)->lpVtbl -> get_OriginalType(This,OriginalType) ) 

#define _Window_get_DirectChildren(This,directChildren)	\
    ( (This)->lpVtbl -> get_DirectChildren(This,directChildren) ) 

#define _Window_get_Children(This,children)	\
    ( (This)->lpVtbl -> get_Children(This,children) ) 

#define _Window_get_Overlap(This,Overlap)	\
    ( (This)->lpVtbl -> get_Overlap(This,Overlap) ) 

#define _Window_get_Style(This,Style)	\
    ( (This)->lpVtbl -> get_Style(This,Style) ) 

#define _Window_get_CaretWidth(This,Width)	\
    ( (This)->lpVtbl -> get_CaretWidth(This,Width) ) 

#define _Window_get_Name(This,Name)	\
    ( (This)->lpVtbl -> get_Name(This,Name) ) 

#define _Window_get_ClassName(This,className)	\
    ( (This)->lpVtbl -> get_ClassName(This,className) ) 

#define _Window_get_OriginalClassName(This,className)	\
    ( (This)->lpVtbl -> get_OriginalClassName(This,className) ) 

#define _Window_get_ModuleName(This,moduleName)	\
    ( (This)->lpVtbl -> get_ModuleName(This,moduleName) ) 

#define _Window_get_Desktop(This,desktop)	\
    ( (This)->lpVtbl -> get_Desktop(This,desktop) ) 

#define _Window_get_Process(This,process)	\
    ( (This)->lpVtbl -> get_Process(This,process) ) 

#define _Window_get_ClientArea(This,rectangle)	\
    ( (This)->lpVtbl -> get_ClientArea(This,rectangle) ) 

#define _Window_get_Title(This,Title)	\
    ( (This)->lpVtbl -> get_Title(This,Title) ) 

#define _Window_get_Status(This,Status)	\
    ( (This)->lpVtbl -> get_Status(This,Status) ) 

#define _Window_put_Status(This,Status)	\
    ( (This)->lpVtbl -> put_Status(This,Status) ) 

#define _Window_get_SetFileName(This,name)	\
    ( (This)->lpVtbl -> get_SetFileName(This,name) ) 

#define _Window_get_Selection(This,RealTime,Selection)	\
    ( (This)->lpVtbl -> get_Selection(This,RealTime,Selection) ) 

#define _Window_get_FieldData(This,Data)	\
    ( (This)->lpVtbl -> get_FieldData(This,Data) ) 

#define _Window_get_FieldName(This,Name)	\
    ( (This)->lpVtbl -> get_FieldName(This,Name) ) 

#define _Window_get_Accessible(This,objectID,accessible)	\
    ( (This)->lpVtbl -> get_Accessible(This,objectID,accessible) ) 

#define _Window_get_CurrentUserWindowID(This,uwin)	\
    ( (This)->lpVtbl -> get_CurrentUserWindowID(This,uwin) ) 

#define _Window_put_CurrentUserWindowID(This,uwin)	\
    ( (This)->lpVtbl -> put_CurrentUserWindowID(This,uwin) ) 

#define _Window_get_CurrentHyperactiveWindowID(This,hwin)	\
    ( (This)->lpVtbl -> get_CurrentHyperactiveWindowID(This,hwin) ) 

#define _Window_put_CurrentHyperactiveWindowID(This,hwin)	\
    ( (This)->lpVtbl -> put_CurrentHyperactiveWindowID(This,hwin) ) 

#define _Window_get_NativeObjectModel(This,objectModel)	\
    ( (This)->lpVtbl -> get_NativeObjectModel(This,objectModel) ) 

#define _Window_get_AlwaysOnTop(This,topmost)	\
    ( (This)->lpVtbl -> get_AlwaysOnTop(This,topmost) ) 

#define _Window_put_AlwaysOnTop(This,topmost)	\
    ( (This)->lpVtbl -> put_AlwaysOnTop(This,topmost) ) 

#define _Window_get_Settings(This,settings)	\
    ( (This)->lpVtbl -> get_Settings(This,settings) ) 

#define _Window_get_IsValid(This,prop)	\
    ( (This)->lpVtbl -> get_IsValid(This,prop) ) 

#define _Window_get_OnScreenVisibility(This,prop)	\
    ( (This)->lpVtbl -> get_OnScreenVisibility(This,prop) ) 

#define _Window_get_FormatAlertOffset(This,offset)	\
    ( (This)->lpVtbl -> get_FormatAlertOffset(This,offset) ) 

#define _Window_put_FormatAlertOffset(This,offset)	\
    ( (This)->lpVtbl -> put_FormatAlertOffset(This,offset) ) 

#define _Window_Clips(This,IncludeChildren,RealTime,clips)	\
    ( (This)->lpVtbl -> Clips(This,IncludeChildren,RealTime,clips) ) 

#define _Window_WindowPoint(This,X,Y,Point)	\
    ( (This)->lpVtbl -> WindowPoint(This,X,Y,Point) ) 

#define _Window_WindowRectangle(This,Left,Top,Right,Bottom,Rectangle)	\
    ( (This)->lpVtbl -> WindowRectangle(This,Left,Top,Right,Bottom,Rectangle) ) 

#define _Window_ClientPoint(This,X,Y,Point)	\
    ( (This)->lpVtbl -> ClientPoint(This,X,Y,Point) ) 

#define _Window_ClientRectangle(This,Left,Top,Right,Bottom,Rectangle)	\
    ( (This)->lpVtbl -> ClientRectangle(This,Left,Top,Right,Bottom,Rectangle) ) 

#define _Window_Control(This,id,control)	\
    ( (This)->lpVtbl -> Control(This,id,control) ) 

#define _Window_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define _Window_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define _Window_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define _Window_SendMessage(This,message,wParam,lParam,result)	\
    ( (This)->lpVtbl -> SendMessage(This,message,wParam,lParam,result) ) 

#define _Window_PostMessage(This,message,wParam,lParam)	\
    ( (This)->lpVtbl -> PostMessage(This,message,wParam,lParam) ) 

#define _Window_Redraw(This)	\
    ( (This)->lpVtbl -> Redraw(This) ) 

#define _Window_LoadSet(This,SetFileName,Success)	\
    ( (This)->lpVtbl -> LoadSet(This,SetFileName,Success) ) 

#define _Window_get_Settings2(This,settings)	\
    ( (This)->lpVtbl -> get_Settings2(This,settings) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Window_INTERFACE_DEFINED__ */


#ifndef ___WindowEvents_INTERFACE_DEFINED__
#define ___WindowEvents_INTERFACE_DEFINED__

/* interface _WindowEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__WindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("17369702-dcc0-4588-883d-f77d1bdc3868")
    _WindowEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnActivate( 
            /* [in] */ _Window *Window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChildActivate( 
            /* [in] */ _Window *ChildWindow) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnDeactivate( 
            /* [in] */ _Window *Window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChildDeactivate( 
            /* [in] */ _Window *ChildWindow) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnFocus( 
            /* [in] */ _Window *Window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChildFocus( 
            /* [in] */ _Window *ChildWindow) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnBlur( 
            /* [in] */ _Window *Window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChildBlur( 
            /* [in] */ _Window *ChildWindow) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnClose( 
            /* [in] */ long Handle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChildClose( 
            /* [in] */ long Handle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChildCreate( 
            /* [in] */ _Window *ChildWindow) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnFieldName( 
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldName) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChildFieldName( 
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldName) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnFieldData( 
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldData) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChildFieldData( 
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldData) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSummary( 
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldData) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChildSummary( 
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldData) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSelection( 
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *Selection) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChildSelection( 
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *Selection) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnBeforeSelect( 
            /* [in] */ _Window *window,
            /* [retval][out] */ VARIANT_BOOL *saved) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnAfterSelect( 
            /* [in] */ _Window *window,
            /* [out] */ BSTR *selected,
            /* [out] */ BSTR *deselected,
            /* [retval][out] */ VARIANT_BOOL *valid) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnBeforeChildSelect( 
            /* [in] */ _Window *window,
            /* [retval][out] */ VARIANT_BOOL *saved) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnAfterChildSelect( 
            /* [in] */ _Window *window,
            /* [out] */ BSTR *selected,
            /* [out] */ BSTR *deselected,
            /* [retval][out] */ VARIANT_BOOL *valid) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnClipRendered( 
            /* [in] */ Clip *clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChildClipRendered( 
            /* [in] */ Clip *clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnMDIActivate( 
            /* [in] */ _Window *window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnMDIDeactivate( 
            /* [in] */ _Window *window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnMDIChildActivate( 
            /* [in] */ _Window *window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnMDIChildDeactivate( 
            /* [in] */ _Window *window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnMenuOpened( 
            /* [in] */ VARIANT_BOOL IsContextMenu) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnMenuClosed( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnMenuSelection( 
            BSTR Text,
            BSTR Shortcut,
            BSTR Accelerator,
            MenuFlags Flags) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _WindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnActivate )( 
            _WindowEvents * This,
            /* [in] */ _Window *Window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChildActivate )( 
            _WindowEvents * This,
            /* [in] */ _Window *ChildWindow);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnDeactivate )( 
            _WindowEvents * This,
            /* [in] */ _Window *Window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChildDeactivate )( 
            _WindowEvents * This,
            /* [in] */ _Window *ChildWindow);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnFocus )( 
            _WindowEvents * This,
            /* [in] */ _Window *Window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChildFocus )( 
            _WindowEvents * This,
            /* [in] */ _Window *ChildWindow);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnBlur )( 
            _WindowEvents * This,
            /* [in] */ _Window *Window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChildBlur )( 
            _WindowEvents * This,
            /* [in] */ _Window *ChildWindow);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnClose )( 
            _WindowEvents * This,
            /* [in] */ long Handle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChildClose )( 
            _WindowEvents * This,
            /* [in] */ long Handle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChildCreate )( 
            _WindowEvents * This,
            /* [in] */ _Window *ChildWindow);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnFieldName )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldName);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChildFieldName )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldName);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnFieldData )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldData);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChildFieldData )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldData);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSummary )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldData);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChildSummary )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *FieldData);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSelection )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *Selection);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChildSelection )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ BSTR *Selection);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnBeforeSelect )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ VARIANT_BOOL *saved);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnAfterSelect )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [out] */ BSTR *selected,
            /* [out] */ BSTR *deselected,
            /* [retval][out] */ VARIANT_BOOL *valid);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnBeforeChildSelect )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ VARIANT_BOOL *saved);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnAfterChildSelect )( 
            _WindowEvents * This,
            /* [in] */ _Window *window,
            /* [out] */ BSTR *selected,
            /* [out] */ BSTR *deselected,
            /* [retval][out] */ VARIANT_BOOL *valid);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnClipRendered )( 
            _WindowEvents * This,
            /* [in] */ Clip *clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChildClipRendered )( 
            _WindowEvents * This,
            /* [in] */ Clip *clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnMDIActivate )( 
            _WindowEvents * This,
            /* [in] */ _Window *window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnMDIDeactivate )( 
            _WindowEvents * This,
            /* [in] */ _Window *window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnMDIChildActivate )( 
            _WindowEvents * This,
            /* [in] */ _Window *window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnMDIChildDeactivate )( 
            _WindowEvents * This,
            /* [in] */ _Window *window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnMenuOpened )( 
            _WindowEvents * This,
            /* [in] */ VARIANT_BOOL IsContextMenu);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnMenuClosed )( 
            _WindowEvents * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnMenuSelection )( 
            _WindowEvents * This,
            BSTR Text,
            BSTR Shortcut,
            BSTR Accelerator,
            MenuFlags Flags);
        
        END_INTERFACE
    } _WindowEventsVtbl;

    interface _WindowEvents
    {
        CONST_VTBL struct _WindowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _WindowEvents_OnActivate(This,Window)	\
    ( (This)->lpVtbl -> OnActivate(This,Window) ) 

#define _WindowEvents_OnChildActivate(This,ChildWindow)	\
    ( (This)->lpVtbl -> OnChildActivate(This,ChildWindow) ) 

#define _WindowEvents_OnDeactivate(This,Window)	\
    ( (This)->lpVtbl -> OnDeactivate(This,Window) ) 

#define _WindowEvents_OnChildDeactivate(This,ChildWindow)	\
    ( (This)->lpVtbl -> OnChildDeactivate(This,ChildWindow) ) 

#define _WindowEvents_OnFocus(This,Window)	\
    ( (This)->lpVtbl -> OnFocus(This,Window) ) 

#define _WindowEvents_OnChildFocus(This,ChildWindow)	\
    ( (This)->lpVtbl -> OnChildFocus(This,ChildWindow) ) 

#define _WindowEvents_OnBlur(This,Window)	\
    ( (This)->lpVtbl -> OnBlur(This,Window) ) 

#define _WindowEvents_OnChildBlur(This,ChildWindow)	\
    ( (This)->lpVtbl -> OnChildBlur(This,ChildWindow) ) 

#define _WindowEvents_OnClose(This,Handle)	\
    ( (This)->lpVtbl -> OnClose(This,Handle) ) 

#define _WindowEvents_OnChildClose(This,Handle)	\
    ( (This)->lpVtbl -> OnChildClose(This,Handle) ) 

#define _WindowEvents_OnChildCreate(This,ChildWindow)	\
    ( (This)->lpVtbl -> OnChildCreate(This,ChildWindow) ) 

#define _WindowEvents_OnFieldName(This,window,FieldName)	\
    ( (This)->lpVtbl -> OnFieldName(This,window,FieldName) ) 

#define _WindowEvents_OnChildFieldName(This,window,FieldName)	\
    ( (This)->lpVtbl -> OnChildFieldName(This,window,FieldName) ) 

#define _WindowEvents_OnFieldData(This,window,FieldData)	\
    ( (This)->lpVtbl -> OnFieldData(This,window,FieldData) ) 

#define _WindowEvents_OnChildFieldData(This,window,FieldData)	\
    ( (This)->lpVtbl -> OnChildFieldData(This,window,FieldData) ) 

#define _WindowEvents_OnSummary(This,window,FieldData)	\
    ( (This)->lpVtbl -> OnSummary(This,window,FieldData) ) 

#define _WindowEvents_OnChildSummary(This,window,FieldData)	\
    ( (This)->lpVtbl -> OnChildSummary(This,window,FieldData) ) 

#define _WindowEvents_OnSelection(This,window,Selection)	\
    ( (This)->lpVtbl -> OnSelection(This,window,Selection) ) 

#define _WindowEvents_OnChildSelection(This,window,Selection)	\
    ( (This)->lpVtbl -> OnChildSelection(This,window,Selection) ) 

#define _WindowEvents_OnBeforeSelect(This,window,saved)	\
    ( (This)->lpVtbl -> OnBeforeSelect(This,window,saved) ) 

#define _WindowEvents_OnAfterSelect(This,window,selected,deselected,valid)	\
    ( (This)->lpVtbl -> OnAfterSelect(This,window,selected,deselected,valid) ) 

#define _WindowEvents_OnBeforeChildSelect(This,window,saved)	\
    ( (This)->lpVtbl -> OnBeforeChildSelect(This,window,saved) ) 

#define _WindowEvents_OnAfterChildSelect(This,window,selected,deselected,valid)	\
    ( (This)->lpVtbl -> OnAfterChildSelect(This,window,selected,deselected,valid) ) 

#define _WindowEvents_OnClipRendered(This,clip)	\
    ( (This)->lpVtbl -> OnClipRendered(This,clip) ) 

#define _WindowEvents_OnChildClipRendered(This,clip)	\
    ( (This)->lpVtbl -> OnChildClipRendered(This,clip) ) 

#define _WindowEvents_OnMDIActivate(This,window)	\
    ( (This)->lpVtbl -> OnMDIActivate(This,window) ) 

#define _WindowEvents_OnMDIDeactivate(This,window)	\
    ( (This)->lpVtbl -> OnMDIDeactivate(This,window) ) 

#define _WindowEvents_OnMDIChildActivate(This,window)	\
    ( (This)->lpVtbl -> OnMDIChildActivate(This,window) ) 

#define _WindowEvents_OnMDIChildDeactivate(This,window)	\
    ( (This)->lpVtbl -> OnMDIChildDeactivate(This,window) ) 

#define _WindowEvents_OnMenuOpened(This,IsContextMenu)	\
    ( (This)->lpVtbl -> OnMenuOpened(This,IsContextMenu) ) 

#define _WindowEvents_OnMenuClosed(This)	\
    ( (This)->lpVtbl -> OnMenuClosed(This) ) 

#define _WindowEvents_OnMenuSelection(This,Text,Shortcut,Accelerator,Flags)	\
    ( (This)->lpVtbl -> OnMenuSelection(This,Text,Shortcut,Accelerator,Flags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___WindowEvents_INTERFACE_DEFINED__ */


#ifndef __Windows_INTERFACE_DEFINED__
#define __Windows_INTERFACE_DEFINED__

/* interface Windows */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Windows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("abf05245-9e29-49ff-b6eb-6e8578099578")
    Windows : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ long Handle,
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FilterByClassAndModule( 
            /* [in] */ BSTR ClassName,
            /* [in] */ BSTR ModuleName,
            /* [optional][in] */ VARIANT FilterMatch,
            /* [retval][out] */ Windows **result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FilterByName( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT FilterMatch,
            /* [optional][in] */ VARIANT MatchCase,
            /* [retval][out] */ Windows **result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FilterByType( 
            /* [in] */ WindowType Type,
            /* [retval][out] */ Windows **result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FilterByLocation( 
            /* [in] */ VARIANT Location,
            /* [retval][out] */ Windows **result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FilterByTitle( 
            /* [in] */ BSTR Title,
            /* [optional][in] */ VARIANT FilterMatch,
            /* [optional][in] */ VARIANT MatchCase,
            /* [retval][out] */ Windows **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Windows * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Windows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Windows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Windows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Windows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Windows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Windows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Windows * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Windows * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Windows * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Windows * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Windows * This,
            /* [in] */ long index,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Find )( 
            Windows * This,
            /* [in] */ long Handle,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FilterByClassAndModule )( 
            Windows * This,
            /* [in] */ BSTR ClassName,
            /* [in] */ BSTR ModuleName,
            /* [optional][in] */ VARIANT FilterMatch,
            /* [retval][out] */ Windows **result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FilterByName )( 
            Windows * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT FilterMatch,
            /* [optional][in] */ VARIANT MatchCase,
            /* [retval][out] */ Windows **result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FilterByType )( 
            Windows * This,
            /* [in] */ WindowType Type,
            /* [retval][out] */ Windows **result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FilterByLocation )( 
            Windows * This,
            /* [in] */ VARIANT Location,
            /* [retval][out] */ Windows **result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FilterByTitle )( 
            Windows * This,
            /* [in] */ BSTR Title,
            /* [optional][in] */ VARIANT FilterMatch,
            /* [optional][in] */ VARIANT MatchCase,
            /* [retval][out] */ Windows **result);
        
        END_INTERFACE
    } WindowsVtbl;

    interface Windows
    {
        CONST_VTBL struct WindowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Windows_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Windows_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Windows_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Windows_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Windows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Windows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Windows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Windows_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define Windows_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Windows_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Windows_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define Windows_Item(This,index,window)	\
    ( (This)->lpVtbl -> Item(This,index,window) ) 

#define Windows_Find(This,Handle,window)	\
    ( (This)->lpVtbl -> Find(This,Handle,window) ) 

#define Windows_FilterByClassAndModule(This,ClassName,ModuleName,FilterMatch,result)	\
    ( (This)->lpVtbl -> FilterByClassAndModule(This,ClassName,ModuleName,FilterMatch,result) ) 

#define Windows_FilterByName(This,Name,FilterMatch,MatchCase,result)	\
    ( (This)->lpVtbl -> FilterByName(This,Name,FilterMatch,MatchCase,result) ) 

#define Windows_FilterByType(This,Type,result)	\
    ( (This)->lpVtbl -> FilterByType(This,Type,result) ) 

#define Windows_FilterByLocation(This,Location,result)	\
    ( (This)->lpVtbl -> FilterByLocation(This,Location,result) ) 

#define Windows_FilterByTitle(This,Title,FilterMatch,MatchCase,result)	\
    ( (This)->lpVtbl -> FilterByTitle(This,Title,FilterMatch,MatchCase,result) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Windows_INTERFACE_DEFINED__ */


#ifndef __WindowStyle_INTERFACE_DEFINED__
#define __WindowStyle_INTERFACE_DEFINED__

/* interface WindowStyle */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WindowStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8887ee67-8612-4174-82ed-48b65388b6ce")
    WindowStyle : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ long *style) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ long style) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Overlapped( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Popup( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Child( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Minimize( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Disabled( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClipSiblings( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClipChildren( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Maximize( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DialogFrame( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VerticalScroll( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HorizontalScroll( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SystemMenu( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ThickFrame( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Group( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabStop( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MinimizeBox( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MaximizeBox( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DialogModalFrame( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NoParentNotify( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TopMost( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AcceptFiles( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Transparent( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MDIChild( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ToolWindow( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowEdge( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClientEdge( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ContextHelp( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RTLReading( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LTRReading( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftScrollbar( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RightScrollbar( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ControlParent( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StaticEdge( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ApplicationWindow( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Layered( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NoInheritLayout( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LayoutRTL( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Composited( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NoActivate( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NoPaddedBorder( 
            /* [retval][out] */ VARIANT_BOOL *set) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WindowStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WindowStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WindowStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WindowStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WindowStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WindowStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WindowStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            WindowStyle * This,
            /* [retval][out] */ long *style);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            WindowStyle * This,
            /* [in] */ long style);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WindowStyle * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WindowStyle * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Overlapped )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Popup )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Child )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Minimize )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Disabled )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClipSiblings )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClipChildren )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Maximize )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DialogFrame )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalScroll )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalScroll )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SystemMenu )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThickFrame )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimizeBox )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaximizeBox )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DialogModalFrame )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NoParentNotify )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TopMost )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AcceptFiles )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Transparent )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MDIChild )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ToolWindow )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowEdge )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientEdge )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ContextHelp )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RTLReading )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LTRReading )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftScrollbar )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightScrollbar )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ControlParent )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StaticEdge )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ApplicationWindow )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Layered )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NoInheritLayout )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LayoutRTL )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Composited )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NoActivate )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NoPaddedBorder )( 
            WindowStyle * This,
            /* [retval][out] */ VARIANT_BOOL *set);
        
        END_INTERFACE
    } WindowStyleVtbl;

    interface WindowStyle
    {
        CONST_VTBL struct WindowStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WindowStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WindowStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WindowStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WindowStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WindowStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WindowStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WindowStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WindowStyle_get_Style(This,style)	\
    ( (This)->lpVtbl -> get_Style(This,style) ) 

#define WindowStyle_put_Style(This,style)	\
    ( (This)->lpVtbl -> put_Style(This,style) ) 

#define WindowStyle_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WindowStyle_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WindowStyle_get_Overlapped(This,set)	\
    ( (This)->lpVtbl -> get_Overlapped(This,set) ) 

#define WindowStyle_get_Popup(This,set)	\
    ( (This)->lpVtbl -> get_Popup(This,set) ) 

#define WindowStyle_get_Child(This,set)	\
    ( (This)->lpVtbl -> get_Child(This,set) ) 

#define WindowStyle_get_Minimize(This,set)	\
    ( (This)->lpVtbl -> get_Minimize(This,set) ) 

#define WindowStyle_get_Visible(This,set)	\
    ( (This)->lpVtbl -> get_Visible(This,set) ) 

#define WindowStyle_get_Disabled(This,set)	\
    ( (This)->lpVtbl -> get_Disabled(This,set) ) 

#define WindowStyle_get_ClipSiblings(This,set)	\
    ( (This)->lpVtbl -> get_ClipSiblings(This,set) ) 

#define WindowStyle_get_ClipChildren(This,set)	\
    ( (This)->lpVtbl -> get_ClipChildren(This,set) ) 

#define WindowStyle_get_Maximize(This,set)	\
    ( (This)->lpVtbl -> get_Maximize(This,set) ) 

#define WindowStyle_get_Caption(This,set)	\
    ( (This)->lpVtbl -> get_Caption(This,set) ) 

#define WindowStyle_get_Border(This,set)	\
    ( (This)->lpVtbl -> get_Border(This,set) ) 

#define WindowStyle_get_DialogFrame(This,set)	\
    ( (This)->lpVtbl -> get_DialogFrame(This,set) ) 

#define WindowStyle_get_VerticalScroll(This,set)	\
    ( (This)->lpVtbl -> get_VerticalScroll(This,set) ) 

#define WindowStyle_get_HorizontalScroll(This,set)	\
    ( (This)->lpVtbl -> get_HorizontalScroll(This,set) ) 

#define WindowStyle_get_SystemMenu(This,set)	\
    ( (This)->lpVtbl -> get_SystemMenu(This,set) ) 

#define WindowStyle_get_ThickFrame(This,set)	\
    ( (This)->lpVtbl -> get_ThickFrame(This,set) ) 

#define WindowStyle_get_Group(This,set)	\
    ( (This)->lpVtbl -> get_Group(This,set) ) 

#define WindowStyle_get_TabStop(This,set)	\
    ( (This)->lpVtbl -> get_TabStop(This,set) ) 

#define WindowStyle_get_MinimizeBox(This,set)	\
    ( (This)->lpVtbl -> get_MinimizeBox(This,set) ) 

#define WindowStyle_get_MaximizeBox(This,set)	\
    ( (This)->lpVtbl -> get_MaximizeBox(This,set) ) 

#define WindowStyle_get_DialogModalFrame(This,set)	\
    ( (This)->lpVtbl -> get_DialogModalFrame(This,set) ) 

#define WindowStyle_get_NoParentNotify(This,set)	\
    ( (This)->lpVtbl -> get_NoParentNotify(This,set) ) 

#define WindowStyle_get_TopMost(This,set)	\
    ( (This)->lpVtbl -> get_TopMost(This,set) ) 

#define WindowStyle_get_AcceptFiles(This,set)	\
    ( (This)->lpVtbl -> get_AcceptFiles(This,set) ) 

#define WindowStyle_get_Transparent(This,set)	\
    ( (This)->lpVtbl -> get_Transparent(This,set) ) 

#define WindowStyle_get_MDIChild(This,set)	\
    ( (This)->lpVtbl -> get_MDIChild(This,set) ) 

#define WindowStyle_get_ToolWindow(This,set)	\
    ( (This)->lpVtbl -> get_ToolWindow(This,set) ) 

#define WindowStyle_get_WindowEdge(This,set)	\
    ( (This)->lpVtbl -> get_WindowEdge(This,set) ) 

#define WindowStyle_get_ClientEdge(This,set)	\
    ( (This)->lpVtbl -> get_ClientEdge(This,set) ) 

#define WindowStyle_get_ContextHelp(This,set)	\
    ( (This)->lpVtbl -> get_ContextHelp(This,set) ) 

#define WindowStyle_get_Right(This,set)	\
    ( (This)->lpVtbl -> get_Right(This,set) ) 

#define WindowStyle_get_Left(This,set)	\
    ( (This)->lpVtbl -> get_Left(This,set) ) 

#define WindowStyle_get_RTLReading(This,set)	\
    ( (This)->lpVtbl -> get_RTLReading(This,set) ) 

#define WindowStyle_get_LTRReading(This,set)	\
    ( (This)->lpVtbl -> get_LTRReading(This,set) ) 

#define WindowStyle_get_LeftScrollbar(This,set)	\
    ( (This)->lpVtbl -> get_LeftScrollbar(This,set) ) 

#define WindowStyle_get_RightScrollbar(This,set)	\
    ( (This)->lpVtbl -> get_RightScrollbar(This,set) ) 

#define WindowStyle_get_ControlParent(This,set)	\
    ( (This)->lpVtbl -> get_ControlParent(This,set) ) 

#define WindowStyle_get_StaticEdge(This,set)	\
    ( (This)->lpVtbl -> get_StaticEdge(This,set) ) 

#define WindowStyle_get_ApplicationWindow(This,set)	\
    ( (This)->lpVtbl -> get_ApplicationWindow(This,set) ) 

#define WindowStyle_get_Layered(This,set)	\
    ( (This)->lpVtbl -> get_Layered(This,set) ) 

#define WindowStyle_get_NoInheritLayout(This,set)	\
    ( (This)->lpVtbl -> get_NoInheritLayout(This,set) ) 

#define WindowStyle_get_LayoutRTL(This,set)	\
    ( (This)->lpVtbl -> get_LayoutRTL(This,set) ) 

#define WindowStyle_get_Composited(This,set)	\
    ( (This)->lpVtbl -> get_Composited(This,set) ) 

#define WindowStyle_get_NoActivate(This,set)	\
    ( (This)->lpVtbl -> get_NoActivate(This,set) ) 

#define WindowStyle_get_NoPaddedBorder(This,set)	\
    ( (This)->lpVtbl -> get_NoPaddedBorder(This,set) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WindowStyle_INTERFACE_DEFINED__ */


#ifndef __Clip_INTERFACE_DEFINED__
#define __Clip_INTERFACE_DEFINED__

/* interface Clip */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Clip;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e39dc37d-7c07-4859-94fd-a661b8c1f2ac")
    Clip : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ long *clipid) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ ClipType *cliptype) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ WindowPoint **position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rectangle( 
            /* [retval][out] */ WindowRectangle **rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ long *length) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ForegroundColor( 
            /* [retval][out] */ Color **color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ForegroundColor( 
            /* [in] */ Color *color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColor( 
            /* [retval][out] */ Color **color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundColor( 
            /* [in] */ Color *color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FontName( 
            /* [in] */ BSTR name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontSize( 
            /* [retval][out] */ long *size) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FontSize( 
            /* [in] */ long size) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontStyle( 
            /* [retval][out] */ FontStyle *style) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FontStyle( 
            /* [in] */ FontStyle style) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharacterOffsets( 
            /* [retval][out] */ CharacterOffsets **offsets) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CRC( 
            /* [retval][out] */ long *crc) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Line( 
            /* [optional][in] */ VARIANT RealTime,
            /* [retval][out] */ Clips **line) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharacterIndexAtPoint( 
            /* [in] */ ScreenPoint *Point,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsStatic( 
            /* [retval][out] */ VARIANT_BOOL *IsStatic) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsValid( 
            /* [retval][out] */ VARIANT_BOOL *IsValid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ClipVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Clip * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Clip * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Clip * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Clip * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Clip * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Clip * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Clip * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Clip * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Clip * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            Clip * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Clip * This,
            /* [retval][out] */ long *clipid);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Clip * This,
            /* [retval][out] */ ClipType *cliptype);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            Clip * This,
            /* [retval][out] */ WindowPoint **position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rectangle )( 
            Clip * This,
            /* [retval][out] */ WindowRectangle **rectangle);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            Clip * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            Clip * This,
            /* [retval][out] */ long *length);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundColor )( 
            Clip * This,
            /* [retval][out] */ Color **color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundColor )( 
            Clip * This,
            /* [in] */ Color *color);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            Clip * This,
            /* [retval][out] */ Color **color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            Clip * This,
            /* [in] */ Color *color);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontName )( 
            Clip * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontName )( 
            Clip * This,
            /* [in] */ BSTR name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontSize )( 
            Clip * This,
            /* [retval][out] */ long *size);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontSize )( 
            Clip * This,
            /* [in] */ long size);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontStyle )( 
            Clip * This,
            /* [retval][out] */ FontStyle *style);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontStyle )( 
            Clip * This,
            /* [in] */ FontStyle style);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterOffsets )( 
            Clip * This,
            /* [retval][out] */ CharacterOffsets **offsets);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CRC )( 
            Clip * This,
            /* [retval][out] */ long *crc);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Clip * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Line )( 
            Clip * This,
            /* [optional][in] */ VARIANT RealTime,
            /* [retval][out] */ Clips **line);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharacterIndexAtPoint )( 
            Clip * This,
            /* [in] */ ScreenPoint *Point,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsStatic )( 
            Clip * This,
            /* [retval][out] */ VARIANT_BOOL *IsStatic);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsValid )( 
            Clip * This,
            /* [retval][out] */ VARIANT_BOOL *IsValid);
        
        END_INTERFACE
    } ClipVtbl;

    interface Clip
    {
        CONST_VTBL struct ClipVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Clip_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Clip_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Clip_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Clip_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Clip_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Clip_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Clip_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Clip_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Clip_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Clip_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define Clip_get_ID(This,clipid)	\
    ( (This)->lpVtbl -> get_ID(This,clipid) ) 

#define Clip_get_Type(This,cliptype)	\
    ( (This)->lpVtbl -> get_Type(This,cliptype) ) 

#define Clip_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define Clip_get_Rectangle(This,rectangle)	\
    ( (This)->lpVtbl -> get_Rectangle(This,rectangle) ) 

#define Clip_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define Clip_get_Length(This,length)	\
    ( (This)->lpVtbl -> get_Length(This,length) ) 

#define Clip_get_ForegroundColor(This,color)	\
    ( (This)->lpVtbl -> get_ForegroundColor(This,color) ) 

#define Clip_put_ForegroundColor(This,color)	\
    ( (This)->lpVtbl -> put_ForegroundColor(This,color) ) 

#define Clip_get_BackgroundColor(This,color)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,color) ) 

#define Clip_put_BackgroundColor(This,color)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,color) ) 

#define Clip_get_FontName(This,name)	\
    ( (This)->lpVtbl -> get_FontName(This,name) ) 

#define Clip_put_FontName(This,name)	\
    ( (This)->lpVtbl -> put_FontName(This,name) ) 

#define Clip_get_FontSize(This,size)	\
    ( (This)->lpVtbl -> get_FontSize(This,size) ) 

#define Clip_put_FontSize(This,size)	\
    ( (This)->lpVtbl -> put_FontSize(This,size) ) 

#define Clip_get_FontStyle(This,style)	\
    ( (This)->lpVtbl -> get_FontStyle(This,style) ) 

#define Clip_put_FontStyle(This,style)	\
    ( (This)->lpVtbl -> put_FontStyle(This,style) ) 

#define Clip_get_CharacterOffsets(This,offsets)	\
    ( (This)->lpVtbl -> get_CharacterOffsets(This,offsets) ) 

#define Clip_get_CRC(This,crc)	\
    ( (This)->lpVtbl -> get_CRC(This,crc) ) 

#define Clip_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Clip_Line(This,RealTime,line)	\
    ( (This)->lpVtbl -> Line(This,RealTime,line) ) 

#define Clip_CharacterIndexAtPoint(This,Point,index)	\
    ( (This)->lpVtbl -> CharacterIndexAtPoint(This,Point,index) ) 

#define Clip_get_IsStatic(This,IsStatic)	\
    ( (This)->lpVtbl -> get_IsStatic(This,IsStatic) ) 

#define Clip_get_IsValid(This,IsValid)	\
    ( (This)->lpVtbl -> get_IsValid(This,IsValid) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Clip_INTERFACE_DEFINED__ */


#ifndef __Clips_INTERFACE_DEFINED__
#define __Clips_INTERFACE_DEFINED__

/* interface Clips */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Clips;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("539c9c74-8ff7-4718-ac9d-8d3f1b8caf66")
    Clips : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClipsText( 
            /* [retval][out] */ BSTR *Text) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ Clip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClipAtPoint( 
            /* [in] */ WindowPoint *point,
            /* [retval][out] */ Clip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FilterByType( 
            /* [in] */ ClipType cliptype,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FilterByRectangle( 
            /* [in] */ WindowRectangle *rect,
            /* [optional][in] */ VARIANT clipClips,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SearchText( 
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT MatchCase,
            /* [optional][in] */ VARIANT Highlighted,
            /* [optional][in] */ VARIANT fontStyle,
            /* [optional][in] */ VARIANT fontName,
            /* [optional][in] */ VARIANT fontSize,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ _Window *window,
            /* [in] */ long clipID,
            /* [retval][out] */ Clip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FilterByColor( 
            /* [in] */ Color *ForegroundColor,
            /* [in] */ Color *BackgroundColor,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharacterIndexAtPoint( 
            /* [in] */ ScreenPoint *Point,
            /* [retval][out] */ long *Index) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ClipsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Clips * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Clips * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Clips * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Clips * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Clips * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Clips * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Clips * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Clips * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Clips * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Clips * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClipsText )( 
            Clips * This,
            /* [retval][out] */ BSTR *Text);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Clips * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Clips * This,
            /* [in] */ long index,
            /* [retval][out] */ Clip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClipAtPoint )( 
            Clips * This,
            /* [in] */ WindowPoint *point,
            /* [retval][out] */ Clip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FilterByType )( 
            Clips * This,
            /* [in] */ ClipType cliptype,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FilterByRectangle )( 
            Clips * This,
            /* [in] */ WindowRectangle *rect,
            /* [optional][in] */ VARIANT clipClips,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SearchText )( 
            Clips * This,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT MatchCase,
            /* [optional][in] */ VARIANT Highlighted,
            /* [optional][in] */ VARIANT fontStyle,
            /* [optional][in] */ VARIANT fontName,
            /* [optional][in] */ VARIANT fontSize,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Find )( 
            Clips * This,
            /* [in] */ _Window *window,
            /* [in] */ long clipID,
            /* [retval][out] */ Clip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FilterByColor )( 
            Clips * This,
            /* [in] */ Color *ForegroundColor,
            /* [in] */ Color *BackgroundColor,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharacterIndexAtPoint )( 
            Clips * This,
            /* [in] */ ScreenPoint *Point,
            /* [retval][out] */ long *Index);
        
        END_INTERFACE
    } ClipsVtbl;

    interface Clips
    {
        CONST_VTBL struct ClipsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Clips_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Clips_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Clips_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Clips_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Clips_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Clips_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Clips_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Clips_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Clips_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Clips_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define Clips_get_ClipsText(This,Text)	\
    ( (This)->lpVtbl -> get_ClipsText(This,Text) ) 

#define Clips_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define Clips_Item(This,index,clip)	\
    ( (This)->lpVtbl -> Item(This,index,clip) ) 

#define Clips_ClipAtPoint(This,point,clip)	\
    ( (This)->lpVtbl -> ClipAtPoint(This,point,clip) ) 

#define Clips_FilterByType(This,cliptype,clips)	\
    ( (This)->lpVtbl -> FilterByType(This,cliptype,clips) ) 

#define Clips_FilterByRectangle(This,rect,clipClips,clips)	\
    ( (This)->lpVtbl -> FilterByRectangle(This,rect,clipClips,clips) ) 

#define Clips_SearchText(This,text,MatchCase,Highlighted,fontStyle,fontName,fontSize,clips)	\
    ( (This)->lpVtbl -> SearchText(This,text,MatchCase,Highlighted,fontStyle,fontName,fontSize,clips) ) 

#define Clips_Find(This,window,clipID,clip)	\
    ( (This)->lpVtbl -> Find(This,window,clipID,clip) ) 

#define Clips_FilterByColor(This,ForegroundColor,BackgroundColor,clips)	\
    ( (This)->lpVtbl -> FilterByColor(This,ForegroundColor,BackgroundColor,clips) ) 

#define Clips_CharacterIndexAtPoint(This,Point,Index)	\
    ( (This)->lpVtbl -> CharacterIndexAtPoint(This,Point,Index) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Clips_INTERFACE_DEFINED__ */


#ifndef __Cursor_INTERFACE_DEFINED__
#define __Cursor_INTERFACE_DEFINED__

/* interface Cursor */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Cursor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e45e7f76-b7be-4c73-919d-c3894064d228")
    Cursor : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ WindowPoint **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CursorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Cursor * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Cursor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Cursor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Cursor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Cursor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Cursor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Cursor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Cursor * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Cursor * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            Cursor * This,
            /* [retval][out] */ WindowPoint **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            Cursor * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            Cursor * This,
            /* [retval][out] */ _Window **prop);
        
        END_INTERFACE
    } CursorVtbl;

    interface Cursor
    {
        CONST_VTBL struct CursorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Cursor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Cursor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Cursor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Cursor_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Cursor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Cursor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Cursor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Cursor_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Cursor_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Cursor_get_Position(This,prop)	\
    ( (This)->lpVtbl -> get_Position(This,prop) ) 

#define Cursor_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define Cursor_get_Window(This,prop)	\
    ( (This)->lpVtbl -> get_Window(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Cursor_INTERFACE_DEFINED__ */


#ifndef ___Keyboard_INTERFACE_DEFINED__
#define ___Keyboard_INTERFACE_DEFINED__

/* interface _Keyboard */
/* [object][helpstring][helpcontext][version][hidden][dual][uuid] */ 


EXTERN_C const IID IID__Keyboard;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("993f763f-0743-4d46-bc63-9ef2705091a3")
    _Keyboard : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Keys( 
            /* [retval][out] */ Keys **keys) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterActiveWindow( 
            /* [retval][out] */ _Window **var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterActiveWindow( 
            /* [in] */ _Window *var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterFocusedWindow( 
            /* [retval][out] */ _Window **var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterFocusedWindow( 
            /* [in] */ _Window *var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterProcess( 
            /* [retval][out] */ Process **var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterProcess( 
            /* [in] */ Process *var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeyDescriberActive( 
            /* [retval][out] */ VARIANT_BOOL *var) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Down( 
            /* [in] */ long index,
            /* [retval][out] */ VARIANT_BOOL *down) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Toggled( 
            /* [in] */ long index,
            /* [retval][out] */ VARIANT_BOOL *toggled) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertKeyDown( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertKeyUp( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertKey( 
            /* [in] */ long index,
            /* [in] */ KeyModifiers mods) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Key( 
            /* [in] */ BSTR keyName,
            /* [retval][out] */ _Key **key) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RegisterHotkey( 
            /* [in] */ VARIANT key,
            /* [in] */ VARIANT function,
            /* [optional][in] */ VARIANT filterBy,
            /* [optional][in] */ VARIANT parameter,
            /* [optional][in] */ VARIANT FirstPress,
            /* [retval][out] */ RegisteredKey **handle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RegisterCursorKey( 
            /* [in] */ VARIANT key,
            /* [in] */ VARIANT function,
            /* [optional][in] */ VARIANT filterBy,
            /* [optional][in] */ VARIANT parameter,
            /* [retval][out] */ RegisteredKey **handle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Capture( 
            /* [retval][out] */ _Key **key) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WaitForAllKeysUp( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertString( 
            /* [in] */ BSTR str) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RegisteredHotkeys( 
            /* [retval][out] */ RegisteredHotkeys **registeredHotkeys) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _KeyboardVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Keyboard * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Keyboard * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Keyboard * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Keyboard * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Keyboard * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Keyboard * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Keyboard * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Keyboard * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Keyboard * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Keys )( 
            _Keyboard * This,
            /* [retval][out] */ Keys **keys);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterActiveWindow )( 
            _Keyboard * This,
            /* [retval][out] */ _Window **var);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterActiveWindow )( 
            _Keyboard * This,
            /* [in] */ _Window *var);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterFocusedWindow )( 
            _Keyboard * This,
            /* [retval][out] */ _Window **var);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterFocusedWindow )( 
            _Keyboard * This,
            /* [in] */ _Window *var);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterProcess )( 
            _Keyboard * This,
            /* [retval][out] */ Process **var);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterProcess )( 
            _Keyboard * This,
            /* [in] */ Process *var);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeyDescriberActive )( 
            _Keyboard * This,
            /* [retval][out] */ VARIANT_BOOL *var);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Down )( 
            _Keyboard * This,
            /* [in] */ long index,
            /* [retval][out] */ VARIANT_BOOL *down);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Toggled )( 
            _Keyboard * This,
            /* [in] */ long index,
            /* [retval][out] */ VARIANT_BOOL *toggled);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertKeyDown )( 
            _Keyboard * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertKeyUp )( 
            _Keyboard * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertKey )( 
            _Keyboard * This,
            /* [in] */ long index,
            /* [in] */ KeyModifiers mods);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Key )( 
            _Keyboard * This,
            /* [in] */ BSTR keyName,
            /* [retval][out] */ _Key **key);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RegisterHotkey )( 
            _Keyboard * This,
            /* [in] */ VARIANT key,
            /* [in] */ VARIANT function,
            /* [optional][in] */ VARIANT filterBy,
            /* [optional][in] */ VARIANT parameter,
            /* [optional][in] */ VARIANT FirstPress,
            /* [retval][out] */ RegisteredKey **handle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RegisterCursorKey )( 
            _Keyboard * This,
            /* [in] */ VARIANT key,
            /* [in] */ VARIANT function,
            /* [optional][in] */ VARIANT filterBy,
            /* [optional][in] */ VARIANT parameter,
            /* [retval][out] */ RegisteredKey **handle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Capture )( 
            _Keyboard * This,
            /* [retval][out] */ _Key **key);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WaitForAllKeysUp )( 
            _Keyboard * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertString )( 
            _Keyboard * This,
            /* [in] */ BSTR str);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RegisteredHotkeys )( 
            _Keyboard * This,
            /* [retval][out] */ RegisteredHotkeys **registeredHotkeys);
        
        END_INTERFACE
    } _KeyboardVtbl;

    interface _Keyboard
    {
        CONST_VTBL struct _KeyboardVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Keyboard_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Keyboard_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Keyboard_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Keyboard_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Keyboard_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Keyboard_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Keyboard_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Keyboard_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _Keyboard_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Keyboard_get_Keys(This,keys)	\
    ( (This)->lpVtbl -> get_Keys(This,keys) ) 

#define _Keyboard_get_FilterActiveWindow(This,var)	\
    ( (This)->lpVtbl -> get_FilterActiveWindow(This,var) ) 

#define _Keyboard_put_FilterActiveWindow(This,var)	\
    ( (This)->lpVtbl -> put_FilterActiveWindow(This,var) ) 

#define _Keyboard_get_FilterFocusedWindow(This,var)	\
    ( (This)->lpVtbl -> get_FilterFocusedWindow(This,var) ) 

#define _Keyboard_put_FilterFocusedWindow(This,var)	\
    ( (This)->lpVtbl -> put_FilterFocusedWindow(This,var) ) 

#define _Keyboard_get_FilterProcess(This,var)	\
    ( (This)->lpVtbl -> get_FilterProcess(This,var) ) 

#define _Keyboard_put_FilterProcess(This,var)	\
    ( (This)->lpVtbl -> put_FilterProcess(This,var) ) 

#define _Keyboard_get_KeyDescriberActive(This,var)	\
    ( (This)->lpVtbl -> get_KeyDescriberActive(This,var) ) 

#define _Keyboard_Down(This,index,down)	\
    ( (This)->lpVtbl -> Down(This,index,down) ) 

#define _Keyboard_Toggled(This,index,toggled)	\
    ( (This)->lpVtbl -> Toggled(This,index,toggled) ) 

#define _Keyboard_InsertKeyDown(This,index)	\
    ( (This)->lpVtbl -> InsertKeyDown(This,index) ) 

#define _Keyboard_InsertKeyUp(This,index)	\
    ( (This)->lpVtbl -> InsertKeyUp(This,index) ) 

#define _Keyboard_InsertKey(This,index,mods)	\
    ( (This)->lpVtbl -> InsertKey(This,index,mods) ) 

#define _Keyboard_Key(This,keyName,key)	\
    ( (This)->lpVtbl -> Key(This,keyName,key) ) 

#define _Keyboard_RegisterHotkey(This,key,function,filterBy,parameter,FirstPress,handle)	\
    ( (This)->lpVtbl -> RegisterHotkey(This,key,function,filterBy,parameter,FirstPress,handle) ) 

#define _Keyboard_RegisterCursorKey(This,key,function,filterBy,parameter,handle)	\
    ( (This)->lpVtbl -> RegisterCursorKey(This,key,function,filterBy,parameter,handle) ) 

#define _Keyboard_Capture(This,key)	\
    ( (This)->lpVtbl -> Capture(This,key) ) 

#define _Keyboard_WaitForAllKeysUp(This)	\
    ( (This)->lpVtbl -> WaitForAllKeysUp(This) ) 

#define _Keyboard_InsertString(This,str)	\
    ( (This)->lpVtbl -> InsertString(This,str) ) 

#define _Keyboard_RegisteredHotkeys(This,registeredHotkeys)	\
    ( (This)->lpVtbl -> RegisteredHotkeys(This,registeredHotkeys) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Keyboard_INTERFACE_DEFINED__ */


#ifndef __RegisteredKey_INTERFACE_DEFINED__
#define __RegisteredKey_INTERFACE_DEFINED__

/* interface RegisteredKey */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_RegisteredKey;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b43442c2-fb5d-4204-a2e2-1bfa0d10d04a")
    RegisteredKey : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Unregister( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RegisteredKeyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            RegisteredKey * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            RegisteredKey * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            RegisteredKey * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            RegisteredKey * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            RegisteredKey * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            RegisteredKey * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            RegisteredKey * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            RegisteredKey * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            RegisteredKey * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Unregister )( 
            RegisteredKey * This);
        
        END_INTERFACE
    } RegisteredKeyVtbl;

    interface RegisteredKey
    {
        CONST_VTBL struct RegisteredKeyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define RegisteredKey_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define RegisteredKey_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define RegisteredKey_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define RegisteredKey_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define RegisteredKey_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define RegisteredKey_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define RegisteredKey_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define RegisteredKey_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define RegisteredKey_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define RegisteredKey_Unregister(This)	\
    ( (This)->lpVtbl -> Unregister(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __RegisteredKey_INTERFACE_DEFINED__ */


#ifndef __Keys_INTERFACE_DEFINED__
#define __Keys_INTERFACE_DEFINED__

/* interface Keys */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Keys;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ef11a9e8-f13d-41dc-aa78-353b4a6c96cc")
    Keys : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ _Key **key) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct KeysVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Keys * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Keys * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Keys * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Keys * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Keys * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Keys * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Keys * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Keys * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Keys * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Keys * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Keys * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Keys * This,
            /* [in] */ long index,
            /* [retval][out] */ _Key **key);
        
        END_INTERFACE
    } KeysVtbl;

    interface Keys
    {
        CONST_VTBL struct KeysVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Keys_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Keys_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Keys_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Keys_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Keys_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Keys_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Keys_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Keys_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Keys_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Keys_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define Keys_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define Keys_Item(This,index,key)	\
    ( (This)->lpVtbl -> Item(This,index,key) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Keys_INTERFACE_DEFINED__ */


#ifndef ___Key_INTERFACE_DEFINED__
#define ___Key_INTERFACE_DEFINED__

/* interface _Key */
/* [object][helpstring][helpcontext][version][hidden][dual][uuid] */ 


EXTERN_C const IID IID__Key;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eecec524-6269-43ca-95c0-2b93024b5854")
    _Key : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Down( 
            /* [retval][out] */ VARIANT_BOOL *down) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Toggled( 
            /* [retval][out] */ VARIANT_BOOL *toggled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterActiveWindow( 
            /* [retval][out] */ _Window **var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterActiveWindow( 
            /* [in] */ _Window *var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterFocusedWindow( 
            /* [retval][out] */ _Window **var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterFocusedWindow( 
            /* [in] */ _Window *var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterProcess( 
            /* [retval][out] */ Process **var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterProcess( 
            /* [in] */ Process *var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterShift( 
            /* [retval][out] */ KeyFilterState *kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterShift( 
            /* [in] */ KeyFilterState kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterControl( 
            /* [retval][out] */ KeyFilterState *kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterControl( 
            /* [in] */ KeyFilterState kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterAlt( 
            /* [retval][out] */ KeyFilterState *kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterAlt( 
            /* [in] */ KeyFilterState kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterWindows( 
            /* [retval][out] */ KeyFilterState *kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterWindows( 
            /* [in] */ KeyFilterState kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterApplication( 
            /* [retval][out] */ KeyFilterState *kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterApplication( 
            /* [in] */ KeyFilterState kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterInsert( 
            /* [retval][out] */ KeyFilterState *kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterInsert( 
            /* [in] */ KeyFilterState kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterNumlock( 
            /* [retval][out] */ KeyFilterState *kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterNumlock( 
            /* [in] */ KeyFilterState kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterNumpad( 
            /* [retval][out] */ KeyFilterState *kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FilterNumpad( 
            /* [in] */ KeyFilterState kfs) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RequireModifiers( 
            /* [in] */ KeyModifiers Modifiers) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UntranslatedName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RequiredModifiers( 
            /* [retval][out] */ KeyModifiers *Modifiers) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _KeyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Key * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Key * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Key * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Key * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Key * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Key * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Key * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _Key * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Key * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Key * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            _Key * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Down )( 
            _Key * This,
            /* [retval][out] */ VARIANT_BOOL *down);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Toggled )( 
            _Key * This,
            /* [retval][out] */ VARIANT_BOOL *toggled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterActiveWindow )( 
            _Key * This,
            /* [retval][out] */ _Window **var);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterActiveWindow )( 
            _Key * This,
            /* [in] */ _Window *var);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterFocusedWindow )( 
            _Key * This,
            /* [retval][out] */ _Window **var);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterFocusedWindow )( 
            _Key * This,
            /* [in] */ _Window *var);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterProcess )( 
            _Key * This,
            /* [retval][out] */ Process **var);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterProcess )( 
            _Key * This,
            /* [in] */ Process *var);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterShift )( 
            _Key * This,
            /* [retval][out] */ KeyFilterState *kfs);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterShift )( 
            _Key * This,
            /* [in] */ KeyFilterState kfs);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterControl )( 
            _Key * This,
            /* [retval][out] */ KeyFilterState *kfs);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterControl )( 
            _Key * This,
            /* [in] */ KeyFilterState kfs);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterAlt )( 
            _Key * This,
            /* [retval][out] */ KeyFilterState *kfs);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterAlt )( 
            _Key * This,
            /* [in] */ KeyFilterState kfs);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterWindows )( 
            _Key * This,
            /* [retval][out] */ KeyFilterState *kfs);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterWindows )( 
            _Key * This,
            /* [in] */ KeyFilterState kfs);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterApplication )( 
            _Key * This,
            /* [retval][out] */ KeyFilterState *kfs);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterApplication )( 
            _Key * This,
            /* [in] */ KeyFilterState kfs);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterInsert )( 
            _Key * This,
            /* [retval][out] */ KeyFilterState *kfs);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterInsert )( 
            _Key * This,
            /* [in] */ KeyFilterState kfs);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterNumlock )( 
            _Key * This,
            /* [retval][out] */ KeyFilterState *kfs);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterNumlock )( 
            _Key * This,
            /* [in] */ KeyFilterState kfs);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterNumpad )( 
            _Key * This,
            /* [retval][out] */ KeyFilterState *kfs);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FilterNumpad )( 
            _Key * This,
            /* [in] */ KeyFilterState kfs);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RequireModifiers )( 
            _Key * This,
            /* [in] */ KeyModifiers Modifiers);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UntranslatedName )( 
            _Key * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RequiredModifiers )( 
            _Key * This,
            /* [retval][out] */ KeyModifiers *Modifiers);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            _Key * This);
        
        END_INTERFACE
    } _KeyVtbl;

    interface _Key
    {
        CONST_VTBL struct _KeyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Key_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Key_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Key_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Key_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Key_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Key_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Key_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Key_get_Name(This,name)	\
    ( (This)->lpVtbl -> get_Name(This,name) ) 

#define _Key_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _Key_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Key_get_Index(This,index)	\
    ( (This)->lpVtbl -> get_Index(This,index) ) 

#define _Key_get_Down(This,down)	\
    ( (This)->lpVtbl -> get_Down(This,down) ) 

#define _Key_get_Toggled(This,toggled)	\
    ( (This)->lpVtbl -> get_Toggled(This,toggled) ) 

#define _Key_get_FilterActiveWindow(This,var)	\
    ( (This)->lpVtbl -> get_FilterActiveWindow(This,var) ) 

#define _Key_put_FilterActiveWindow(This,var)	\
    ( (This)->lpVtbl -> put_FilterActiveWindow(This,var) ) 

#define _Key_get_FilterFocusedWindow(This,var)	\
    ( (This)->lpVtbl -> get_FilterFocusedWindow(This,var) ) 

#define _Key_put_FilterFocusedWindow(This,var)	\
    ( (This)->lpVtbl -> put_FilterFocusedWindow(This,var) ) 

#define _Key_get_FilterProcess(This,var)	\
    ( (This)->lpVtbl -> get_FilterProcess(This,var) ) 

#define _Key_put_FilterProcess(This,var)	\
    ( (This)->lpVtbl -> put_FilterProcess(This,var) ) 

#define _Key_get_FilterShift(This,kfs)	\
    ( (This)->lpVtbl -> get_FilterShift(This,kfs) ) 

#define _Key_put_FilterShift(This,kfs)	\
    ( (This)->lpVtbl -> put_FilterShift(This,kfs) ) 

#define _Key_get_FilterControl(This,kfs)	\
    ( (This)->lpVtbl -> get_FilterControl(This,kfs) ) 

#define _Key_put_FilterControl(This,kfs)	\
    ( (This)->lpVtbl -> put_FilterControl(This,kfs) ) 

#define _Key_get_FilterAlt(This,kfs)	\
    ( (This)->lpVtbl -> get_FilterAlt(This,kfs) ) 

#define _Key_put_FilterAlt(This,kfs)	\
    ( (This)->lpVtbl -> put_FilterAlt(This,kfs) ) 

#define _Key_get_FilterWindows(This,kfs)	\
    ( (This)->lpVtbl -> get_FilterWindows(This,kfs) ) 

#define _Key_put_FilterWindows(This,kfs)	\
    ( (This)->lpVtbl -> put_FilterWindows(This,kfs) ) 

#define _Key_get_FilterApplication(This,kfs)	\
    ( (This)->lpVtbl -> get_FilterApplication(This,kfs) ) 

#define _Key_put_FilterApplication(This,kfs)	\
    ( (This)->lpVtbl -> put_FilterApplication(This,kfs) ) 

#define _Key_get_FilterInsert(This,kfs)	\
    ( (This)->lpVtbl -> get_FilterInsert(This,kfs) ) 

#define _Key_put_FilterInsert(This,kfs)	\
    ( (This)->lpVtbl -> put_FilterInsert(This,kfs) ) 

#define _Key_get_FilterNumlock(This,kfs)	\
    ( (This)->lpVtbl -> get_FilterNumlock(This,kfs) ) 

#define _Key_put_FilterNumlock(This,kfs)	\
    ( (This)->lpVtbl -> put_FilterNumlock(This,kfs) ) 

#define _Key_get_FilterNumpad(This,kfs)	\
    ( (This)->lpVtbl -> get_FilterNumpad(This,kfs) ) 

#define _Key_put_FilterNumpad(This,kfs)	\
    ( (This)->lpVtbl -> put_FilterNumpad(This,kfs) ) 

#define _Key_RequireModifiers(This,Modifiers)	\
    ( (This)->lpVtbl -> RequireModifiers(This,Modifiers) ) 

#define _Key_get_UntranslatedName(This,name)	\
    ( (This)->lpVtbl -> get_UntranslatedName(This,name) ) 

#define _Key_get_RequiredModifiers(This,Modifiers)	\
    ( (This)->lpVtbl -> get_RequiredModifiers(This,Modifiers) ) 

#define _Key_Insert(This)	\
    ( (This)->lpVtbl -> Insert(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Key_INTERFACE_DEFINED__ */


#ifndef __SetFile_INTERFACE_DEFINED__
#define __SetFile_INTERFACE_DEFINED__

/* interface SetFile */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_SetFile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("66be9eb6-315d-4b0e-81a7-ec3b04cc0a16")
    SetFile : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Screen( 
            /* [retval][out] */ ScreenSettings **screen) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Keyboard( 
            /* [retval][out] */ KeyboardSettings **keyboard) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Mouse( 
            /* [retval][out] */ MouseSettings **mouse) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_General( 
            /* [retval][out] */ GeneralSettings **general) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Verbosity( 
            /* [retval][out] */ Verbosity **verbosity) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Braille( 
            /* [retval][out] */ BrailleSettings **braille) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserWindows( 
            /* [retval][out] */ UserWindows **userWindows) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HyperactiveWindows( 
            /* [retval][out] */ HyperactiveWindows **hyperactiveWindows) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Hotkeys( 
            /* [retval][out] */ Hotkeys **hotKeys) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorKeys( 
            /* [retval][out] */ CursorKeys **cursorKeys) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharacterDictionary( 
            /* [retval][out] */ CharacterDictionary **dict) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColorDictionary( 
            /* [retval][out] */ ColorDictionary **dict) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExceptionDictionary( 
            /* [retval][out] */ ExceptionDictionary **dict) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_GraphicDictionary( 
            /* [retval][out] */ GraphicDictionary **dict) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeyLabelDictionary( 
            /* [retval][out] */ KeyLabelDictionary **dict) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Global( 
            /* [retval][out] */ GlobalSettings **settings) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Scope( 
            /* [retval][out] */ SetFileScope **setFileScope) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SetFileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SetFile * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SetFile * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SetFile * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SetFile * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SetFile * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SetFile * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SetFile * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SetFile * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SetFile * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Screen )( 
            SetFile * This,
            /* [retval][out] */ ScreenSettings **screen);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Keyboard )( 
            SetFile * This,
            /* [retval][out] */ KeyboardSettings **keyboard);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mouse )( 
            SetFile * This,
            /* [retval][out] */ MouseSettings **mouse);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_General )( 
            SetFile * This,
            /* [retval][out] */ GeneralSettings **general);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Verbosity )( 
            SetFile * This,
            /* [retval][out] */ Verbosity **verbosity);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Braille )( 
            SetFile * This,
            /* [retval][out] */ BrailleSettings **braille);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserWindows )( 
            SetFile * This,
            /* [retval][out] */ UserWindows **userWindows);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HyperactiveWindows )( 
            SetFile * This,
            /* [retval][out] */ HyperactiveWindows **hyperactiveWindows);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Hotkeys )( 
            SetFile * This,
            /* [retval][out] */ Hotkeys **hotKeys);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorKeys )( 
            SetFile * This,
            /* [retval][out] */ CursorKeys **cursorKeys);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterDictionary )( 
            SetFile * This,
            /* [retval][out] */ CharacterDictionary **dict);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorDictionary )( 
            SetFile * This,
            /* [retval][out] */ ColorDictionary **dict);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExceptionDictionary )( 
            SetFile * This,
            /* [retval][out] */ ExceptionDictionary **dict);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GraphicDictionary )( 
            SetFile * This,
            /* [retval][out] */ GraphicDictionary **dict);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeyLabelDictionary )( 
            SetFile * This,
            /* [retval][out] */ KeyLabelDictionary **dict);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Global )( 
            SetFile * This,
            /* [retval][out] */ GlobalSettings **settings);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            SetFile * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            SetFile * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scope )( 
            SetFile * This,
            /* [retval][out] */ SetFileScope **setFileScope);
        
        END_INTERFACE
    } SetFileVtbl;

    interface SetFile
    {
        CONST_VTBL struct SetFileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SetFile_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SetFile_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SetFile_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SetFile_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SetFile_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SetFile_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SetFile_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SetFile_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define SetFile_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define SetFile_get_Screen(This,screen)	\
    ( (This)->lpVtbl -> get_Screen(This,screen) ) 

#define SetFile_get_Keyboard(This,keyboard)	\
    ( (This)->lpVtbl -> get_Keyboard(This,keyboard) ) 

#define SetFile_get_Mouse(This,mouse)	\
    ( (This)->lpVtbl -> get_Mouse(This,mouse) ) 

#define SetFile_get_General(This,general)	\
    ( (This)->lpVtbl -> get_General(This,general) ) 

#define SetFile_get_Verbosity(This,verbosity)	\
    ( (This)->lpVtbl -> get_Verbosity(This,verbosity) ) 

#define SetFile_get_Braille(This,braille)	\
    ( (This)->lpVtbl -> get_Braille(This,braille) ) 

#define SetFile_get_UserWindows(This,userWindows)	\
    ( (This)->lpVtbl -> get_UserWindows(This,userWindows) ) 

#define SetFile_get_HyperactiveWindows(This,hyperactiveWindows)	\
    ( (This)->lpVtbl -> get_HyperactiveWindows(This,hyperactiveWindows) ) 

#define SetFile_get_Hotkeys(This,hotKeys)	\
    ( (This)->lpVtbl -> get_Hotkeys(This,hotKeys) ) 

#define SetFile_get_CursorKeys(This,cursorKeys)	\
    ( (This)->lpVtbl -> get_CursorKeys(This,cursorKeys) ) 

#define SetFile_get_CharacterDictionary(This,dict)	\
    ( (This)->lpVtbl -> get_CharacterDictionary(This,dict) ) 

#define SetFile_get_ColorDictionary(This,dict)	\
    ( (This)->lpVtbl -> get_ColorDictionary(This,dict) ) 

#define SetFile_get_ExceptionDictionary(This,dict)	\
    ( (This)->lpVtbl -> get_ExceptionDictionary(This,dict) ) 

#define SetFile_get_GraphicDictionary(This,dict)	\
    ( (This)->lpVtbl -> get_GraphicDictionary(This,dict) ) 

#define SetFile_get_KeyLabelDictionary(This,dict)	\
    ( (This)->lpVtbl -> get_KeyLabelDictionary(This,dict) ) 

#define SetFile_get_Global(This,settings)	\
    ( (This)->lpVtbl -> get_Global(This,settings) ) 

#define SetFile_get_FileName(This,name)	\
    ( (This)->lpVtbl -> get_FileName(This,name) ) 

#define SetFile_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define SetFile_get_Scope(This,setFileScope)	\
    ( (This)->lpVtbl -> get_Scope(This,setFileScope) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SetFile_INTERFACE_DEFINED__ */


#ifndef __CharacterDictionaries_INTERFACE_DEFINED__
#define __CharacterDictionaries_INTERFACE_DEFINED__

/* interface CharacterDictionaries */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_CharacterDictionaries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f571e9c7-ec2d-452f-82f9-3e5fb3cbd855")
    CharacterDictionaries : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ CharacterDictionary **dictionary) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LookUp( 
            /* [in] */ VARIANT Character,
            /* [optional][in] */ VARIANT FontName,
            /* [retval][out] */ CharacterEntry **Entry) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CharacterDictionariesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CharacterDictionaries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CharacterDictionaries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CharacterDictionaries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CharacterDictionaries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CharacterDictionaries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CharacterDictionaries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CharacterDictionaries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CharacterDictionaries * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CharacterDictionaries * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CharacterDictionaries * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            CharacterDictionaries * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CharacterDictionaries * This,
            /* [in] */ long index,
            /* [retval][out] */ CharacterDictionary **dictionary);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAll )( 
            CharacterDictionaries * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LookUp )( 
            CharacterDictionaries * This,
            /* [in] */ VARIANT Character,
            /* [optional][in] */ VARIANT FontName,
            /* [retval][out] */ CharacterEntry **Entry);
        
        END_INTERFACE
    } CharacterDictionariesVtbl;

    interface CharacterDictionaries
    {
        CONST_VTBL struct CharacterDictionariesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CharacterDictionaries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CharacterDictionaries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CharacterDictionaries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CharacterDictionaries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CharacterDictionaries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CharacterDictionaries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CharacterDictionaries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CharacterDictionaries_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define CharacterDictionaries_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define CharacterDictionaries_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define CharacterDictionaries_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define CharacterDictionaries_Item(This,index,dictionary)	\
    ( (This)->lpVtbl -> Item(This,index,dictionary) ) 

#define CharacterDictionaries_SaveAll(This)	\
    ( (This)->lpVtbl -> SaveAll(This) ) 

#define CharacterDictionaries_LookUp(This,Character,FontName,Entry)	\
    ( (This)->lpVtbl -> LookUp(This,Character,FontName,Entry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CharacterDictionaries_INTERFACE_DEFINED__ */


#ifndef __ColorDictionaries_INTERFACE_DEFINED__
#define __ColorDictionaries_INTERFACE_DEFINED__

/* interface ColorDictionaries */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ColorDictionaries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("04819b3b-c4d7-4d62-884f-09df0c436ced")
    ColorDictionaries : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ ColorDictionary **dictionary) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAll( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LookUp( 
            /* [in] */ Color *color,
            /* [optional][in] */ VARIANT ClosestMatch,
            /* [retval][out] */ ColorEntry **Entry) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColorDictionariesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ColorDictionaries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ColorDictionaries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ColorDictionaries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ColorDictionaries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ColorDictionaries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ColorDictionaries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ColorDictionaries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ColorDictionaries * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ColorDictionaries * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ColorDictionaries * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ColorDictionaries * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ColorDictionaries * This,
            /* [in] */ long index,
            /* [retval][out] */ ColorDictionary **dictionary);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAll )( 
            ColorDictionaries * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LookUp )( 
            ColorDictionaries * This,
            /* [in] */ Color *color,
            /* [optional][in] */ VARIANT ClosestMatch,
            /* [retval][out] */ ColorEntry **Entry);
        
        END_INTERFACE
    } ColorDictionariesVtbl;

    interface ColorDictionaries
    {
        CONST_VTBL struct ColorDictionariesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ColorDictionaries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ColorDictionaries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ColorDictionaries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ColorDictionaries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ColorDictionaries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ColorDictionaries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ColorDictionaries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ColorDictionaries_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ColorDictionaries_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ColorDictionaries_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define ColorDictionaries_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define ColorDictionaries_Item(This,index,dictionary)	\
    ( (This)->lpVtbl -> Item(This,index,dictionary) ) 

#define ColorDictionaries_SaveAll(This)	\
    ( (This)->lpVtbl -> SaveAll(This) ) 

#define ColorDictionaries_LookUp(This,color,ClosestMatch,Entry)	\
    ( (This)->lpVtbl -> LookUp(This,color,ClosestMatch,Entry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ColorDictionaries_INTERFACE_DEFINED__ */


#ifndef __ExceptionDictionaries_INTERFACE_DEFINED__
#define __ExceptionDictionaries_INTERFACE_DEFINED__

/* interface ExceptionDictionaries */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ExceptionDictionaries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("27721e7c-f61f-425b-b859-e91ea9d47d92")
    ExceptionDictionaries : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ ExceptionDictionary **dictionary) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAll( 
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LookUp( 
            /* [in] */ BSTR word,
            /* [retval][out] */ ExceptionEntry **Entry) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExceptionDictionariesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ExceptionDictionaries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ExceptionDictionaries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ExceptionDictionaries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ExceptionDictionaries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ExceptionDictionaries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ExceptionDictionaries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ExceptionDictionaries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ExceptionDictionaries * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ExceptionDictionaries * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ExceptionDictionaries * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ExceptionDictionaries * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ExceptionDictionaries * This,
            /* [in] */ long index,
            /* [retval][out] */ ExceptionDictionary **dictionary);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAll )( 
            ExceptionDictionaries * This,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LookUp )( 
            ExceptionDictionaries * This,
            /* [in] */ BSTR word,
            /* [retval][out] */ ExceptionEntry **Entry);
        
        END_INTERFACE
    } ExceptionDictionariesVtbl;

    interface ExceptionDictionaries
    {
        CONST_VTBL struct ExceptionDictionariesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ExceptionDictionaries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ExceptionDictionaries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ExceptionDictionaries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ExceptionDictionaries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ExceptionDictionaries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ExceptionDictionaries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ExceptionDictionaries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ExceptionDictionaries_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ExceptionDictionaries_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ExceptionDictionaries_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define ExceptionDictionaries_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define ExceptionDictionaries_Item(This,index,dictionary)	\
    ( (This)->lpVtbl -> Item(This,index,dictionary) ) 

#define ExceptionDictionaries_SaveAll(This,success)	\
    ( (This)->lpVtbl -> SaveAll(This,success) ) 

#define ExceptionDictionaries_LookUp(This,word,Entry)	\
    ( (This)->lpVtbl -> LookUp(This,word,Entry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ExceptionDictionaries_INTERFACE_DEFINED__ */


#ifndef __GraphicDictionaries_INTERFACE_DEFINED__
#define __GraphicDictionaries_INTERFACE_DEFINED__

/* interface GraphicDictionaries */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_GraphicDictionaries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ad9ad626-fef9-4f4d-ba55-9906f8038779")
    GraphicDictionaries : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ GraphicDictionary **dictionary) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAll( 
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LookUp( 
            /* [in] */ long CRC,
            /* [retval][out] */ GraphicEntry **Entry) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GraphicDictionariesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            GraphicDictionaries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            GraphicDictionaries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            GraphicDictionaries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            GraphicDictionaries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            GraphicDictionaries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            GraphicDictionaries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            GraphicDictionaries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            GraphicDictionaries * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            GraphicDictionaries * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            GraphicDictionaries * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            GraphicDictionaries * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            GraphicDictionaries * This,
            /* [in] */ long index,
            /* [retval][out] */ GraphicDictionary **dictionary);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAll )( 
            GraphicDictionaries * This,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LookUp )( 
            GraphicDictionaries * This,
            /* [in] */ long CRC,
            /* [retval][out] */ GraphicEntry **Entry);
        
        END_INTERFACE
    } GraphicDictionariesVtbl;

    interface GraphicDictionaries
    {
        CONST_VTBL struct GraphicDictionariesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define GraphicDictionaries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define GraphicDictionaries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define GraphicDictionaries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define GraphicDictionaries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define GraphicDictionaries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define GraphicDictionaries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define GraphicDictionaries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define GraphicDictionaries_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define GraphicDictionaries_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define GraphicDictionaries_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define GraphicDictionaries_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define GraphicDictionaries_Item(This,index,dictionary)	\
    ( (This)->lpVtbl -> Item(This,index,dictionary) ) 

#define GraphicDictionaries_SaveAll(This,success)	\
    ( (This)->lpVtbl -> SaveAll(This,success) ) 

#define GraphicDictionaries_LookUp(This,CRC,Entry)	\
    ( (This)->lpVtbl -> LookUp(This,CRC,Entry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __GraphicDictionaries_INTERFACE_DEFINED__ */


#ifndef __KeyLabelDictionaries_INTERFACE_DEFINED__
#define __KeyLabelDictionaries_INTERFACE_DEFINED__

/* interface KeyLabelDictionaries */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_KeyLabelDictionaries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("57bb2672-9231-4e08-948b-b450a2a5a6d6")
    KeyLabelDictionaries : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ KeyLabelDictionary **dictionary) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAll( 
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LookUp( 
            /* [in] */ VirtualKeyCode key,
            KeyModifiers mods,
            /* [retval][out] */ KeyLabelEntry **Entry) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct KeyLabelDictionariesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            KeyLabelDictionaries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            KeyLabelDictionaries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            KeyLabelDictionaries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            KeyLabelDictionaries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            KeyLabelDictionaries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            KeyLabelDictionaries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            KeyLabelDictionaries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            KeyLabelDictionaries * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            KeyLabelDictionaries * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            KeyLabelDictionaries * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            KeyLabelDictionaries * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            KeyLabelDictionaries * This,
            /* [in] */ long index,
            /* [retval][out] */ KeyLabelDictionary **dictionary);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAll )( 
            KeyLabelDictionaries * This,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LookUp )( 
            KeyLabelDictionaries * This,
            /* [in] */ VirtualKeyCode key,
            KeyModifiers mods,
            /* [retval][out] */ KeyLabelEntry **Entry);
        
        END_INTERFACE
    } KeyLabelDictionariesVtbl;

    interface KeyLabelDictionaries
    {
        CONST_VTBL struct KeyLabelDictionariesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define KeyLabelDictionaries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define KeyLabelDictionaries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define KeyLabelDictionaries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define KeyLabelDictionaries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define KeyLabelDictionaries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define KeyLabelDictionaries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define KeyLabelDictionaries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define KeyLabelDictionaries_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define KeyLabelDictionaries_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define KeyLabelDictionaries_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define KeyLabelDictionaries_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define KeyLabelDictionaries_Item(This,index,dictionary)	\
    ( (This)->lpVtbl -> Item(This,index,dictionary) ) 

#define KeyLabelDictionaries_SaveAll(This,success)	\
    ( (This)->lpVtbl -> SaveAll(This,success) ) 

#define KeyLabelDictionaries_LookUp(This,key,mods,Entry)	\
    ( (This)->lpVtbl -> LookUp(This,key,mods,Entry) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __KeyLabelDictionaries_INTERFACE_DEFINED__ */


#ifndef __Desktop_INTERFACE_DEFINED__
#define __Desktop_INTERFACE_DEFINED__

/* interface Desktop */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Desktop;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("991A7510-8885-4a88-B086-D71834E1A032")
    Desktop : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *desktopName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DesktopVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Desktop * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Desktop * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Desktop * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Desktop * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Desktop * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Desktop * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Desktop * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Desktop * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Desktop * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Desktop * This,
            /* [retval][out] */ BSTR *desktopName);
        
        END_INTERFACE
    } DesktopVtbl;

    interface Desktop
    {
        CONST_VTBL struct DesktopVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Desktop_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Desktop_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Desktop_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Desktop_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Desktop_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Desktop_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Desktop_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Desktop_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Desktop_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Desktop_get_Name(This,desktopName)	\
    ( (This)->lpVtbl -> get_Name(This,desktopName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Desktop_INTERFACE_DEFINED__ */


#ifndef __Process_INTERFACE_DEFINED__
#define __Process_INTERFACE_DEFINED__

/* interface Process */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Process;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("713468F4-0BB7-4de2-B7AE-373C6AE2949F")
    Process : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProcessID( 
            /* [retval][out] */ long *id) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ModuleName( 
            /* [retval][out] */ BSTR *moduleName) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExecutablePath( 
            /* [retval][out] */ BSTR *path) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Comments( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CompanyName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileDescription( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileVersion( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InternalName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LegalCopyright( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LegalTrademarks( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OriginalFilename( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProductName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProductVersion( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateBuild( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpecialBuild( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Is64Bit( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProcessVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Process * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Process * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Process * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Process * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Process * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Process * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Process * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Process * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Process * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProcessID )( 
            Process * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ModuleName )( 
            Process * This,
            /* [retval][out] */ BSTR *moduleName);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExecutablePath )( 
            Process * This,
            /* [retval][out] */ BSTR *path);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Comments )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompanyName )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileDescription )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileVersion )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InternalName )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LegalCopyright )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LegalTrademarks )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OriginalFilename )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProductName )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProductVersion )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateBuild )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecialBuild )( 
            Process * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Is64Bit )( 
            Process * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } ProcessVtbl;

    interface Process
    {
        CONST_VTBL struct ProcessVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Process_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Process_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Process_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Process_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Process_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Process_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Process_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Process_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Process_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Process_get_ProcessID(This,id)	\
    ( (This)->lpVtbl -> get_ProcessID(This,id) ) 

#define Process_get_ModuleName(This,moduleName)	\
    ( (This)->lpVtbl -> get_ModuleName(This,moduleName) ) 

#define Process_get_ExecutablePath(This,path)	\
    ( (This)->lpVtbl -> get_ExecutablePath(This,path) ) 

#define Process_get_Comments(This,prop)	\
    ( (This)->lpVtbl -> get_Comments(This,prop) ) 

#define Process_get_CompanyName(This,prop)	\
    ( (This)->lpVtbl -> get_CompanyName(This,prop) ) 

#define Process_get_FileDescription(This,prop)	\
    ( (This)->lpVtbl -> get_FileDescription(This,prop) ) 

#define Process_get_FileVersion(This,prop)	\
    ( (This)->lpVtbl -> get_FileVersion(This,prop) ) 

#define Process_get_InternalName(This,prop)	\
    ( (This)->lpVtbl -> get_InternalName(This,prop) ) 

#define Process_get_LegalCopyright(This,prop)	\
    ( (This)->lpVtbl -> get_LegalCopyright(This,prop) ) 

#define Process_get_LegalTrademarks(This,prop)	\
    ( (This)->lpVtbl -> get_LegalTrademarks(This,prop) ) 

#define Process_get_OriginalFilename(This,prop)	\
    ( (This)->lpVtbl -> get_OriginalFilename(This,prop) ) 

#define Process_get_ProductName(This,prop)	\
    ( (This)->lpVtbl -> get_ProductName(This,prop) ) 

#define Process_get_ProductVersion(This,prop)	\
    ( (This)->lpVtbl -> get_ProductVersion(This,prop) ) 

#define Process_get_PrivateBuild(This,prop)	\
    ( (This)->lpVtbl -> get_PrivateBuild(This,prop) ) 

#define Process_get_SpecialBuild(This,prop)	\
    ( (This)->lpVtbl -> get_SpecialBuild(This,prop) ) 

#define Process_get_Is64Bit(This,prop)	\
    ( (This)->lpVtbl -> get_Is64Bit(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Process_INTERFACE_DEFINED__ */


#ifndef __SpecialKeySettings_INTERFACE_DEFINED__
#define __SpecialKeySettings_INTERFACE_DEFINED__

/* interface SpecialKeySettings */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_SpecialKeySettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D1870316-B206-4081-B219-525B338F5B74")
    SpecialKeySettings : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FunctionKeys( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FunctionKeys( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ToggleKeys( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ToggleKeys( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeyEnhancements( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeyEnhancements( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EscapeKey( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EscapeKey( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnterKey( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnterKey( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableBothInsertsAsModifier( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableBothInsertsAsModifier( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorMovement( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CursorMovement( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableCapsLockAsInsertKey( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableCapsLockAsInsertKey( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SpecialKeySettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SpecialKeySettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SpecialKeySettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SpecialKeySettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SpecialKeySettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SpecialKeySettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SpecialKeySettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SpecialKeySettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SpecialKeySettings * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SpecialKeySettings * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionKeys )( 
            SpecialKeySettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FunctionKeys )( 
            SpecialKeySettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ToggleKeys )( 
            SpecialKeySettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ToggleKeys )( 
            SpecialKeySettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeyEnhancements )( 
            SpecialKeySettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeyEnhancements )( 
            SpecialKeySettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EscapeKey )( 
            SpecialKeySettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EscapeKey )( 
            SpecialKeySettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnterKey )( 
            SpecialKeySettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnterKey )( 
            SpecialKeySettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableBothInsertsAsModifier )( 
            SpecialKeySettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableBothInsertsAsModifier )( 
            SpecialKeySettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorMovement )( 
            SpecialKeySettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CursorMovement )( 
            SpecialKeySettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableCapsLockAsInsertKey )( 
            SpecialKeySettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableCapsLockAsInsertKey )( 
            SpecialKeySettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } SpecialKeySettingsVtbl;

    interface SpecialKeySettings
    {
        CONST_VTBL struct SpecialKeySettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SpecialKeySettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SpecialKeySettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SpecialKeySettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SpecialKeySettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SpecialKeySettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SpecialKeySettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SpecialKeySettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SpecialKeySettings_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define SpecialKeySettings_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define SpecialKeySettings_get_FunctionKeys(This,prop)	\
    ( (This)->lpVtbl -> get_FunctionKeys(This,prop) ) 

#define SpecialKeySettings_put_FunctionKeys(This,prop)	\
    ( (This)->lpVtbl -> put_FunctionKeys(This,prop) ) 

#define SpecialKeySettings_get_ToggleKeys(This,prop)	\
    ( (This)->lpVtbl -> get_ToggleKeys(This,prop) ) 

#define SpecialKeySettings_put_ToggleKeys(This,prop)	\
    ( (This)->lpVtbl -> put_ToggleKeys(This,prop) ) 

#define SpecialKeySettings_get_KeyEnhancements(This,prop)	\
    ( (This)->lpVtbl -> get_KeyEnhancements(This,prop) ) 

#define SpecialKeySettings_put_KeyEnhancements(This,prop)	\
    ( (This)->lpVtbl -> put_KeyEnhancements(This,prop) ) 

#define SpecialKeySettings_get_EscapeKey(This,prop)	\
    ( (This)->lpVtbl -> get_EscapeKey(This,prop) ) 

#define SpecialKeySettings_put_EscapeKey(This,prop)	\
    ( (This)->lpVtbl -> put_EscapeKey(This,prop) ) 

#define SpecialKeySettings_get_EnterKey(This,prop)	\
    ( (This)->lpVtbl -> get_EnterKey(This,prop) ) 

#define SpecialKeySettings_put_EnterKey(This,prop)	\
    ( (This)->lpVtbl -> put_EnterKey(This,prop) ) 

#define SpecialKeySettings_get_EnableBothInsertsAsModifier(This,prop)	\
    ( (This)->lpVtbl -> get_EnableBothInsertsAsModifier(This,prop) ) 

#define SpecialKeySettings_put_EnableBothInsertsAsModifier(This,prop)	\
    ( (This)->lpVtbl -> put_EnableBothInsertsAsModifier(This,prop) ) 

#define SpecialKeySettings_get_CursorMovement(This,prop)	\
    ( (This)->lpVtbl -> get_CursorMovement(This,prop) ) 

#define SpecialKeySettings_put_CursorMovement(This,prop)	\
    ( (This)->lpVtbl -> put_CursorMovement(This,prop) ) 

#define SpecialKeySettings_get_EnableCapsLockAsInsertKey(This,prop)	\
    ( (This)->lpVtbl -> get_EnableCapsLockAsInsertKey(This,prop) ) 

#define SpecialKeySettings_put_EnableCapsLockAsInsertKey(This,prop)	\
    ( (This)->lpVtbl -> put_EnableCapsLockAsInsertKey(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SpecialKeySettings_INTERFACE_DEFINED__ */


#ifndef __PunctuationSettings_INTERFACE_DEFINED__
#define __PunctuationSettings_INTERFACE_DEFINED__

/* interface PunctuationSettings */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_PunctuationSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BE2E7D51-873F-4f95-94E9-532566223B83")
    PunctuationSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Textual( 
            /* [retval][out] */ PunctuationMode *mode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Textual( 
            /* [in] */ PunctuationMode mode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Math( 
            /* [retval][out] */ PunctuationMode *mode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Math( 
            /* [in] */ PunctuationMode mode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Miscellaneous( 
            /* [retval][out] */ PunctuationMode *mode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Miscellaneous( 
            /* [in] */ PunctuationMode mode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Space( 
            /* [retval][out] */ PunctuationMode *mode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Space( 
            /* [in] */ PunctuationMode mode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PunctuationSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PunctuationSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PunctuationSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PunctuationSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PunctuationSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PunctuationSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PunctuationSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PunctuationSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PunctuationSettings * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PunctuationSettings * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Textual )( 
            PunctuationSettings * This,
            /* [retval][out] */ PunctuationMode *mode);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Textual )( 
            PunctuationSettings * This,
            /* [in] */ PunctuationMode mode);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Math )( 
            PunctuationSettings * This,
            /* [retval][out] */ PunctuationMode *mode);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Math )( 
            PunctuationSettings * This,
            /* [in] */ PunctuationMode mode);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Miscellaneous )( 
            PunctuationSettings * This,
            /* [retval][out] */ PunctuationMode *mode);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Miscellaneous )( 
            PunctuationSettings * This,
            /* [in] */ PunctuationMode mode);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Space )( 
            PunctuationSettings * This,
            /* [retval][out] */ PunctuationMode *mode);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Space )( 
            PunctuationSettings * This,
            /* [in] */ PunctuationMode mode);
        
        END_INTERFACE
    } PunctuationSettingsVtbl;

    interface PunctuationSettings
    {
        CONST_VTBL struct PunctuationSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PunctuationSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PunctuationSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PunctuationSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PunctuationSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PunctuationSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PunctuationSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PunctuationSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PunctuationSettings_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define PunctuationSettings_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define PunctuationSettings_get_Textual(This,mode)	\
    ( (This)->lpVtbl -> get_Textual(This,mode) ) 

#define PunctuationSettings_put_Textual(This,mode)	\
    ( (This)->lpVtbl -> put_Textual(This,mode) ) 

#define PunctuationSettings_get_Math(This,mode)	\
    ( (This)->lpVtbl -> get_Math(This,mode) ) 

#define PunctuationSettings_put_Math(This,mode)	\
    ( (This)->lpVtbl -> put_Math(This,mode) ) 

#define PunctuationSettings_get_Miscellaneous(This,mode)	\
    ( (This)->lpVtbl -> get_Miscellaneous(This,mode) ) 

#define PunctuationSettings_put_Miscellaneous(This,mode)	\
    ( (This)->lpVtbl -> put_Miscellaneous(This,mode) ) 

#define PunctuationSettings_get_Space(This,mode)	\
    ( (This)->lpVtbl -> get_Space(This,mode) ) 

#define PunctuationSettings_put_Space(This,mode)	\
    ( (This)->lpVtbl -> put_Space(This,mode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PunctuationSettings_INTERFACE_DEFINED__ */


#ifndef __MouseSearchAttributesSettings_INTERFACE_DEFINED__
#define __MouseSearchAttributesSettings_INTERFACE_DEFINED__

/* interface MouseSearchAttributesSettings */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_MouseSearchAttributesSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6766D2E3-4358-4f48-A9AA-766094DAC00D")
    MouseSearchAttributesSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Underlined( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Underlined( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bold( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Bold( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Highlighted( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Highlighted( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Italic( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Italic( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Strikeout( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Strikeout( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MouseSearchAttributesSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MouseSearchAttributesSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MouseSearchAttributesSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MouseSearchAttributesSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MouseSearchAttributesSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MouseSearchAttributesSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MouseSearchAttributesSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MouseSearchAttributesSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MouseSearchAttributesSettings * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MouseSearchAttributesSettings * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Underlined )( 
            MouseSearchAttributesSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Underlined )( 
            MouseSearchAttributesSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bold )( 
            MouseSearchAttributesSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Bold )( 
            MouseSearchAttributesSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Highlighted )( 
            MouseSearchAttributesSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Highlighted )( 
            MouseSearchAttributesSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Italic )( 
            MouseSearchAttributesSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Italic )( 
            MouseSearchAttributesSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Strikeout )( 
            MouseSearchAttributesSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Strikeout )( 
            MouseSearchAttributesSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } MouseSearchAttributesSettingsVtbl;

    interface MouseSearchAttributesSettings
    {
        CONST_VTBL struct MouseSearchAttributesSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MouseSearchAttributesSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MouseSearchAttributesSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MouseSearchAttributesSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MouseSearchAttributesSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MouseSearchAttributesSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MouseSearchAttributesSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MouseSearchAttributesSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MouseSearchAttributesSettings_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define MouseSearchAttributesSettings_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define MouseSearchAttributesSettings_get_Underlined(This,prop)	\
    ( (This)->lpVtbl -> get_Underlined(This,prop) ) 

#define MouseSearchAttributesSettings_put_Underlined(This,prop)	\
    ( (This)->lpVtbl -> put_Underlined(This,prop) ) 

#define MouseSearchAttributesSettings_get_Bold(This,prop)	\
    ( (This)->lpVtbl -> get_Bold(This,prop) ) 

#define MouseSearchAttributesSettings_put_Bold(This,prop)	\
    ( (This)->lpVtbl -> put_Bold(This,prop) ) 

#define MouseSearchAttributesSettings_get_Highlighted(This,prop)	\
    ( (This)->lpVtbl -> get_Highlighted(This,prop) ) 

#define MouseSearchAttributesSettings_put_Highlighted(This,prop)	\
    ( (This)->lpVtbl -> put_Highlighted(This,prop) ) 

#define MouseSearchAttributesSettings_get_Italic(This,prop)	\
    ( (This)->lpVtbl -> get_Italic(This,prop) ) 

#define MouseSearchAttributesSettings_put_Italic(This,prop)	\
    ( (This)->lpVtbl -> put_Italic(This,prop) ) 

#define MouseSearchAttributesSettings_get_Strikeout(This,prop)	\
    ( (This)->lpVtbl -> get_Strikeout(This,prop) ) 

#define MouseSearchAttributesSettings_put_Strikeout(This,prop)	\
    ( (This)->lpVtbl -> put_Strikeout(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MouseSearchAttributesSettings_INTERFACE_DEFINED__ */


#ifndef __LineFilterSettings_INTERFACE_DEFINED__
#define __LineFilterSettings_INTERFACE_DEFINED__

/* interface LineFilterSettings */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_LineFilterSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AE828844-7DD7-4fa3-9B9A-80D18E241449")
    LineFilterSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ LineFilterMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Status( 
            /* [in] */ LineFilterMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Characters( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Characters( 
            /* [in] */ BSTR prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LineFilterSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LineFilterSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LineFilterSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LineFilterSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LineFilterSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LineFilterSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LineFilterSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LineFilterSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            LineFilterSettings * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LineFilterSettings * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            LineFilterSettings * This,
            /* [retval][out] */ LineFilterMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Status )( 
            LineFilterSettings * This,
            /* [in] */ LineFilterMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            LineFilterSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            LineFilterSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Characters )( 
            LineFilterSettings * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Characters )( 
            LineFilterSettings * This,
            /* [in] */ BSTR prop);
        
        END_INTERFACE
    } LineFilterSettingsVtbl;

    interface LineFilterSettings
    {
        CONST_VTBL struct LineFilterSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LineFilterSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LineFilterSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LineFilterSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LineFilterSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LineFilterSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LineFilterSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LineFilterSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LineFilterSettings_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define LineFilterSettings_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define LineFilterSettings_get_Status(This,prop)	\
    ( (This)->lpVtbl -> get_Status(This,prop) ) 

#define LineFilterSettings_put_Status(This,prop)	\
    ( (This)->lpVtbl -> put_Status(This,prop) ) 

#define LineFilterSettings_get_Position(This,prop)	\
    ( (This)->lpVtbl -> get_Position(This,prop) ) 

#define LineFilterSettings_put_Position(This,prop)	\
    ( (This)->lpVtbl -> put_Position(This,prop) ) 

#define LineFilterSettings_get_Characters(This,prop)	\
    ( (This)->lpVtbl -> get_Characters(This,prop) ) 

#define LineFilterSettings_put_Characters(This,prop)	\
    ( (This)->lpVtbl -> put_Characters(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LineFilterSettings_INTERFACE_DEFINED__ */


#ifndef __ScreenSettings_INTERFACE_DEFINED__
#define __ScreenSettings_INTERFACE_DEFINED__

/* interface ScreenSettings */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ScreenSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e52be567-cce5-4c69-ab71-2caa455459a2")
    ScreenSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Voice( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Voice( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rate( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rate( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Pitch( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Pitch( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Tone( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Tone( 
            /* [in] */ VARIANT prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Volume( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Volume( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Punctuation( 
            /* [retval][out] */ PunctuationSettings **punc) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Numbers( 
            /* [retval][out] */ NumberMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Numbers( 
            /* [in] */ NumberMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CapitalizationAlert( 
            /* [retval][out] */ CapitalizationMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CapitalizationAlert( 
            /* [in] */ CapitalizationMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FormatAlert( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FormatAlert( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpellAlphaNumeric( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpellAlphaNumeric( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SplitMixedCaseWords( 
            /* [retval][out] */ MixedCaseMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SplitMixedCaseWords( 
            /* [in] */ MixedCaseMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RepeatFilter( 
            /* [retval][out] */ RepeatMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RepeatFilter( 
            /* [in] */ RepeatMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RepeatValue( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RepeatValue( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BlankLines( 
            /* [retval][out] */ BlankLinesMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BlankLines( 
            /* [in] */ BlankLinesMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SignalCursorPosition( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SignalCursorPosition( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AttributeChanges( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AttributeChanges( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadParagraphStyle( 
            /* [retval][out] */ AutoMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadParagraphStyle( 
            /* [in] */ AutoMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineFilter( 
            /* [retval][out] */ LineFilterSettings **lineFilter) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ScreenSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ScreenSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ScreenSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ScreenSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ScreenSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ScreenSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ScreenSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ScreenSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ScreenSettings * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ScreenSettings * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Voice )( 
            ScreenSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Voice )( 
            ScreenSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            ScreenSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            ScreenSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pitch )( 
            ScreenSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Pitch )( 
            ScreenSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tone )( 
            ScreenSettings * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tone )( 
            ScreenSettings * This,
            /* [in] */ VARIANT prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Volume )( 
            ScreenSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Volume )( 
            ScreenSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Punctuation )( 
            ScreenSettings * This,
            /* [retval][out] */ PunctuationSettings **punc);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Numbers )( 
            ScreenSettings * This,
            /* [retval][out] */ NumberMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Numbers )( 
            ScreenSettings * This,
            /* [in] */ NumberMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CapitalizationAlert )( 
            ScreenSettings * This,
            /* [retval][out] */ CapitalizationMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CapitalizationAlert )( 
            ScreenSettings * This,
            /* [in] */ CapitalizationMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FormatAlert )( 
            ScreenSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FormatAlert )( 
            ScreenSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpellAlphaNumeric )( 
            ScreenSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpellAlphaNumeric )( 
            ScreenSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SplitMixedCaseWords )( 
            ScreenSettings * This,
            /* [retval][out] */ MixedCaseMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SplitMixedCaseWords )( 
            ScreenSettings * This,
            /* [in] */ MixedCaseMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RepeatFilter )( 
            ScreenSettings * This,
            /* [retval][out] */ RepeatMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RepeatFilter )( 
            ScreenSettings * This,
            /* [in] */ RepeatMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RepeatValue )( 
            ScreenSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RepeatValue )( 
            ScreenSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlankLines )( 
            ScreenSettings * This,
            /* [retval][out] */ BlankLinesMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlankLines )( 
            ScreenSettings * This,
            /* [in] */ BlankLinesMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SignalCursorPosition )( 
            ScreenSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SignalCursorPosition )( 
            ScreenSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AttributeChanges )( 
            ScreenSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AttributeChanges )( 
            ScreenSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadParagraphStyle )( 
            ScreenSettings * This,
            /* [retval][out] */ AutoMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadParagraphStyle )( 
            ScreenSettings * This,
            /* [in] */ AutoMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineFilter )( 
            ScreenSettings * This,
            /* [retval][out] */ LineFilterSettings **lineFilter);
        
        END_INTERFACE
    } ScreenSettingsVtbl;

    interface ScreenSettings
    {
        CONST_VTBL struct ScreenSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ScreenSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ScreenSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ScreenSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ScreenSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ScreenSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ScreenSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ScreenSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ScreenSettings_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ScreenSettings_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ScreenSettings_get_Voice(This,prop)	\
    ( (This)->lpVtbl -> get_Voice(This,prop) ) 

#define ScreenSettings_put_Voice(This,prop)	\
    ( (This)->lpVtbl -> put_Voice(This,prop) ) 

#define ScreenSettings_get_Rate(This,prop)	\
    ( (This)->lpVtbl -> get_Rate(This,prop) ) 

#define ScreenSettings_put_Rate(This,prop)	\
    ( (This)->lpVtbl -> put_Rate(This,prop) ) 

#define ScreenSettings_get_Pitch(This,prop)	\
    ( (This)->lpVtbl -> get_Pitch(This,prop) ) 

#define ScreenSettings_put_Pitch(This,prop)	\
    ( (This)->lpVtbl -> put_Pitch(This,prop) ) 

#define ScreenSettings_get_Tone(This,prop)	\
    ( (This)->lpVtbl -> get_Tone(This,prop) ) 

#define ScreenSettings_put_Tone(This,prop)	\
    ( (This)->lpVtbl -> put_Tone(This,prop) ) 

#define ScreenSettings_get_Volume(This,prop)	\
    ( (This)->lpVtbl -> get_Volume(This,prop) ) 

#define ScreenSettings_put_Volume(This,prop)	\
    ( (This)->lpVtbl -> put_Volume(This,prop) ) 

#define ScreenSettings_get_Punctuation(This,punc)	\
    ( (This)->lpVtbl -> get_Punctuation(This,punc) ) 

#define ScreenSettings_get_Numbers(This,prop)	\
    ( (This)->lpVtbl -> get_Numbers(This,prop) ) 

#define ScreenSettings_put_Numbers(This,prop)	\
    ( (This)->lpVtbl -> put_Numbers(This,prop) ) 

#define ScreenSettings_get_CapitalizationAlert(This,prop)	\
    ( (This)->lpVtbl -> get_CapitalizationAlert(This,prop) ) 

#define ScreenSettings_put_CapitalizationAlert(This,prop)	\
    ( (This)->lpVtbl -> put_CapitalizationAlert(This,prop) ) 

#define ScreenSettings_get_FormatAlert(This,prop)	\
    ( (This)->lpVtbl -> get_FormatAlert(This,prop) ) 

#define ScreenSettings_put_FormatAlert(This,prop)	\
    ( (This)->lpVtbl -> put_FormatAlert(This,prop) ) 

#define ScreenSettings_get_SpellAlphaNumeric(This,prop)	\
    ( (This)->lpVtbl -> get_SpellAlphaNumeric(This,prop) ) 

#define ScreenSettings_put_SpellAlphaNumeric(This,prop)	\
    ( (This)->lpVtbl -> put_SpellAlphaNumeric(This,prop) ) 

#define ScreenSettings_get_SplitMixedCaseWords(This,prop)	\
    ( (This)->lpVtbl -> get_SplitMixedCaseWords(This,prop) ) 

#define ScreenSettings_put_SplitMixedCaseWords(This,prop)	\
    ( (This)->lpVtbl -> put_SplitMixedCaseWords(This,prop) ) 

#define ScreenSettings_get_RepeatFilter(This,prop)	\
    ( (This)->lpVtbl -> get_RepeatFilter(This,prop) ) 

#define ScreenSettings_put_RepeatFilter(This,prop)	\
    ( (This)->lpVtbl -> put_RepeatFilter(This,prop) ) 

#define ScreenSettings_get_RepeatValue(This,prop)	\
    ( (This)->lpVtbl -> get_RepeatValue(This,prop) ) 

#define ScreenSettings_put_RepeatValue(This,prop)	\
    ( (This)->lpVtbl -> put_RepeatValue(This,prop) ) 

#define ScreenSettings_get_BlankLines(This,prop)	\
    ( (This)->lpVtbl -> get_BlankLines(This,prop) ) 

#define ScreenSettings_put_BlankLines(This,prop)	\
    ( (This)->lpVtbl -> put_BlankLines(This,prop) ) 

#define ScreenSettings_get_SignalCursorPosition(This,prop)	\
    ( (This)->lpVtbl -> get_SignalCursorPosition(This,prop) ) 

#define ScreenSettings_put_SignalCursorPosition(This,prop)	\
    ( (This)->lpVtbl -> put_SignalCursorPosition(This,prop) ) 

#define ScreenSettings_get_AttributeChanges(This,prop)	\
    ( (This)->lpVtbl -> get_AttributeChanges(This,prop) ) 

#define ScreenSettings_put_AttributeChanges(This,prop)	\
    ( (This)->lpVtbl -> put_AttributeChanges(This,prop) ) 

#define ScreenSettings_get_ReadParagraphStyle(This,prop)	\
    ( (This)->lpVtbl -> get_ReadParagraphStyle(This,prop) ) 

#define ScreenSettings_put_ReadParagraphStyle(This,prop)	\
    ( (This)->lpVtbl -> put_ReadParagraphStyle(This,prop) ) 

#define ScreenSettings_get_LineFilter(This,lineFilter)	\
    ( (This)->lpVtbl -> get_LineFilter(This,lineFilter) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ScreenSettings_INTERFACE_DEFINED__ */


#ifndef __KeyboardSettings_INTERFACE_DEFINED__
#define __KeyboardSettings_INTERFACE_DEFINED__

/* interface KeyboardSettings */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_KeyboardSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("16ec8f0f-849a-4b7f-aff9-b30fa22f8f54")
    KeyboardSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Voice( 
            /* [retval][out] */ KeyboardVoiceMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Voice( 
            /* [in] */ KeyboardVoiceMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rate( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rate( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Pitch( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Pitch( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Tone( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Tone( 
            /* [in] */ VARIANT prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Volume( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Volume( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Punctuation( 
            /* [retval][out] */ PunctuationSettings **punc) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpecialKeys( 
            /* [retval][out] */ SpecialKeySettings **specialKeys) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CapitalMode( 
            /* [retval][out] */ CapitalizationMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CapitalMode( 
            /* [in] */ CapitalizationMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Interruptability( 
            /* [retval][out] */ KeyboardInterruptabilityMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Interruptability( 
            /* [in] */ KeyboardInterruptabilityMode prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct KeyboardSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            KeyboardSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            KeyboardSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            KeyboardSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            KeyboardSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            KeyboardSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            KeyboardSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            KeyboardSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            KeyboardSettings * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            KeyboardSettings * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Voice )( 
            KeyboardSettings * This,
            /* [retval][out] */ KeyboardVoiceMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Voice )( 
            KeyboardSettings * This,
            /* [in] */ KeyboardVoiceMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            KeyboardSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            KeyboardSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pitch )( 
            KeyboardSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Pitch )( 
            KeyboardSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tone )( 
            KeyboardSettings * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tone )( 
            KeyboardSettings * This,
            /* [in] */ VARIANT prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Volume )( 
            KeyboardSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Volume )( 
            KeyboardSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Punctuation )( 
            KeyboardSettings * This,
            /* [retval][out] */ PunctuationSettings **punc);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecialKeys )( 
            KeyboardSettings * This,
            /* [retval][out] */ SpecialKeySettings **specialKeys);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CapitalMode )( 
            KeyboardSettings * This,
            /* [retval][out] */ CapitalizationMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CapitalMode )( 
            KeyboardSettings * This,
            /* [in] */ CapitalizationMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Interruptability )( 
            KeyboardSettings * This,
            /* [retval][out] */ KeyboardInterruptabilityMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Interruptability )( 
            KeyboardSettings * This,
            /* [in] */ KeyboardInterruptabilityMode prop);
        
        END_INTERFACE
    } KeyboardSettingsVtbl;

    interface KeyboardSettings
    {
        CONST_VTBL struct KeyboardSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define KeyboardSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define KeyboardSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define KeyboardSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define KeyboardSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define KeyboardSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define KeyboardSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define KeyboardSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define KeyboardSettings_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define KeyboardSettings_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define KeyboardSettings_get_Voice(This,prop)	\
    ( (This)->lpVtbl -> get_Voice(This,prop) ) 

#define KeyboardSettings_put_Voice(This,prop)	\
    ( (This)->lpVtbl -> put_Voice(This,prop) ) 

#define KeyboardSettings_get_Rate(This,prop)	\
    ( (This)->lpVtbl -> get_Rate(This,prop) ) 

#define KeyboardSettings_put_Rate(This,prop)	\
    ( (This)->lpVtbl -> put_Rate(This,prop) ) 

#define KeyboardSettings_get_Pitch(This,prop)	\
    ( (This)->lpVtbl -> get_Pitch(This,prop) ) 

#define KeyboardSettings_put_Pitch(This,prop)	\
    ( (This)->lpVtbl -> put_Pitch(This,prop) ) 

#define KeyboardSettings_get_Tone(This,prop)	\
    ( (This)->lpVtbl -> get_Tone(This,prop) ) 

#define KeyboardSettings_put_Tone(This,prop)	\
    ( (This)->lpVtbl -> put_Tone(This,prop) ) 

#define KeyboardSettings_get_Volume(This,prop)	\
    ( (This)->lpVtbl -> get_Volume(This,prop) ) 

#define KeyboardSettings_put_Volume(This,prop)	\
    ( (This)->lpVtbl -> put_Volume(This,prop) ) 

#define KeyboardSettings_get_Punctuation(This,punc)	\
    ( (This)->lpVtbl -> get_Punctuation(This,punc) ) 

#define KeyboardSettings_get_SpecialKeys(This,specialKeys)	\
    ( (This)->lpVtbl -> get_SpecialKeys(This,specialKeys) ) 

#define KeyboardSettings_get_CapitalMode(This,prop)	\
    ( (This)->lpVtbl -> get_CapitalMode(This,prop) ) 

#define KeyboardSettings_put_CapitalMode(This,prop)	\
    ( (This)->lpVtbl -> put_CapitalMode(This,prop) ) 

#define KeyboardSettings_get_Interruptability(This,prop)	\
    ( (This)->lpVtbl -> get_Interruptability(This,prop) ) 

#define KeyboardSettings_put_Interruptability(This,prop)	\
    ( (This)->lpVtbl -> put_Interruptability(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __KeyboardSettings_INTERFACE_DEFINED__ */


#ifndef __MouseSettings_INTERFACE_DEFINED__
#define __MouseSettings_INTERFACE_DEFINED__

/* interface MouseSettings */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_MouseSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6b979d0d-51a4-4495-89e9-8a221b471e10")
    MouseSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Voice( 
            /* [retval][out] */ MouseVoiceMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Voice( 
            /* [in] */ MouseVoiceMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rate( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rate( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Pitch( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Pitch( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Tone( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Tone( 
            /* [in] */ VARIANT prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Volume( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Volume( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Boundary( 
            /* [retval][out] */ MouseBoundaryMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Boundary( 
            /* [in] */ MouseBoundaryMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Buttons( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Buttons( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PointerUpDelta( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PointerUpDelta( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PointerDownDelta( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PointerDownDelta( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PointerLeftDelta( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PointerLeftDelta( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PointerRightDelta( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PointerRightDelta( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Interruptability( 
            /* [retval][out] */ MouseInterruptabilityMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Interruptability( 
            /* [in] */ MouseInterruptabilityMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TrackFocus( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TrackFocus( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UpDownSpeak( 
            /* [retval][out] */ MouseUpDownMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UpDownSpeak( 
            /* [in] */ MouseUpDownMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SearchAttributes( 
            /* [retval][out] */ MouseSearchAttributesSettings **searchAttribs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MouseSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MouseSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MouseSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MouseSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MouseSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MouseSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MouseSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MouseSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MouseSettings * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MouseSettings * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Voice )( 
            MouseSettings * This,
            /* [retval][out] */ MouseVoiceMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Voice )( 
            MouseSettings * This,
            /* [in] */ MouseVoiceMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            MouseSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            MouseSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pitch )( 
            MouseSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Pitch )( 
            MouseSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tone )( 
            MouseSettings * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tone )( 
            MouseSettings * This,
            /* [in] */ VARIANT prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Volume )( 
            MouseSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Volume )( 
            MouseSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Boundary )( 
            MouseSettings * This,
            /* [retval][out] */ MouseBoundaryMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Boundary )( 
            MouseSettings * This,
            /* [in] */ MouseBoundaryMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Buttons )( 
            MouseSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Buttons )( 
            MouseSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PointerUpDelta )( 
            MouseSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PointerUpDelta )( 
            MouseSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PointerDownDelta )( 
            MouseSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PointerDownDelta )( 
            MouseSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PointerLeftDelta )( 
            MouseSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PointerLeftDelta )( 
            MouseSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PointerRightDelta )( 
            MouseSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PointerRightDelta )( 
            MouseSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Interruptability )( 
            MouseSettings * This,
            /* [retval][out] */ MouseInterruptabilityMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Interruptability )( 
            MouseSettings * This,
            /* [in] */ MouseInterruptabilityMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrackFocus )( 
            MouseSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrackFocus )( 
            MouseSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpDownSpeak )( 
            MouseSettings * This,
            /* [retval][out] */ MouseUpDownMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UpDownSpeak )( 
            MouseSettings * This,
            /* [in] */ MouseUpDownMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SearchAttributes )( 
            MouseSettings * This,
            /* [retval][out] */ MouseSearchAttributesSettings **searchAttribs);
        
        END_INTERFACE
    } MouseSettingsVtbl;

    interface MouseSettings
    {
        CONST_VTBL struct MouseSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MouseSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MouseSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MouseSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MouseSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MouseSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MouseSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MouseSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MouseSettings_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define MouseSettings_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define MouseSettings_get_Voice(This,prop)	\
    ( (This)->lpVtbl -> get_Voice(This,prop) ) 

#define MouseSettings_put_Voice(This,prop)	\
    ( (This)->lpVtbl -> put_Voice(This,prop) ) 

#define MouseSettings_get_Rate(This,prop)	\
    ( (This)->lpVtbl -> get_Rate(This,prop) ) 

#define MouseSettings_put_Rate(This,prop)	\
    ( (This)->lpVtbl -> put_Rate(This,prop) ) 

#define MouseSettings_get_Pitch(This,prop)	\
    ( (This)->lpVtbl -> get_Pitch(This,prop) ) 

#define MouseSettings_put_Pitch(This,prop)	\
    ( (This)->lpVtbl -> put_Pitch(This,prop) ) 

#define MouseSettings_get_Tone(This,prop)	\
    ( (This)->lpVtbl -> get_Tone(This,prop) ) 

#define MouseSettings_put_Tone(This,prop)	\
    ( (This)->lpVtbl -> put_Tone(This,prop) ) 

#define MouseSettings_get_Volume(This,prop)	\
    ( (This)->lpVtbl -> get_Volume(This,prop) ) 

#define MouseSettings_put_Volume(This,prop)	\
    ( (This)->lpVtbl -> put_Volume(This,prop) ) 

#define MouseSettings_get_Boundary(This,prop)	\
    ( (This)->lpVtbl -> get_Boundary(This,prop) ) 

#define MouseSettings_put_Boundary(This,prop)	\
    ( (This)->lpVtbl -> put_Boundary(This,prop) ) 

#define MouseSettings_get_Buttons(This,prop)	\
    ( (This)->lpVtbl -> get_Buttons(This,prop) ) 

#define MouseSettings_put_Buttons(This,prop)	\
    ( (This)->lpVtbl -> put_Buttons(This,prop) ) 

#define MouseSettings_get_PointerUpDelta(This,prop)	\
    ( (This)->lpVtbl -> get_PointerUpDelta(This,prop) ) 

#define MouseSettings_put_PointerUpDelta(This,prop)	\
    ( (This)->lpVtbl -> put_PointerUpDelta(This,prop) ) 

#define MouseSettings_get_PointerDownDelta(This,prop)	\
    ( (This)->lpVtbl -> get_PointerDownDelta(This,prop) ) 

#define MouseSettings_put_PointerDownDelta(This,prop)	\
    ( (This)->lpVtbl -> put_PointerDownDelta(This,prop) ) 

#define MouseSettings_get_PointerLeftDelta(This,prop)	\
    ( (This)->lpVtbl -> get_PointerLeftDelta(This,prop) ) 

#define MouseSettings_put_PointerLeftDelta(This,prop)	\
    ( (This)->lpVtbl -> put_PointerLeftDelta(This,prop) ) 

#define MouseSettings_get_PointerRightDelta(This,prop)	\
    ( (This)->lpVtbl -> get_PointerRightDelta(This,prop) ) 

#define MouseSettings_put_PointerRightDelta(This,prop)	\
    ( (This)->lpVtbl -> put_PointerRightDelta(This,prop) ) 

#define MouseSettings_get_Interruptability(This,prop)	\
    ( (This)->lpVtbl -> get_Interruptability(This,prop) ) 

#define MouseSettings_put_Interruptability(This,prop)	\
    ( (This)->lpVtbl -> put_Interruptability(This,prop) ) 

#define MouseSettings_get_TrackFocus(This,prop)	\
    ( (This)->lpVtbl -> get_TrackFocus(This,prop) ) 

#define MouseSettings_put_TrackFocus(This,prop)	\
    ( (This)->lpVtbl -> put_TrackFocus(This,prop) ) 

#define MouseSettings_get_UpDownSpeak(This,prop)	\
    ( (This)->lpVtbl -> get_UpDownSpeak(This,prop) ) 

#define MouseSettings_put_UpDownSpeak(This,prop)	\
    ( (This)->lpVtbl -> put_UpDownSpeak(This,prop) ) 

#define MouseSettings_get_SearchAttributes(This,searchAttribs)	\
    ( (This)->lpVtbl -> get_SearchAttributes(This,searchAttribs) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MouseSettings_INTERFACE_DEFINED__ */


#ifndef __GeneralSettings_INTERFACE_DEFINED__
#define __GeneralSettings_INTERFACE_DEFINED__

/* interface GeneralSettings */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_GeneralSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("560a43e2-cfbc-44ee-82a1-1149ebb9569f")
    GeneralSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Voice( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Voice( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Braille( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Braille( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HotKeys( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HotKeys( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorKeys( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CursorKeys( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HighlightTrack( 
            /* [retval][out] */ AutoMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HighlightTrack( 
            /* [in] */ AutoMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharacterDictionary( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CharacterDictionary( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeyLabelDictionary( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeyLabelDictionary( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExceptionDictionary( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExceptionDictionary( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_GraphicDictionary( 
            /* [retval][out] */ GraphicDictionaryMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_GraphicDictionary( 
            /* [in] */ GraphicDictionaryMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColorDictionary( 
            /* [retval][out] */ ColorDictionaryMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ColorDictionary( 
            /* [in] */ ColorDictionaryMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowSpeakWindowsInEditBoxes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowSpeakWindowsInEditBoxes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorDelay( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CursorDelay( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TriggerDelay( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TriggerDelay( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpaceThreshold( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpaceThreshold( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowAutoRedraw( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowAutoRedraw( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeakTooltips( 
            /* [retval][out] */ AutoMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeakTooltips( 
            /* [in] */ AutoMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrowseMode( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BrowseMode( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeBoxInHighlight( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeBoxInHighlight( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HighlightedText( 
            /* [retval][out] */ HighlightTextMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HighlightedText( 
            /* [in] */ HighlightTextMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeUserWindowWithBox( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeUserWindowWithBox( 
            /* [in] */ short prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GeneralSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            GeneralSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            GeneralSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            GeneralSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            GeneralSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            GeneralSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            GeneralSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            GeneralSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            GeneralSettings * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            GeneralSettings * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Voice )( 
            GeneralSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Voice )( 
            GeneralSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Braille )( 
            GeneralSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Braille )( 
            GeneralSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HotKeys )( 
            GeneralSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HotKeys )( 
            GeneralSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorKeys )( 
            GeneralSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CursorKeys )( 
            GeneralSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HighlightTrack )( 
            GeneralSettings * This,
            /* [retval][out] */ AutoMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HighlightTrack )( 
            GeneralSettings * This,
            /* [in] */ AutoMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterDictionary )( 
            GeneralSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterDictionary )( 
            GeneralSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeyLabelDictionary )( 
            GeneralSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeyLabelDictionary )( 
            GeneralSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExceptionDictionary )( 
            GeneralSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExceptionDictionary )( 
            GeneralSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GraphicDictionary )( 
            GeneralSettings * This,
            /* [retval][out] */ GraphicDictionaryMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GraphicDictionary )( 
            GeneralSettings * This,
            /* [in] */ GraphicDictionaryMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorDictionary )( 
            GeneralSettings * This,
            /* [retval][out] */ ColorDictionaryMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorDictionary )( 
            GeneralSettings * This,
            /* [in] */ ColorDictionaryMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowSpeakWindowsInEditBoxes )( 
            GeneralSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowSpeakWindowsInEditBoxes )( 
            GeneralSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorDelay )( 
            GeneralSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CursorDelay )( 
            GeneralSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TriggerDelay )( 
            GeneralSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TriggerDelay )( 
            GeneralSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceThreshold )( 
            GeneralSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceThreshold )( 
            GeneralSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowAutoRedraw )( 
            GeneralSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowAutoRedraw )( 
            GeneralSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeakTooltips )( 
            GeneralSettings * This,
            /* [retval][out] */ AutoMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeakTooltips )( 
            GeneralSettings * This,
            /* [in] */ AutoMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseMode )( 
            GeneralSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BrowseMode )( 
            GeneralSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeBoxInHighlight )( 
            GeneralSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeBoxInHighlight )( 
            GeneralSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HighlightedText )( 
            GeneralSettings * This,
            /* [retval][out] */ HighlightTextMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HighlightedText )( 
            GeneralSettings * This,
            /* [in] */ HighlightTextMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeUserWindowWithBox )( 
            GeneralSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeUserWindowWithBox )( 
            GeneralSettings * This,
            /* [in] */ short prop);
        
        END_INTERFACE
    } GeneralSettingsVtbl;

    interface GeneralSettings
    {
        CONST_VTBL struct GeneralSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define GeneralSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define GeneralSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define GeneralSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define GeneralSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define GeneralSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define GeneralSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define GeneralSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define GeneralSettings_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define GeneralSettings_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define GeneralSettings_get_Voice(This,prop)	\
    ( (This)->lpVtbl -> get_Voice(This,prop) ) 

#define GeneralSettings_put_Voice(This,prop)	\
    ( (This)->lpVtbl -> put_Voice(This,prop) ) 

#define GeneralSettings_get_Braille(This,prop)	\
    ( (This)->lpVtbl -> get_Braille(This,prop) ) 

#define GeneralSettings_put_Braille(This,prop)	\
    ( (This)->lpVtbl -> put_Braille(This,prop) ) 

#define GeneralSettings_get_HotKeys(This,prop)	\
    ( (This)->lpVtbl -> get_HotKeys(This,prop) ) 

#define GeneralSettings_put_HotKeys(This,prop)	\
    ( (This)->lpVtbl -> put_HotKeys(This,prop) ) 

#define GeneralSettings_get_CursorKeys(This,prop)	\
    ( (This)->lpVtbl -> get_CursorKeys(This,prop) ) 

#define GeneralSettings_put_CursorKeys(This,prop)	\
    ( (This)->lpVtbl -> put_CursorKeys(This,prop) ) 

#define GeneralSettings_get_HighlightTrack(This,prop)	\
    ( (This)->lpVtbl -> get_HighlightTrack(This,prop) ) 

#define GeneralSettings_put_HighlightTrack(This,prop)	\
    ( (This)->lpVtbl -> put_HighlightTrack(This,prop) ) 

#define GeneralSettings_get_CharacterDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterDictionary(This,prop) ) 

#define GeneralSettings_put_CharacterDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterDictionary(This,prop) ) 

#define GeneralSettings_get_KeyLabelDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_KeyLabelDictionary(This,prop) ) 

#define GeneralSettings_put_KeyLabelDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_KeyLabelDictionary(This,prop) ) 

#define GeneralSettings_get_ExceptionDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_ExceptionDictionary(This,prop) ) 

#define GeneralSettings_put_ExceptionDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_ExceptionDictionary(This,prop) ) 

#define GeneralSettings_get_GraphicDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_GraphicDictionary(This,prop) ) 

#define GeneralSettings_put_GraphicDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_GraphicDictionary(This,prop) ) 

#define GeneralSettings_get_ColorDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_ColorDictionary(This,prop) ) 

#define GeneralSettings_put_ColorDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_ColorDictionary(This,prop) ) 

#define GeneralSettings_get_AllowSpeakWindowsInEditBoxes(This,prop)	\
    ( (This)->lpVtbl -> get_AllowSpeakWindowsInEditBoxes(This,prop) ) 

#define GeneralSettings_put_AllowSpeakWindowsInEditBoxes(This,prop)	\
    ( (This)->lpVtbl -> put_AllowSpeakWindowsInEditBoxes(This,prop) ) 

#define GeneralSettings_get_CursorDelay(This,prop)	\
    ( (This)->lpVtbl -> get_CursorDelay(This,prop) ) 

#define GeneralSettings_put_CursorDelay(This,prop)	\
    ( (This)->lpVtbl -> put_CursorDelay(This,prop) ) 

#define GeneralSettings_get_TriggerDelay(This,prop)	\
    ( (This)->lpVtbl -> get_TriggerDelay(This,prop) ) 

#define GeneralSettings_put_TriggerDelay(This,prop)	\
    ( (This)->lpVtbl -> put_TriggerDelay(This,prop) ) 

#define GeneralSettings_get_SpaceThreshold(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceThreshold(This,prop) ) 

#define GeneralSettings_put_SpaceThreshold(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceThreshold(This,prop) ) 

#define GeneralSettings_get_AllowAutoRedraw(This,prop)	\
    ( (This)->lpVtbl -> get_AllowAutoRedraw(This,prop) ) 

#define GeneralSettings_put_AllowAutoRedraw(This,prop)	\
    ( (This)->lpVtbl -> put_AllowAutoRedraw(This,prop) ) 

#define GeneralSettings_get_SpeakTooltips(This,prop)	\
    ( (This)->lpVtbl -> get_SpeakTooltips(This,prop) ) 

#define GeneralSettings_put_SpeakTooltips(This,prop)	\
    ( (This)->lpVtbl -> put_SpeakTooltips(This,prop) ) 

#define GeneralSettings_get_BrowseMode(This,prop)	\
    ( (This)->lpVtbl -> get_BrowseMode(This,prop) ) 

#define GeneralSettings_put_BrowseMode(This,prop)	\
    ( (This)->lpVtbl -> put_BrowseMode(This,prop) ) 

#define GeneralSettings_get_IncludeBoxInHighlight(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeBoxInHighlight(This,prop) ) 

#define GeneralSettings_put_IncludeBoxInHighlight(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeBoxInHighlight(This,prop) ) 

#define GeneralSettings_get_HighlightedText(This,prop)	\
    ( (This)->lpVtbl -> get_HighlightedText(This,prop) ) 

#define GeneralSettings_put_HighlightedText(This,prop)	\
    ( (This)->lpVtbl -> put_HighlightedText(This,prop) ) 

#define GeneralSettings_get_IncludeUserWindowWithBox(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeUserWindowWithBox(This,prop) ) 

#define GeneralSettings_put_IncludeUserWindowWithBox(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeUserWindowWithBox(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __GeneralSettings_INTERFACE_DEFINED__ */


#ifndef __GlobalSettings_INTERFACE_DEFINED__
#define __GlobalSettings_INTERFACE_DEFINED__

/* interface GlobalSettings */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_GlobalSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d5c04d9e-f114-43bd-89c8-5277182a8a56")
    GlobalSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MenuLevel( 
            /* [retval][out] */ MenuMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MenuLevel( 
            /* [in] */ MenuMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_GlobalSettings( 
            /* [retval][out] */ GlobalMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_GlobalSettings( 
            /* [in] */ GlobalMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HyperactiveStatus( 
            /* [retval][out] */ HyperactiveMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HyperactiveStatus( 
            /* [in] */ HyperactiveMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoloadStatus( 
            /* [retval][out] */ AutoLoadMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoloadStatus( 
            /* [in] */ AutoLoadMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ShowUserWindowOutline( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ShowUserWindowOutline( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorBlinkRate( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CursorBlinkRate( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MinimumGraphicSize( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MinimumGraphicSize( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MaximumGraphicSize( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MaximumGraphicSize( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseClipBoundariesWithMouse( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseClipBoundariesWithMouse( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnhancedSupportForCurrentWordDocument( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnhancedSupportForCurrentWordDocument( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GlobalSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            GlobalSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            GlobalSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            GlobalSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            GlobalSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            GlobalSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            GlobalSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            GlobalSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            GlobalSettings * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            GlobalSettings * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MenuLevel )( 
            GlobalSettings * This,
            /* [retval][out] */ MenuMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MenuLevel )( 
            GlobalSettings * This,
            /* [in] */ MenuMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GlobalSettings )( 
            GlobalSettings * This,
            /* [retval][out] */ GlobalMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GlobalSettings )( 
            GlobalSettings * This,
            /* [in] */ GlobalMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HyperactiveStatus )( 
            GlobalSettings * This,
            /* [retval][out] */ HyperactiveMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HyperactiveStatus )( 
            GlobalSettings * This,
            /* [in] */ HyperactiveMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoloadStatus )( 
            GlobalSettings * This,
            /* [retval][out] */ AutoLoadMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoloadStatus )( 
            GlobalSettings * This,
            /* [in] */ AutoLoadMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ShowUserWindowOutline )( 
            GlobalSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ShowUserWindowOutline )( 
            GlobalSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorBlinkRate )( 
            GlobalSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CursorBlinkRate )( 
            GlobalSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumGraphicSize )( 
            GlobalSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MinimumGraphicSize )( 
            GlobalSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaximumGraphicSize )( 
            GlobalSettings * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaximumGraphicSize )( 
            GlobalSettings * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseClipBoundariesWithMouse )( 
            GlobalSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseClipBoundariesWithMouse )( 
            GlobalSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnhancedSupportForCurrentWordDocument )( 
            GlobalSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnhancedSupportForCurrentWordDocument )( 
            GlobalSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } GlobalSettingsVtbl;

    interface GlobalSettings
    {
        CONST_VTBL struct GlobalSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define GlobalSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define GlobalSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define GlobalSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define GlobalSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define GlobalSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define GlobalSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define GlobalSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define GlobalSettings_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define GlobalSettings_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define GlobalSettings_get_MenuLevel(This,prop)	\
    ( (This)->lpVtbl -> get_MenuLevel(This,prop) ) 

#define GlobalSettings_put_MenuLevel(This,prop)	\
    ( (This)->lpVtbl -> put_MenuLevel(This,prop) ) 

#define GlobalSettings_get_GlobalSettings(This,prop)	\
    ( (This)->lpVtbl -> get_GlobalSettings(This,prop) ) 

#define GlobalSettings_put_GlobalSettings(This,prop)	\
    ( (This)->lpVtbl -> put_GlobalSettings(This,prop) ) 

#define GlobalSettings_get_HyperactiveStatus(This,prop)	\
    ( (This)->lpVtbl -> get_HyperactiveStatus(This,prop) ) 

#define GlobalSettings_put_HyperactiveStatus(This,prop)	\
    ( (This)->lpVtbl -> put_HyperactiveStatus(This,prop) ) 

#define GlobalSettings_get_AutoloadStatus(This,prop)	\
    ( (This)->lpVtbl -> get_AutoloadStatus(This,prop) ) 

#define GlobalSettings_put_AutoloadStatus(This,prop)	\
    ( (This)->lpVtbl -> put_AutoloadStatus(This,prop) ) 

#define GlobalSettings_get_ShowUserWindowOutline(This,prop)	\
    ( (This)->lpVtbl -> get_ShowUserWindowOutline(This,prop) ) 

#define GlobalSettings_put_ShowUserWindowOutline(This,prop)	\
    ( (This)->lpVtbl -> put_ShowUserWindowOutline(This,prop) ) 

#define GlobalSettings_get_CursorBlinkRate(This,prop)	\
    ( (This)->lpVtbl -> get_CursorBlinkRate(This,prop) ) 

#define GlobalSettings_put_CursorBlinkRate(This,prop)	\
    ( (This)->lpVtbl -> put_CursorBlinkRate(This,prop) ) 

#define GlobalSettings_get_MinimumGraphicSize(This,prop)	\
    ( (This)->lpVtbl -> get_MinimumGraphicSize(This,prop) ) 

#define GlobalSettings_put_MinimumGraphicSize(This,prop)	\
    ( (This)->lpVtbl -> put_MinimumGraphicSize(This,prop) ) 

#define GlobalSettings_get_MaximumGraphicSize(This,prop)	\
    ( (This)->lpVtbl -> get_MaximumGraphicSize(This,prop) ) 

#define GlobalSettings_put_MaximumGraphicSize(This,prop)	\
    ( (This)->lpVtbl -> put_MaximumGraphicSize(This,prop) ) 

#define GlobalSettings_get_UseClipBoundariesWithMouse(This,prop)	\
    ( (This)->lpVtbl -> get_UseClipBoundariesWithMouse(This,prop) ) 

#define GlobalSettings_put_UseClipBoundariesWithMouse(This,prop)	\
    ( (This)->lpVtbl -> put_UseClipBoundariesWithMouse(This,prop) ) 

#define GlobalSettings_get_EnhancedSupportForCurrentWordDocument(This,prop)	\
    ( (This)->lpVtbl -> get_EnhancedSupportForCurrentWordDocument(This,prop) ) 

#define GlobalSettings_put_EnhancedSupportForCurrentWordDocument(This,prop)	\
    ( (This)->lpVtbl -> put_EnhancedSupportForCurrentWordDocument(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __GlobalSettings_INTERFACE_DEFINED__ */


#ifndef ___BrailleDisplay_INTERFACE_DEFINED__
#define ___BrailleDisplay_INTERFACE_DEFINED__

/* interface _BrailleDisplay */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__BrailleDisplay;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7fd24dc7-78cc-4a03-a295-c449bbc521b8")
    _BrailleDisplay : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *description) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Port( 
            /* [retval][out] */ BSTR *port) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Port( 
            /* [in] */ BSTR port) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommandLine( 
            /* [retval][out] */ BSTR *commandLine) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ BrailleDisplayType *type) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyChanges( 
            /* [optional][in] */ VARIANT port) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertKey( 
            /* [in] */ BSTR id) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CaptureKey( 
            /* [retval][out] */ BrailleHotKey **hotkey) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Keys( 
            /* [optional][in] */ VARIANT window,
            /* [retval][out] */ BrailleHotKeys **keys) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _BrailleDisplayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _BrailleDisplay * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _BrailleDisplay * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _BrailleDisplay * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _BrailleDisplay * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _BrailleDisplay * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _BrailleDisplay * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _BrailleDisplay * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            _BrailleDisplay * This,
            /* [retval][out] */ BSTR *description);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _BrailleDisplay * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _BrailleDisplay * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            _BrailleDisplay * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Port )( 
            _BrailleDisplay * This,
            /* [retval][out] */ BSTR *port);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Port )( 
            _BrailleDisplay * This,
            /* [in] */ BSTR port);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommandLine )( 
            _BrailleDisplay * This,
            /* [retval][out] */ BSTR *commandLine);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            _BrailleDisplay * This,
            /* [retval][out] */ BrailleDisplayType *type);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyChanges )( 
            _BrailleDisplay * This,
            /* [optional][in] */ VARIANT port);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertKey )( 
            _BrailleDisplay * This,
            /* [in] */ BSTR id);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CaptureKey )( 
            _BrailleDisplay * This,
            /* [retval][out] */ BrailleHotKey **hotkey);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Keys )( 
            _BrailleDisplay * This,
            /* [optional][in] */ VARIANT window,
            /* [retval][out] */ BrailleHotKeys **keys);
        
        END_INTERFACE
    } _BrailleDisplayVtbl;

    interface _BrailleDisplay
    {
        CONST_VTBL struct _BrailleDisplayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _BrailleDisplay_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _BrailleDisplay_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _BrailleDisplay_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _BrailleDisplay_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _BrailleDisplay_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _BrailleDisplay_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _BrailleDisplay_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _BrailleDisplay_get_Description(This,description)	\
    ( (This)->lpVtbl -> get_Description(This,description) ) 

#define _BrailleDisplay_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _BrailleDisplay_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _BrailleDisplay_get_Index(This,index)	\
    ( (This)->lpVtbl -> get_Index(This,index) ) 

#define _BrailleDisplay_get_Port(This,port)	\
    ( (This)->lpVtbl -> get_Port(This,port) ) 

#define _BrailleDisplay_put_Port(This,port)	\
    ( (This)->lpVtbl -> put_Port(This,port) ) 

#define _BrailleDisplay_get_CommandLine(This,commandLine)	\
    ( (This)->lpVtbl -> get_CommandLine(This,commandLine) ) 

#define _BrailleDisplay_get_Type(This,type)	\
    ( (This)->lpVtbl -> get_Type(This,type) ) 

#define _BrailleDisplay_ApplyChanges(This,port)	\
    ( (This)->lpVtbl -> ApplyChanges(This,port) ) 

#define _BrailleDisplay_InsertKey(This,id)	\
    ( (This)->lpVtbl -> InsertKey(This,id) ) 

#define _BrailleDisplay_CaptureKey(This,hotkey)	\
    ( (This)->lpVtbl -> CaptureKey(This,hotkey) ) 

#define _BrailleDisplay_Keys(This,window,keys)	\
    ( (This)->lpVtbl -> Keys(This,window,keys) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___BrailleDisplay_INTERFACE_DEFINED__ */


#ifndef ___Synthesizer_INTERFACE_DEFINED__
#define ___Synthesizer_INTERFACE_DEFINED__

/* interface _Synthesizer */
/* [object][helpcontext][version][hidden][dual][uuid] */ 


EXTERN_C const IID IID__Synthesizer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bc8ee32d-00b9-4ef1-a58d-f85703b9cd4c")
    _Synthesizer : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PortValue( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BaudRate( 
            /* [retval][out] */ BaudRate *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DataBits( 
            /* [retval][out] */ DataBits *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StopBits( 
            /* [retval][out] */ StopBits *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parity( 
            /* [retval][out] */ Parity *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FlowControl( 
            /* [retval][out] */ FlowControl *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SoundCard( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ActiveEngine( 
            /* [retval][out] */ Engine **engine) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseSpecifiedSpeechParameters( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseEngineSpecifiedSpeechParameters( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseAsBackupSynthesizer( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommandLine( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InstalledEngines( 
            /* [retval][out] */ Engines **engines) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PortType( 
            /* [retval][out] */ PortType *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PortValue( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BaudRate( 
            /* [in] */ BaudRate prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DataBits( 
            /* [in] */ DataBits prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StopBits( 
            /* [in] */ StopBits prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Parity( 
            /* [in] */ Parity prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FlowControl( 
            /* [in] */ FlowControl prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SoundCard( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseSpecifiedSpeechParameters( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseEngineSpecifiedSpeechParameters( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseAsBackupSynthesizer( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PortType( 
            /* [in] */ PortType prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MaxRate( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SuspendSpeech( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SuspendSpeech( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetSpeechParametersToCurrent( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveState( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RestoreState( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetNumberOfSoundCards( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetSoundCardDescription( 
            /* [in] */ long index,
            /* [retval][out] */ BSTR *description) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyChanges( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SwitchEngine( 
            Engine *engine) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Speak( 
            BSTR text) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _SynthesizerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Synthesizer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Synthesizer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Synthesizer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Synthesizer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Synthesizer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Synthesizer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Synthesizer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Synthesizer * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Synthesizer * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PortValue )( 
            _Synthesizer * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BaudRate )( 
            _Synthesizer * This,
            /* [retval][out] */ BaudRate *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataBits )( 
            _Synthesizer * This,
            /* [retval][out] */ DataBits *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StopBits )( 
            _Synthesizer * This,
            /* [retval][out] */ StopBits *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parity )( 
            _Synthesizer * This,
            /* [retval][out] */ Parity *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FlowControl )( 
            _Synthesizer * This,
            /* [retval][out] */ FlowControl *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SoundCard )( 
            _Synthesizer * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            _Synthesizer * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveEngine )( 
            _Synthesizer * This,
            /* [retval][out] */ Engine **engine);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseSpecifiedSpeechParameters )( 
            _Synthesizer * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseEngineSpecifiedSpeechParameters )( 
            _Synthesizer * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseAsBackupSynthesizer )( 
            _Synthesizer * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommandLine )( 
            _Synthesizer * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InstalledEngines )( 
            _Synthesizer * This,
            /* [retval][out] */ Engines **engines);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PortType )( 
            _Synthesizer * This,
            /* [retval][out] */ PortType *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PortValue )( 
            _Synthesizer * This,
            /* [in] */ long prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BaudRate )( 
            _Synthesizer * This,
            /* [in] */ BaudRate prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DataBits )( 
            _Synthesizer * This,
            /* [in] */ DataBits prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StopBits )( 
            _Synthesizer * This,
            /* [in] */ StopBits prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Parity )( 
            _Synthesizer * This,
            /* [in] */ Parity prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FlowControl )( 
            _Synthesizer * This,
            /* [in] */ FlowControl prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SoundCard )( 
            _Synthesizer * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            _Synthesizer * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseSpecifiedSpeechParameters )( 
            _Synthesizer * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseEngineSpecifiedSpeechParameters )( 
            _Synthesizer * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseAsBackupSynthesizer )( 
            _Synthesizer * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PortType )( 
            _Synthesizer * This,
            /* [in] */ PortType prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            _Synthesizer * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaxRate )( 
            _Synthesizer * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuspendSpeech )( 
            _Synthesizer * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SuspendSpeech )( 
            _Synthesizer * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetSpeechParametersToCurrent )( 
            _Synthesizer * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveState )( 
            _Synthesizer * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RestoreState )( 
            _Synthesizer * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetNumberOfSoundCards )( 
            _Synthesizer * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetSoundCardDescription )( 
            _Synthesizer * This,
            /* [in] */ long index,
            /* [retval][out] */ BSTR *description);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyChanges )( 
            _Synthesizer * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SwitchEngine )( 
            _Synthesizer * This,
            Engine *engine);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Speak )( 
            _Synthesizer * This,
            BSTR text);
        
        END_INTERFACE
    } _SynthesizerVtbl;

    interface _Synthesizer
    {
        CONST_VTBL struct _SynthesizerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Synthesizer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Synthesizer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Synthesizer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Synthesizer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Synthesizer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Synthesizer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Synthesizer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Synthesizer_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _Synthesizer_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Synthesizer_get_PortValue(This,prop)	\
    ( (This)->lpVtbl -> get_PortValue(This,prop) ) 

#define _Synthesizer_get_BaudRate(This,prop)	\
    ( (This)->lpVtbl -> get_BaudRate(This,prop) ) 

#define _Synthesizer_get_DataBits(This,prop)	\
    ( (This)->lpVtbl -> get_DataBits(This,prop) ) 

#define _Synthesizer_get_StopBits(This,prop)	\
    ( (This)->lpVtbl -> get_StopBits(This,prop) ) 

#define _Synthesizer_get_Parity(This,prop)	\
    ( (This)->lpVtbl -> get_Parity(This,prop) ) 

#define _Synthesizer_get_FlowControl(This,prop)	\
    ( (This)->lpVtbl -> get_FlowControl(This,prop) ) 

#define _Synthesizer_get_SoundCard(This,prop)	\
    ( (This)->lpVtbl -> get_SoundCard(This,prop) ) 

#define _Synthesizer_get_Location(This,prop)	\
    ( (This)->lpVtbl -> get_Location(This,prop) ) 

#define _Synthesizer_get_ActiveEngine(This,engine)	\
    ( (This)->lpVtbl -> get_ActiveEngine(This,engine) ) 

#define _Synthesizer_get_UseSpecifiedSpeechParameters(This,prop)	\
    ( (This)->lpVtbl -> get_UseSpecifiedSpeechParameters(This,prop) ) 

#define _Synthesizer_get_UseEngineSpecifiedSpeechParameters(This,prop)	\
    ( (This)->lpVtbl -> get_UseEngineSpecifiedSpeechParameters(This,prop) ) 

#define _Synthesizer_get_UseAsBackupSynthesizer(This,prop)	\
    ( (This)->lpVtbl -> get_UseAsBackupSynthesizer(This,prop) ) 

#define _Synthesizer_get_CommandLine(This,prop)	\
    ( (This)->lpVtbl -> get_CommandLine(This,prop) ) 

#define _Synthesizer_get_InstalledEngines(This,engines)	\
    ( (This)->lpVtbl -> get_InstalledEngines(This,engines) ) 

#define _Synthesizer_get_PortType(This,prop)	\
    ( (This)->lpVtbl -> get_PortType(This,prop) ) 

#define _Synthesizer_put_PortValue(This,prop)	\
    ( (This)->lpVtbl -> put_PortValue(This,prop) ) 

#define _Synthesizer_put_BaudRate(This,prop)	\
    ( (This)->lpVtbl -> put_BaudRate(This,prop) ) 

#define _Synthesizer_put_DataBits(This,prop)	\
    ( (This)->lpVtbl -> put_DataBits(This,prop) ) 

#define _Synthesizer_put_StopBits(This,prop)	\
    ( (This)->lpVtbl -> put_StopBits(This,prop) ) 

#define _Synthesizer_put_Parity(This,prop)	\
    ( (This)->lpVtbl -> put_Parity(This,prop) ) 

#define _Synthesizer_put_FlowControl(This,prop)	\
    ( (This)->lpVtbl -> put_FlowControl(This,prop) ) 

#define _Synthesizer_put_SoundCard(This,prop)	\
    ( (This)->lpVtbl -> put_SoundCard(This,prop) ) 

#define _Synthesizer_put_Location(This,prop)	\
    ( (This)->lpVtbl -> put_Location(This,prop) ) 

#define _Synthesizer_put_UseSpecifiedSpeechParameters(This,prop)	\
    ( (This)->lpVtbl -> put_UseSpecifiedSpeechParameters(This,prop) ) 

#define _Synthesizer_put_UseEngineSpecifiedSpeechParameters(This,prop)	\
    ( (This)->lpVtbl -> put_UseEngineSpecifiedSpeechParameters(This,prop) ) 

#define _Synthesizer_put_UseAsBackupSynthesizer(This,prop)	\
    ( (This)->lpVtbl -> put_UseAsBackupSynthesizer(This,prop) ) 

#define _Synthesizer_put_PortType(This,prop)	\
    ( (This)->lpVtbl -> put_PortType(This,prop) ) 

#define _Synthesizer_get_Description(This,prop)	\
    ( (This)->lpVtbl -> get_Description(This,prop) ) 

#define _Synthesizer_get_MaxRate(This,prop)	\
    ( (This)->lpVtbl -> get_MaxRate(This,prop) ) 

#define _Synthesizer_get_SuspendSpeech(This,prop)	\
    ( (This)->lpVtbl -> get_SuspendSpeech(This,prop) ) 

#define _Synthesizer_put_SuspendSpeech(This,prop)	\
    ( (This)->lpVtbl -> put_SuspendSpeech(This,prop) ) 

#define _Synthesizer_SetSpeechParametersToCurrent(This)	\
    ( (This)->lpVtbl -> SetSpeechParametersToCurrent(This) ) 

#define _Synthesizer_SaveState(This)	\
    ( (This)->lpVtbl -> SaveState(This) ) 

#define _Synthesizer_RestoreState(This)	\
    ( (This)->lpVtbl -> RestoreState(This) ) 

#define _Synthesizer_GetNumberOfSoundCards(This,count)	\
    ( (This)->lpVtbl -> GetNumberOfSoundCards(This,count) ) 

#define _Synthesizer_GetSoundCardDescription(This,index,description)	\
    ( (This)->lpVtbl -> GetSoundCardDescription(This,index,description) ) 

#define _Synthesizer_ApplyChanges(This)	\
    ( (This)->lpVtbl -> ApplyChanges(This) ) 

#define _Synthesizer_SwitchEngine(This,engine)	\
    ( (This)->lpVtbl -> SwitchEngine(This,engine) ) 

#define _Synthesizer_Speak(This,text)	\
    ( (This)->lpVtbl -> Speak(This,text) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Synthesizer_INTERFACE_DEFINED__ */


#ifndef __BrailleTableEntry_INTERFACE_DEFINED__
#define __BrailleTableEntry_INTERFACE_DEFINED__

/* interface BrailleTableEntry */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleTableEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5692b95a-bf10-451b-8fa8-1e49bfe47fe3")
    BrailleTableEntry : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DotPattern( 
            /* [retval][out] */ BSTR *pattern) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DotPattern( 
            /* [in] */ BSTR pattern) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UnicodeBraille( 
            /* [retval][out] */ BSTR *pattern) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UnicodeBraille( 
            /* [in] */ BSTR pattern) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleTableEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleTableEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleTableEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleTableEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleTableEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleTableEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleTableEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleTableEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleTableEntry * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleTableEntry * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            BrailleTableEntry * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DotPattern )( 
            BrailleTableEntry * This,
            /* [retval][out] */ BSTR *pattern);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DotPattern )( 
            BrailleTableEntry * This,
            /* [in] */ BSTR pattern);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UnicodeBraille )( 
            BrailleTableEntry * This,
            /* [retval][out] */ BSTR *pattern);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UnicodeBraille )( 
            BrailleTableEntry * This,
            /* [in] */ BSTR pattern);
        
        END_INTERFACE
    } BrailleTableEntryVtbl;

    interface BrailleTableEntry
    {
        CONST_VTBL struct BrailleTableEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleTableEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleTableEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleTableEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleTableEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleTableEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleTableEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleTableEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleTableEntry_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleTableEntry_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleTableEntry_get_Index(This,index)	\
    ( (This)->lpVtbl -> get_Index(This,index) ) 

#define BrailleTableEntry_get_DotPattern(This,pattern)	\
    ( (This)->lpVtbl -> get_DotPattern(This,pattern) ) 

#define BrailleTableEntry_put_DotPattern(This,pattern)	\
    ( (This)->lpVtbl -> put_DotPattern(This,pattern) ) 

#define BrailleTableEntry_get_UnicodeBraille(This,pattern)	\
    ( (This)->lpVtbl -> get_UnicodeBraille(This,pattern) ) 

#define BrailleTableEntry_put_UnicodeBraille(This,pattern)	\
    ( (This)->lpVtbl -> put_UnicodeBraille(This,pattern) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleTableEntry_INTERFACE_DEFINED__ */


#ifndef __BrailleTables_INTERFACE_DEFINED__
#define __BrailleTables_INTERFACE_DEFINED__

/* interface BrailleTables */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleTables;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("87657888-511d-4f43-bac7-b13cd51131ec")
    BrailleTables : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ BrailleTable **Table) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long tableID,
            /* [retval][out] */ BrailleTable **Table) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleTablesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleTables * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleTables * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleTables * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleTables * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleTables * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleTables * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleTables * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleTables * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleTables * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            BrailleTables * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            BrailleTables * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            BrailleTables * This,
            /* [retval][out] */ BrailleTable **Table);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            BrailleTables * This,
            /* [in] */ long tableID,
            /* [retval][out] */ BrailleTable **Table);
        
        END_INTERFACE
    } BrailleTablesVtbl;

    interface BrailleTables
    {
        CONST_VTBL struct BrailleTablesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleTables_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleTables_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleTables_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleTables_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleTables_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleTables_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleTables_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleTables_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleTables_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleTables_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define BrailleTables_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define BrailleTables_get_Active(This,Table)	\
    ( (This)->lpVtbl -> get_Active(This,Table) ) 

#define BrailleTables_Item(This,tableID,Table)	\
    ( (This)->lpVtbl -> Item(This,tableID,Table) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleTables_INTERFACE_DEFINED__ */


#ifndef __BrailleTable_INTERFACE_DEFINED__
#define __BrailleTable_INTERFACE_DEFINED__

/* interface BrailleTable */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleTable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0a5c485d-6719-4769-9d50-8a1e6eb1ad3e")
    BrailleTable : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ VARIANT_BOOL *readOnly) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UnifiedEnglishBraille( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UnifiedEnglishBraille( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ BrailleTableEntry **tableEntry) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ long index,
            /* [in] */ BSTR DotPattern,
            /* [retval][out] */ BrailleTableEntry **tableEntry) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Filename( 
            /* [retval][out] */ BSTR *filename) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleTableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleTable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleTable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleTable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleTable * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleTable * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleTable * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleTable * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleTable * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleTable * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            BrailleTable * This,
            /* [retval][out] */ VARIANT_BOOL *readOnly);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            BrailleTable * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            BrailleTable * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            BrailleTable * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UnifiedEnglishBraille )( 
            BrailleTable * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UnifiedEnglishBraille )( 
            BrailleTable * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            BrailleTable * This,
            /* [in] */ long index,
            /* [retval][out] */ BrailleTableEntry **tableEntry);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            BrailleTable * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            BrailleTable * This,
            /* [in] */ long index,
            /* [in] */ BSTR DotPattern,
            /* [retval][out] */ BrailleTableEntry **tableEntry);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            BrailleTable * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Filename )( 
            BrailleTable * This,
            /* [retval][out] */ BSTR *filename);
        
        END_INTERFACE
    } BrailleTableVtbl;

    interface BrailleTable
    {
        CONST_VTBL struct BrailleTableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleTable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleTable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleTable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleTable_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleTable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleTable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleTable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleTable_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleTable_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleTable_get_ReadOnly(This,readOnly)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,readOnly) ) 

#define BrailleTable_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define BrailleTable_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define BrailleTable_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define BrailleTable_get_UnifiedEnglishBraille(This,prop)	\
    ( (This)->lpVtbl -> get_UnifiedEnglishBraille(This,prop) ) 

#define BrailleTable_put_UnifiedEnglishBraille(This,prop)	\
    ( (This)->lpVtbl -> put_UnifiedEnglishBraille(This,prop) ) 

#define BrailleTable_Item(This,index,tableEntry)	\
    ( (This)->lpVtbl -> Item(This,index,tableEntry) ) 

#define BrailleTable_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define BrailleTable_Add(This,index,DotPattern,tableEntry)	\
    ( (This)->lpVtbl -> Add(This,index,DotPattern,tableEntry) ) 

#define BrailleTable_Delete(This,index)	\
    ( (This)->lpVtbl -> Delete(This,index) ) 

#define BrailleTable_get_Filename(This,filename)	\
    ( (This)->lpVtbl -> get_Filename(This,filename) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleTable_INTERFACE_DEFINED__ */


#ifndef __BrailleControlState_INTERFACE_DEFINED__
#define __BrailleControlState_INTERFACE_DEFINED__

/* interface BrailleControlState */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleControlState;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d0f53943-43f0-4979-a390-9ccb7a24daa1")
    BrailleControlState : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indication( 
            /* [retval][out] */ BSTR *indication) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indication( 
            /* [in] */ BSTR indication) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleControlStateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleControlState * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleControlState * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleControlState * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleControlState * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleControlState * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleControlState * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleControlState * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleControlState * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleControlState * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            BrailleControlState * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indication )( 
            BrailleControlState * This,
            /* [retval][out] */ BSTR *indication);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indication )( 
            BrailleControlState * This,
            /* [in] */ BSTR indication);
        
        END_INTERFACE
    } BrailleControlStateVtbl;

    interface BrailleControlState
    {
        CONST_VTBL struct BrailleControlStateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleControlState_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleControlState_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleControlState_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleControlState_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleControlState_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleControlState_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleControlState_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleControlState_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleControlState_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleControlState_get_Name(This,name)	\
    ( (This)->lpVtbl -> get_Name(This,name) ) 

#define BrailleControlState_get_Indication(This,indication)	\
    ( (This)->lpVtbl -> get_Indication(This,indication) ) 

#define BrailleControlState_put_Indication(This,indication)	\
    ( (This)->lpVtbl -> put_Indication(This,indication) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleControlState_INTERFACE_DEFINED__ */


#ifndef __BrailleControlStates_INTERFACE_DEFINED__
#define __BrailleControlStates_INTERFACE_DEFINED__

/* interface BrailleControlStates */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleControlStates;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("79936e4d-6993-420f-b6ab-88ec509b406f")
    BrailleControlStates : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ BrailleControlState **state) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleControlStatesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleControlStates * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleControlStates * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleControlStates * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleControlStates * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleControlStates * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleControlStates * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleControlStates * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleControlStates * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleControlStates * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            BrailleControlStates * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            BrailleControlStates * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            BrailleControlStates * This,
            /* [in] */ long index,
            /* [retval][out] */ BrailleControlState **state);
        
        END_INTERFACE
    } BrailleControlStatesVtbl;

    interface BrailleControlStates
    {
        CONST_VTBL struct BrailleControlStatesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleControlStates_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleControlStates_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleControlStates_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleControlStates_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleControlStates_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleControlStates_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleControlStates_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleControlStates_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleControlStates_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleControlStates_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define BrailleControlStates_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define BrailleControlStates_Item(This,index,state)	\
    ( (This)->lpVtbl -> Item(This,index,state) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleControlStates_INTERFACE_DEFINED__ */


#ifndef __BrailleControlType_INTERFACE_DEFINED__
#define __BrailleControlType_INTERFACE_DEFINED__

/* interface BrailleControlType */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleControlType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8f452d32-49c5-427f-9668-2d77b9a259b2")
    BrailleControlType : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *typeName) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisplayTypeIfCursorDetected( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisplayTypeIfCursorDetected( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indication( 
            /* [retval][out] */ BSTR *typeIndication) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indication( 
            /* [in] */ BSTR typeIndication) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_States( 
            /* [retval][out] */ BrailleControlStates **states) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleControlTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleControlType * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleControlType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleControlType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleControlType * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleControlType * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleControlType * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleControlType * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleControlType * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleControlType * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            BrailleControlType * This,
            /* [retval][out] */ BSTR *typeName);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayTypeIfCursorDetected )( 
            BrailleControlType * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayTypeIfCursorDetected )( 
            BrailleControlType * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indication )( 
            BrailleControlType * This,
            /* [retval][out] */ BSTR *typeIndication);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indication )( 
            BrailleControlType * This,
            /* [in] */ BSTR typeIndication);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_States )( 
            BrailleControlType * This,
            /* [retval][out] */ BrailleControlStates **states);
        
        END_INTERFACE
    } BrailleControlTypeVtbl;

    interface BrailleControlType
    {
        CONST_VTBL struct BrailleControlTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleControlType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleControlType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleControlType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleControlType_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleControlType_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleControlType_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleControlType_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleControlType_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleControlType_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleControlType_get_Name(This,typeName)	\
    ( (This)->lpVtbl -> get_Name(This,typeName) ) 

#define BrailleControlType_get_DisplayTypeIfCursorDetected(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayTypeIfCursorDetected(This,prop) ) 

#define BrailleControlType_put_DisplayTypeIfCursorDetected(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayTypeIfCursorDetected(This,prop) ) 

#define BrailleControlType_get_Indication(This,typeIndication)	\
    ( (This)->lpVtbl -> get_Indication(This,typeIndication) ) 

#define BrailleControlType_put_Indication(This,typeIndication)	\
    ( (This)->lpVtbl -> put_Indication(This,typeIndication) ) 

#define BrailleControlType_get_States(This,states)	\
    ( (This)->lpVtbl -> get_States(This,states) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleControlType_INTERFACE_DEFINED__ */


#ifndef __BrailleControlTypes_INTERFACE_DEFINED__
#define __BrailleControlTypes_INTERFACE_DEFINED__

/* interface BrailleControlTypes */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleControlTypes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9fe95569-2c11-4e4e-935f-aab4c342d3f5")
    BrailleControlTypes : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ BrailleControlTypeEnum index,
            /* [retval][out] */ BrailleControlType **type) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleControlTypesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleControlTypes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleControlTypes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleControlTypes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleControlTypes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleControlTypes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleControlTypes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleControlTypes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleControlTypes * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleControlTypes * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            BrailleControlTypes * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            BrailleControlTypes * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            BrailleControlTypes * This,
            /* [in] */ BrailleControlTypeEnum index,
            /* [retval][out] */ BrailleControlType **type);
        
        END_INTERFACE
    } BrailleControlTypesVtbl;

    interface BrailleControlTypes
    {
        CONST_VTBL struct BrailleControlTypesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleControlTypes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleControlTypes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleControlTypes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleControlTypes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleControlTypes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleControlTypes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleControlTypes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleControlTypes_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleControlTypes_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleControlTypes_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define BrailleControlTypes_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define BrailleControlTypes_Item(This,index,type)	\
    ( (This)->lpVtbl -> Item(This,index,type) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleControlTypes_INTERFACE_DEFINED__ */


#ifndef __BrailleControlInformation_INTERFACE_DEFINED__
#define __BrailleControlInformation_INTERFACE_DEFINED__

/* interface BrailleControlInformation */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleControlInformation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d36e82d4-e54f-44fa-bbc5-e807b4283724")
    BrailleControlInformation : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InformationOrder( 
            /* [retval][out] */ BrailleInformationOrder *order) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_InformationOrder( 
            /* [in] */ BrailleInformationOrder order) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeName( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeName( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeType( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeType( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeIndex( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeIndex( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SeparatorDotPattern( 
            /* [retval][out] */ BSTR *pattern) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SeparatorDotPattern( 
            /* [in] */ BSTR pattern) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Types( 
            /* [retval][out] */ BrailleControlTypes **types) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeechBoxModeCharacterLimit( 
            /* [retval][out] */ long *limit) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeechBoxModeCharacterLimit( 
            /* [in] */ long limit) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LineModeIncludeDataIndicators( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineModeIncludeDataIndicators( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LineModeLeftIndicatorDotPattern( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineModeLeftIndicatorDotPattern( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LineModeRightIndicatorDotPattern( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineModeRightIndicatorDotPattern( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleControlInformationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleControlInformation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleControlInformation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleControlInformation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleControlInformation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleControlInformation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleControlInformation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleControlInformation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleControlInformation * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleControlInformation * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InformationOrder )( 
            BrailleControlInformation * This,
            /* [retval][out] */ BrailleInformationOrder *order);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InformationOrder )( 
            BrailleControlInformation * This,
            /* [in] */ BrailleInformationOrder order);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeName )( 
            BrailleControlInformation * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeName )( 
            BrailleControlInformation * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeType )( 
            BrailleControlInformation * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeType )( 
            BrailleControlInformation * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeIndex )( 
            BrailleControlInformation * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeIndex )( 
            BrailleControlInformation * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SeparatorDotPattern )( 
            BrailleControlInformation * This,
            /* [retval][out] */ BSTR *pattern);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SeparatorDotPattern )( 
            BrailleControlInformation * This,
            /* [in] */ BSTR pattern);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Types )( 
            BrailleControlInformation * This,
            /* [retval][out] */ BrailleControlTypes **types);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeechBoxModeCharacterLimit )( 
            BrailleControlInformation * This,
            /* [retval][out] */ long *limit);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeechBoxModeCharacterLimit )( 
            BrailleControlInformation * This,
            /* [in] */ long limit);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineModeIncludeDataIndicators )( 
            BrailleControlInformation * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineModeIncludeDataIndicators )( 
            BrailleControlInformation * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineModeLeftIndicatorDotPattern )( 
            BrailleControlInformation * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineModeLeftIndicatorDotPattern )( 
            BrailleControlInformation * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineModeRightIndicatorDotPattern )( 
            BrailleControlInformation * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineModeRightIndicatorDotPattern )( 
            BrailleControlInformation * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } BrailleControlInformationVtbl;

    interface BrailleControlInformation
    {
        CONST_VTBL struct BrailleControlInformationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleControlInformation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleControlInformation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleControlInformation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleControlInformation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleControlInformation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleControlInformation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleControlInformation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleControlInformation_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleControlInformation_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleControlInformation_get_InformationOrder(This,order)	\
    ( (This)->lpVtbl -> get_InformationOrder(This,order) ) 

#define BrailleControlInformation_put_InformationOrder(This,order)	\
    ( (This)->lpVtbl -> put_InformationOrder(This,order) ) 

#define BrailleControlInformation_get_IncludeName(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeName(This,prop) ) 

#define BrailleControlInformation_put_IncludeName(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeName(This,prop) ) 

#define BrailleControlInformation_get_IncludeType(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeType(This,prop) ) 

#define BrailleControlInformation_put_IncludeType(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeType(This,prop) ) 

#define BrailleControlInformation_get_IncludeIndex(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeIndex(This,prop) ) 

#define BrailleControlInformation_put_IncludeIndex(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeIndex(This,prop) ) 

#define BrailleControlInformation_get_SeparatorDotPattern(This,pattern)	\
    ( (This)->lpVtbl -> get_SeparatorDotPattern(This,pattern) ) 

#define BrailleControlInformation_put_SeparatorDotPattern(This,pattern)	\
    ( (This)->lpVtbl -> put_SeparatorDotPattern(This,pattern) ) 

#define BrailleControlInformation_get_Types(This,types)	\
    ( (This)->lpVtbl -> get_Types(This,types) ) 

#define BrailleControlInformation_get_SpeechBoxModeCharacterLimit(This,limit)	\
    ( (This)->lpVtbl -> get_SpeechBoxModeCharacterLimit(This,limit) ) 

#define BrailleControlInformation_put_SpeechBoxModeCharacterLimit(This,limit)	\
    ( (This)->lpVtbl -> put_SpeechBoxModeCharacterLimit(This,limit) ) 

#define BrailleControlInformation_put_LineModeIncludeDataIndicators(This,prop)	\
    ( (This)->lpVtbl -> put_LineModeIncludeDataIndicators(This,prop) ) 

#define BrailleControlInformation_get_LineModeIncludeDataIndicators(This,prop)	\
    ( (This)->lpVtbl -> get_LineModeIncludeDataIndicators(This,prop) ) 

#define BrailleControlInformation_put_LineModeLeftIndicatorDotPattern(This,prop)	\
    ( (This)->lpVtbl -> put_LineModeLeftIndicatorDotPattern(This,prop) ) 

#define BrailleControlInformation_get_LineModeLeftIndicatorDotPattern(This,prop)	\
    ( (This)->lpVtbl -> get_LineModeLeftIndicatorDotPattern(This,prop) ) 

#define BrailleControlInformation_put_LineModeRightIndicatorDotPattern(This,prop)	\
    ( (This)->lpVtbl -> put_LineModeRightIndicatorDotPattern(This,prop) ) 

#define BrailleControlInformation_get_LineModeRightIndicatorDotPattern(This,prop)	\
    ( (This)->lpVtbl -> get_LineModeRightIndicatorDotPattern(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleControlInformation_INTERFACE_DEFINED__ */


#ifndef __BrailleOptions_INTERFACE_DEFINED__
#define __BrailleOptions_INTERFACE_DEFINED__

/* interface BrailleOptions */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("28e578e8-9600-4daf-9ba9-6a241981957a")
    BrailleOptions : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Grade2Enabled( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Grade2Enabled( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Grade2AutoUntranslate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Grade2AutoUntranslate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Grade2TranslateSymbols( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Grade2TranslateSymbols( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EightDot( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EightDot( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoUpdateTimeout( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoUpdateTimeout( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AttributeMarking( 
            /* [retval][out] */ BrailleAttributeMarking *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AttributeMarking( 
            /* [in] */ BrailleAttributeMarking prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_QuickMessageMode( 
            /* [retval][out] */ BrailleQuickMessageMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_QuickMessageMode( 
            /* [in] */ BrailleQuickMessageMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_QuickMessageModeTimeout( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_QuickMessageModeTimeout( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ShowIndents( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ShowIndents( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExtraSpacingPixels( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExtraSpacingPixels( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableAttributeMarking( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableAttributeMarking( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ShowExtraSpacing( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ShowExtraSpacing( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateCapitalization( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateCapitalization( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleOptions * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleOptions * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Grade2Enabled )( 
            BrailleOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Grade2Enabled )( 
            BrailleOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Grade2AutoUntranslate )( 
            BrailleOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Grade2AutoUntranslate )( 
            BrailleOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Grade2TranslateSymbols )( 
            BrailleOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Grade2TranslateSymbols )( 
            BrailleOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EightDot )( 
            BrailleOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EightDot )( 
            BrailleOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateTimeout )( 
            BrailleOptions * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateTimeout )( 
            BrailleOptions * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AttributeMarking )( 
            BrailleOptions * This,
            /* [retval][out] */ BrailleAttributeMarking *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AttributeMarking )( 
            BrailleOptions * This,
            /* [in] */ BrailleAttributeMarking prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuickMessageMode )( 
            BrailleOptions * This,
            /* [retval][out] */ BrailleQuickMessageMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuickMessageMode )( 
            BrailleOptions * This,
            /* [in] */ BrailleQuickMessageMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuickMessageModeTimeout )( 
            BrailleOptions * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuickMessageModeTimeout )( 
            BrailleOptions * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ShowIndents )( 
            BrailleOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ShowIndents )( 
            BrailleOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtraSpacingPixels )( 
            BrailleOptions * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExtraSpacingPixels )( 
            BrailleOptions * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableAttributeMarking )( 
            BrailleOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableAttributeMarking )( 
            BrailleOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ShowExtraSpacing )( 
            BrailleOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ShowExtraSpacing )( 
            BrailleOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateCapitalization )( 
            BrailleOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateCapitalization )( 
            BrailleOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } BrailleOptionsVtbl;

    interface BrailleOptions
    {
        CONST_VTBL struct BrailleOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleOptions_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleOptions_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleOptions_get_Grade2Enabled(This,prop)	\
    ( (This)->lpVtbl -> get_Grade2Enabled(This,prop) ) 

#define BrailleOptions_put_Grade2Enabled(This,prop)	\
    ( (This)->lpVtbl -> put_Grade2Enabled(This,prop) ) 

#define BrailleOptions_get_Grade2AutoUntranslate(This,prop)	\
    ( (This)->lpVtbl -> get_Grade2AutoUntranslate(This,prop) ) 

#define BrailleOptions_put_Grade2AutoUntranslate(This,prop)	\
    ( (This)->lpVtbl -> put_Grade2AutoUntranslate(This,prop) ) 

#define BrailleOptions_get_Grade2TranslateSymbols(This,prop)	\
    ( (This)->lpVtbl -> get_Grade2TranslateSymbols(This,prop) ) 

#define BrailleOptions_put_Grade2TranslateSymbols(This,prop)	\
    ( (This)->lpVtbl -> put_Grade2TranslateSymbols(This,prop) ) 

#define BrailleOptions_get_EightDot(This,prop)	\
    ( (This)->lpVtbl -> get_EightDot(This,prop) ) 

#define BrailleOptions_put_EightDot(This,prop)	\
    ( (This)->lpVtbl -> put_EightDot(This,prop) ) 

#define BrailleOptions_get_AutoUpdateTimeout(This,prop)	\
    ( (This)->lpVtbl -> get_AutoUpdateTimeout(This,prop) ) 

#define BrailleOptions_put_AutoUpdateTimeout(This,prop)	\
    ( (This)->lpVtbl -> put_AutoUpdateTimeout(This,prop) ) 

#define BrailleOptions_get_AttributeMarking(This,prop)	\
    ( (This)->lpVtbl -> get_AttributeMarking(This,prop) ) 

#define BrailleOptions_put_AttributeMarking(This,prop)	\
    ( (This)->lpVtbl -> put_AttributeMarking(This,prop) ) 

#define BrailleOptions_get_QuickMessageMode(This,prop)	\
    ( (This)->lpVtbl -> get_QuickMessageMode(This,prop) ) 

#define BrailleOptions_put_QuickMessageMode(This,prop)	\
    ( (This)->lpVtbl -> put_QuickMessageMode(This,prop) ) 

#define BrailleOptions_get_QuickMessageModeTimeout(This,prop)	\
    ( (This)->lpVtbl -> get_QuickMessageModeTimeout(This,prop) ) 

#define BrailleOptions_put_QuickMessageModeTimeout(This,prop)	\
    ( (This)->lpVtbl -> put_QuickMessageModeTimeout(This,prop) ) 

#define BrailleOptions_get_ShowIndents(This,prop)	\
    ( (This)->lpVtbl -> get_ShowIndents(This,prop) ) 

#define BrailleOptions_put_ShowIndents(This,prop)	\
    ( (This)->lpVtbl -> put_ShowIndents(This,prop) ) 

#define BrailleOptions_get_ExtraSpacingPixels(This,prop)	\
    ( (This)->lpVtbl -> get_ExtraSpacingPixels(This,prop) ) 

#define BrailleOptions_put_ExtraSpacingPixels(This,prop)	\
    ( (This)->lpVtbl -> put_ExtraSpacingPixels(This,prop) ) 

#define BrailleOptions_get_EnableAttributeMarking(This,prop)	\
    ( (This)->lpVtbl -> get_EnableAttributeMarking(This,prop) ) 

#define BrailleOptions_put_EnableAttributeMarking(This,prop)	\
    ( (This)->lpVtbl -> put_EnableAttributeMarking(This,prop) ) 

#define BrailleOptions_get_ShowExtraSpacing(This,prop)	\
    ( (This)->lpVtbl -> get_ShowExtraSpacing(This,prop) ) 

#define BrailleOptions_put_ShowExtraSpacing(This,prop)	\
    ( (This)->lpVtbl -> put_ShowExtraSpacing(This,prop) ) 

#define BrailleOptions_get_IndicateCapitalization(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateCapitalization(This,prop) ) 

#define BrailleOptions_put_IndicateCapitalization(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateCapitalization(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleOptions_INTERFACE_DEFINED__ */


#ifndef __BrailleGraphics_INTERFACE_DEFINED__
#define __BrailleGraphics_INTERFACE_DEFINED__

/* interface BrailleGraphics */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleGraphics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d88ba939-cd75-46d8-8114-8e65dab44357")
    BrailleGraphics : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Verbosity( 
            /* [retval][out] */ BrailleGraphicsVerbosity *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Verbosity( 
            /* [in] */ BrailleGraphicsVerbosity prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Symbol( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Symbol( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseSeparator( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseSeparator( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleGraphicsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleGraphics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleGraphics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleGraphics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleGraphics * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleGraphics * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleGraphics * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleGraphics * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleGraphics * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleGraphics * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Verbosity )( 
            BrailleGraphics * This,
            /* [retval][out] */ BrailleGraphicsVerbosity *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Verbosity )( 
            BrailleGraphics * This,
            /* [in] */ BrailleGraphicsVerbosity prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Symbol )( 
            BrailleGraphics * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Symbol )( 
            BrailleGraphics * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseSeparator )( 
            BrailleGraphics * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseSeparator )( 
            BrailleGraphics * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } BrailleGraphicsVtbl;

    interface BrailleGraphics
    {
        CONST_VTBL struct BrailleGraphicsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleGraphics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleGraphics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleGraphics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleGraphics_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleGraphics_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleGraphics_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleGraphics_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleGraphics_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleGraphics_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleGraphics_get_Verbosity(This,prop)	\
    ( (This)->lpVtbl -> get_Verbosity(This,prop) ) 

#define BrailleGraphics_put_Verbosity(This,prop)	\
    ( (This)->lpVtbl -> put_Verbosity(This,prop) ) 

#define BrailleGraphics_get_Symbol(This,prop)	\
    ( (This)->lpVtbl -> get_Symbol(This,prop) ) 

#define BrailleGraphics_put_Symbol(This,prop)	\
    ( (This)->lpVtbl -> put_Symbol(This,prop) ) 

#define BrailleGraphics_get_UseSeparator(This,prop)	\
    ( (This)->lpVtbl -> get_UseSeparator(This,prop) ) 

#define BrailleGraphics_put_UseSeparator(This,prop)	\
    ( (This)->lpVtbl -> put_UseSeparator(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleGraphics_INTERFACE_DEFINED__ */


#ifndef __BrailleDotPatterns_INTERFACE_DEFINED__
#define __BrailleDotPatterns_INTERFACE_DEFINED__

/* interface BrailleDotPatterns */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleDotPatterns;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("951f1617-0998-4d72-bd0d-976b65997322")
    BrailleDotPatterns : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cursor( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Cursor( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorBlinkRate( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CursorBlinkRate( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Mouse( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Mouse( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MouseBlinkRate( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MouseBlinkRate( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bold( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Bold( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Highlight( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Highlight( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Italic( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Italic( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Strikeout( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Strikeout( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Underline( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Underline( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MouseBlinkStyle( 
            /* [retval][out] */ BraillePatternBlinkStyle *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MouseBlinkStyle( 
            /* [in] */ BraillePatternBlinkStyle prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorBlinkStyle( 
            /* [retval][out] */ BraillePatternBlinkStyle *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CursorBlinkStyle( 
            /* [in] */ BraillePatternBlinkStyle prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleDotPatternsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleDotPatterns * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleDotPatterns * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleDotPatterns * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleDotPatterns * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleDotPatterns * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleDotPatterns * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleDotPatterns * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cursor )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Cursor )( 
            BrailleDotPatterns * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorBlinkRate )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CursorBlinkRate )( 
            BrailleDotPatterns * This,
            /* [in] */ long prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mouse )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Mouse )( 
            BrailleDotPatterns * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MouseBlinkRate )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MouseBlinkRate )( 
            BrailleDotPatterns * This,
            /* [in] */ long prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bold )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Bold )( 
            BrailleDotPatterns * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Highlight )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Highlight )( 
            BrailleDotPatterns * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Italic )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Italic )( 
            BrailleDotPatterns * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Strikeout )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Strikeout )( 
            BrailleDotPatterns * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Underline )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Underline )( 
            BrailleDotPatterns * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MouseBlinkStyle )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ BraillePatternBlinkStyle *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MouseBlinkStyle )( 
            BrailleDotPatterns * This,
            /* [in] */ BraillePatternBlinkStyle prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorBlinkStyle )( 
            BrailleDotPatterns * This,
            /* [retval][out] */ BraillePatternBlinkStyle *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CursorBlinkStyle )( 
            BrailleDotPatterns * This,
            /* [in] */ BraillePatternBlinkStyle prop);
        
        END_INTERFACE
    } BrailleDotPatternsVtbl;

    interface BrailleDotPatterns
    {
        CONST_VTBL struct BrailleDotPatternsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleDotPatterns_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleDotPatterns_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleDotPatterns_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleDotPatterns_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleDotPatterns_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleDotPatterns_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleDotPatterns_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleDotPatterns_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleDotPatterns_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleDotPatterns_get_Cursor(This,prop)	\
    ( (This)->lpVtbl -> get_Cursor(This,prop) ) 

#define BrailleDotPatterns_put_Cursor(This,prop)	\
    ( (This)->lpVtbl -> put_Cursor(This,prop) ) 

#define BrailleDotPatterns_get_CursorBlinkRate(This,prop)	\
    ( (This)->lpVtbl -> get_CursorBlinkRate(This,prop) ) 

#define BrailleDotPatterns_put_CursorBlinkRate(This,prop)	\
    ( (This)->lpVtbl -> put_CursorBlinkRate(This,prop) ) 

#define BrailleDotPatterns_get_Mouse(This,prop)	\
    ( (This)->lpVtbl -> get_Mouse(This,prop) ) 

#define BrailleDotPatterns_put_Mouse(This,prop)	\
    ( (This)->lpVtbl -> put_Mouse(This,prop) ) 

#define BrailleDotPatterns_get_MouseBlinkRate(This,prop)	\
    ( (This)->lpVtbl -> get_MouseBlinkRate(This,prop) ) 

#define BrailleDotPatterns_put_MouseBlinkRate(This,prop)	\
    ( (This)->lpVtbl -> put_MouseBlinkRate(This,prop) ) 

#define BrailleDotPatterns_get_Bold(This,prop)	\
    ( (This)->lpVtbl -> get_Bold(This,prop) ) 

#define BrailleDotPatterns_put_Bold(This,prop)	\
    ( (This)->lpVtbl -> put_Bold(This,prop) ) 

#define BrailleDotPatterns_get_Highlight(This,prop)	\
    ( (This)->lpVtbl -> get_Highlight(This,prop) ) 

#define BrailleDotPatterns_put_Highlight(This,prop)	\
    ( (This)->lpVtbl -> put_Highlight(This,prop) ) 

#define BrailleDotPatterns_get_Italic(This,prop)	\
    ( (This)->lpVtbl -> get_Italic(This,prop) ) 

#define BrailleDotPatterns_put_Italic(This,prop)	\
    ( (This)->lpVtbl -> put_Italic(This,prop) ) 

#define BrailleDotPatterns_get_Strikeout(This,prop)	\
    ( (This)->lpVtbl -> get_Strikeout(This,prop) ) 

#define BrailleDotPatterns_put_Strikeout(This,prop)	\
    ( (This)->lpVtbl -> put_Strikeout(This,prop) ) 

#define BrailleDotPatterns_get_Underline(This,prop)	\
    ( (This)->lpVtbl -> get_Underline(This,prop) ) 

#define BrailleDotPatterns_put_Underline(This,prop)	\
    ( (This)->lpVtbl -> put_Underline(This,prop) ) 

#define BrailleDotPatterns_get_MouseBlinkStyle(This,prop)	\
    ( (This)->lpVtbl -> get_MouseBlinkStyle(This,prop) ) 

#define BrailleDotPatterns_put_MouseBlinkStyle(This,prop)	\
    ( (This)->lpVtbl -> put_MouseBlinkStyle(This,prop) ) 

#define BrailleDotPatterns_get_CursorBlinkStyle(This,prop)	\
    ( (This)->lpVtbl -> get_CursorBlinkStyle(This,prop) ) 

#define BrailleDotPatterns_put_CursorBlinkStyle(This,prop)	\
    ( (This)->lpVtbl -> put_CursorBlinkStyle(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleDotPatterns_INTERFACE_DEFINED__ */


#ifndef __BrailleScrollingOptions_INTERFACE_DEFINED__
#define __BrailleScrollingOptions_INTERFACE_DEFINED__

/* interface BrailleScrollingOptions */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleScrollingOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9131d53a-78d6-45ea-831e-b9d2b910db5c")
    BrailleScrollingOptions : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoRouteCursor( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoRouteCursor( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WholeWordMode( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WholeWordMode( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScrollDisplayWidth( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScrollDisplayWidth( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpecificWidth( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpecificWidth( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateLineChange( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateLineChange( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleScrollingOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleScrollingOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleScrollingOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleScrollingOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleScrollingOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleScrollingOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleScrollingOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleScrollingOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleScrollingOptions * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleScrollingOptions * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRouteCursor )( 
            BrailleScrollingOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRouteCursor )( 
            BrailleScrollingOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WholeWordMode )( 
            BrailleScrollingOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WholeWordMode )( 
            BrailleScrollingOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScrollDisplayWidth )( 
            BrailleScrollingOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScrollDisplayWidth )( 
            BrailleScrollingOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecificWidth )( 
            BrailleScrollingOptions * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpecificWidth )( 
            BrailleScrollingOptions * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateLineChange )( 
            BrailleScrollingOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateLineChange )( 
            BrailleScrollingOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } BrailleScrollingOptionsVtbl;

    interface BrailleScrollingOptions
    {
        CONST_VTBL struct BrailleScrollingOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleScrollingOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleScrollingOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleScrollingOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleScrollingOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleScrollingOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleScrollingOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleScrollingOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleScrollingOptions_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleScrollingOptions_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleScrollingOptions_get_AutoRouteCursor(This,prop)	\
    ( (This)->lpVtbl -> get_AutoRouteCursor(This,prop) ) 

#define BrailleScrollingOptions_put_AutoRouteCursor(This,prop)	\
    ( (This)->lpVtbl -> put_AutoRouteCursor(This,prop) ) 

#define BrailleScrollingOptions_get_WholeWordMode(This,prop)	\
    ( (This)->lpVtbl -> get_WholeWordMode(This,prop) ) 

#define BrailleScrollingOptions_put_WholeWordMode(This,prop)	\
    ( (This)->lpVtbl -> put_WholeWordMode(This,prop) ) 

#define BrailleScrollingOptions_get_ScrollDisplayWidth(This,prop)	\
    ( (This)->lpVtbl -> get_ScrollDisplayWidth(This,prop) ) 

#define BrailleScrollingOptions_put_ScrollDisplayWidth(This,prop)	\
    ( (This)->lpVtbl -> put_ScrollDisplayWidth(This,prop) ) 

#define BrailleScrollingOptions_get_SpecificWidth(This,prop)	\
    ( (This)->lpVtbl -> get_SpecificWidth(This,prop) ) 

#define BrailleScrollingOptions_put_SpecificWidth(This,prop)	\
    ( (This)->lpVtbl -> put_SpecificWidth(This,prop) ) 

#define BrailleScrollingOptions_get_IndicateLineChange(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateLineChange(This,prop) ) 

#define BrailleScrollingOptions_put_IndicateLineChange(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateLineChange(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleScrollingOptions_INTERFACE_DEFINED__ */


#ifndef __BrailleSettings_INTERFACE_DEFINED__
#define __BrailleSettings_INTERFACE_DEFINED__

/* interface BrailleSettings */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleSettings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e2c6826e-b450-4cf9-a217-55b671499e7f")
    BrailleSettings : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Scrolling( 
            /* [retval][out] */ BrailleScrollingOptions **scrolling) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ControlInformation( 
            /* [retval][out] */ BrailleControlInformation **controlInfo) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DotPatterns( 
            /* [retval][out] */ BrailleDotPatterns **patterns) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TranslationTables( 
            /* [retval][out] */ BrailleTables **table) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Options( 
            /* [retval][out] */ BrailleOptions **options) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Graphics( 
            /* [retval][out] */ BrailleGraphics **graphics) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrailleWindow( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BrailleWindow( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleSettingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleSettings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleSettings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleSettings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleSettings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleSettings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleSettings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleSettings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleSettings * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleSettings * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scrolling )( 
            BrailleSettings * This,
            /* [retval][out] */ BrailleScrollingOptions **scrolling);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ControlInformation )( 
            BrailleSettings * This,
            /* [retval][out] */ BrailleControlInformation **controlInfo);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DotPatterns )( 
            BrailleSettings * This,
            /* [retval][out] */ BrailleDotPatterns **patterns);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TranslationTables )( 
            BrailleSettings * This,
            /* [retval][out] */ BrailleTables **table);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Options )( 
            BrailleSettings * This,
            /* [retval][out] */ BrailleOptions **options);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Graphics )( 
            BrailleSettings * This,
            /* [retval][out] */ BrailleGraphics **graphics);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrailleWindow )( 
            BrailleSettings * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BrailleWindow )( 
            BrailleSettings * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } BrailleSettingsVtbl;

    interface BrailleSettings
    {
        CONST_VTBL struct BrailleSettingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleSettings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleSettings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleSettings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleSettings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleSettings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleSettings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleSettings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleSettings_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleSettings_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleSettings_get_Scrolling(This,scrolling)	\
    ( (This)->lpVtbl -> get_Scrolling(This,scrolling) ) 

#define BrailleSettings_get_ControlInformation(This,controlInfo)	\
    ( (This)->lpVtbl -> get_ControlInformation(This,controlInfo) ) 

#define BrailleSettings_get_DotPatterns(This,patterns)	\
    ( (This)->lpVtbl -> get_DotPatterns(This,patterns) ) 

#define BrailleSettings_get_TranslationTables(This,table)	\
    ( (This)->lpVtbl -> get_TranslationTables(This,table) ) 

#define BrailleSettings_get_Options(This,options)	\
    ( (This)->lpVtbl -> get_Options(This,options) ) 

#define BrailleSettings_get_Graphics(This,graphics)	\
    ( (This)->lpVtbl -> get_Graphics(This,graphics) ) 

#define BrailleSettings_get_BrailleWindow(This,prop)	\
    ( (This)->lpVtbl -> get_BrailleWindow(This,prop) ) 

#define BrailleSettings_put_BrailleWindow(This,prop)	\
    ( (This)->lpVtbl -> put_BrailleWindow(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleSettings_INTERFACE_DEFINED__ */


#ifndef __BrailleAction_INTERFACE_DEFINED__
#define __BrailleAction_INTERFACE_DEFINED__

/* interface BrailleAction */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleAction;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("82b55c40-aff9-4da3-9bd3-439227dd0289")
    BrailleAction : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *description) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ BrailleActionType *type) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Hotkey( 
            /* [retval][out] */ HotkeyID *hotkeyid) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrailleHotkey( 
            /* [retval][out] */ BrailleHotkeyID *hotkeyid) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ _Key **key) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Character( 
            /* [retval][out] */ BSTR *character) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleActionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleAction * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleAction * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleAction * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleAction * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleAction * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleAction * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleAction * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            BrailleAction * This,
            /* [retval][out] */ BSTR *description);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleAction * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleAction * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            BrailleAction * This,
            /* [retval][out] */ BrailleActionType *type);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Hotkey )( 
            BrailleAction * This,
            /* [retval][out] */ HotkeyID *hotkeyid);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrailleHotkey )( 
            BrailleAction * This,
            /* [retval][out] */ BrailleHotkeyID *hotkeyid);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            BrailleAction * This,
            /* [retval][out] */ _Key **key);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Character )( 
            BrailleAction * This,
            /* [retval][out] */ BSTR *character);
        
        END_INTERFACE
    } BrailleActionVtbl;

    interface BrailleAction
    {
        CONST_VTBL struct BrailleActionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleAction_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleAction_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleAction_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleAction_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleAction_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleAction_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleAction_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleAction_get_Description(This,description)	\
    ( (This)->lpVtbl -> get_Description(This,description) ) 

#define BrailleAction_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleAction_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleAction_get_Type(This,type)	\
    ( (This)->lpVtbl -> get_Type(This,type) ) 

#define BrailleAction_get_Hotkey(This,hotkeyid)	\
    ( (This)->lpVtbl -> get_Hotkey(This,hotkeyid) ) 

#define BrailleAction_get_BrailleHotkey(This,hotkeyid)	\
    ( (This)->lpVtbl -> get_BrailleHotkey(This,hotkeyid) ) 

#define BrailleAction_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define BrailleAction_get_Character(This,character)	\
    ( (This)->lpVtbl -> get_Character(This,character) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleAction_INTERFACE_DEFINED__ */


#ifndef __BrailleActions_INTERFACE_DEFINED__
#define __BrailleActions_INTERFACE_DEFINED__

/* interface BrailleActions */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleActions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a217a21c-6183-420b-8e07-87ee9c4df61e")
    BrailleActions : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ BrailleAction **action) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleActionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleActions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleActions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleActions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleActions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleActions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleActions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleActions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleActions * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleActions * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            BrailleActions * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            BrailleActions * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            BrailleActions * This,
            /* [in] */ long index,
            /* [retval][out] */ BrailleAction **action);
        
        END_INTERFACE
    } BrailleActionsVtbl;

    interface BrailleActions
    {
        CONST_VTBL struct BrailleActionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleActions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleActions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleActions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleActions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleActions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleActions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleActions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleActions_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleActions_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleActions_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define BrailleActions_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define BrailleActions_Item(This,index,action)	\
    ( (This)->lpVtbl -> Item(This,index,action) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleActions_INTERFACE_DEFINED__ */


#ifndef __BrailleHotKey_INTERFACE_DEFINED__
#define __BrailleHotKey_INTERFACE_DEFINED__

/* interface BrailleHotKey */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleHotKey;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0b85c700-4eb2-4212-972e-4b2f46cab832")
    BrailleHotKey : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *description) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ BSTR *id) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Touch( 
            /* [retval][out] */ long *touch) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Actions( 
            /* [retval][out] */ BrailleActions **actions) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StatusTouch( 
            /* [retval][out] */ VARIANT_BOOL *status) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DoubleTouch( 
            /* [retval][out] */ VARIANT_BOOL *dtouch) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleHotKeyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleHotKey * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleHotKey * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleHotKey * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleHotKey * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleHotKey * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleHotKey * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleHotKey * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            BrailleHotKey * This,
            /* [retval][out] */ BSTR *description);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleHotKey * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleHotKey * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            BrailleHotKey * This,
            /* [retval][out] */ BSTR *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Touch )( 
            BrailleHotKey * This,
            /* [retval][out] */ long *touch);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Actions )( 
            BrailleHotKey * This,
            /* [retval][out] */ BrailleActions **actions);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StatusTouch )( 
            BrailleHotKey * This,
            /* [retval][out] */ VARIANT_BOOL *status);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DoubleTouch )( 
            BrailleHotKey * This,
            /* [retval][out] */ VARIANT_BOOL *dtouch);
        
        END_INTERFACE
    } BrailleHotKeyVtbl;

    interface BrailleHotKey
    {
        CONST_VTBL struct BrailleHotKeyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleHotKey_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleHotKey_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleHotKey_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleHotKey_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleHotKey_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleHotKey_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleHotKey_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleHotKey_get_Description(This,description)	\
    ( (This)->lpVtbl -> get_Description(This,description) ) 

#define BrailleHotKey_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleHotKey_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleHotKey_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define BrailleHotKey_get_Touch(This,touch)	\
    ( (This)->lpVtbl -> get_Touch(This,touch) ) 

#define BrailleHotKey_get_Actions(This,actions)	\
    ( (This)->lpVtbl -> get_Actions(This,actions) ) 

#define BrailleHotKey_get_StatusTouch(This,status)	\
    ( (This)->lpVtbl -> get_StatusTouch(This,status) ) 

#define BrailleHotKey_get_DoubleTouch(This,dtouch)	\
    ( (This)->lpVtbl -> get_DoubleTouch(This,dtouch) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleHotKey_INTERFACE_DEFINED__ */


#ifndef __BrailleHotKeys_INTERFACE_DEFINED__
#define __BrailleHotKeys_INTERFACE_DEFINED__

/* interface BrailleHotKeys */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleHotKeys;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f7a4d96b-0044-4665-91a9-b54041a3acaf")
    BrailleHotKeys : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ BrailleHotKey **hotKey) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleHotKeysVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleHotKeys * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleHotKeys * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleHotKeys * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleHotKeys * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleHotKeys * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleHotKeys * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleHotKeys * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleHotKeys * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleHotKeys * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            BrailleHotKeys * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            BrailleHotKeys * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            BrailleHotKeys * This,
            /* [in] */ long index,
            /* [retval][out] */ BrailleHotKey **hotKey);
        
        END_INTERFACE
    } BrailleHotKeysVtbl;

    interface BrailleHotKeys
    {
        CONST_VTBL struct BrailleHotKeysVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleHotKeys_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleHotKeys_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleHotKeys_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleHotKeys_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleHotKeys_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleHotKeys_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleHotKeys_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleHotKeys_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleHotKeys_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleHotKeys_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define BrailleHotKeys_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define BrailleHotKeys_Item(This,index,hotKey)	\
    ( (This)->lpVtbl -> Item(This,index,hotKey) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleHotKeys_INTERFACE_DEFINED__ */


#ifndef __Verbosity_INTERFACE_DEFINED__
#define __Verbosity_INTERFACE_DEFINED__

/* interface Verbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Verbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9534c04c-344a-4e89-b5dd-00f6b34c7e8c")
    Verbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Menu( 
            /* [retval][out] */ MenuVerbosity **menu) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Activated( 
            /* [retval][out] */ ActivatedVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ FocusedVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Attribute( 
            /* [retval][out] */ AttributeChangeVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Miscellaneous( 
            /* [retval][out] */ MiscVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrowseMode( 
            /* [retval][out] */ BrowseModeVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Word( 
            /* [retval][out] */ WordVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Excel( 
            /* [retval][out] */ ExcelVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PowerPoint( 
            /* [retval][out] */ PowerPointVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Mouse( 
            /* [retval][out] */ MouseVerbosity **mouse) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct VerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Verbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Verbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Verbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Verbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Verbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Verbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Verbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Verbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Verbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Menu )( 
            Verbosity * This,
            /* [retval][out] */ MenuVerbosity **menu);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Activated )( 
            Verbosity * This,
            /* [retval][out] */ ActivatedVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            Verbosity * This,
            /* [retval][out] */ FocusedVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Attribute )( 
            Verbosity * This,
            /* [retval][out] */ AttributeChangeVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Miscellaneous )( 
            Verbosity * This,
            /* [retval][out] */ MiscVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseMode )( 
            Verbosity * This,
            /* [retval][out] */ BrowseModeVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Word )( 
            Verbosity * This,
            /* [retval][out] */ WordVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Excel )( 
            Verbosity * This,
            /* [retval][out] */ ExcelVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PowerPoint )( 
            Verbosity * This,
            /* [retval][out] */ PowerPointVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mouse )( 
            Verbosity * This,
            /* [retval][out] */ MouseVerbosity **mouse);
        
        END_INTERFACE
    } VerbosityVtbl;

    interface Verbosity
    {
        CONST_VTBL struct VerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Verbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Verbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Verbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Verbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Verbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Verbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Verbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Verbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Verbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Verbosity_get_Menu(This,menu)	\
    ( (This)->lpVtbl -> get_Menu(This,menu) ) 

#define Verbosity_get_Activated(This,obj)	\
    ( (This)->lpVtbl -> get_Activated(This,obj) ) 

#define Verbosity_get_Focused(This,obj)	\
    ( (This)->lpVtbl -> get_Focused(This,obj) ) 

#define Verbosity_get_Attribute(This,obj)	\
    ( (This)->lpVtbl -> get_Attribute(This,obj) ) 

#define Verbosity_get_Miscellaneous(This,obj)	\
    ( (This)->lpVtbl -> get_Miscellaneous(This,obj) ) 

#define Verbosity_get_BrowseMode(This,obj)	\
    ( (This)->lpVtbl -> get_BrowseMode(This,obj) ) 

#define Verbosity_get_Word(This,obj)	\
    ( (This)->lpVtbl -> get_Word(This,obj) ) 

#define Verbosity_get_Excel(This,obj)	\
    ( (This)->lpVtbl -> get_Excel(This,obj) ) 

#define Verbosity_get_PowerPoint(This,obj)	\
    ( (This)->lpVtbl -> get_PowerPoint(This,obj) ) 

#define Verbosity_get_Mouse(This,mouse)	\
    ( (This)->lpVtbl -> get_Mouse(This,mouse) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Verbosity_INTERFACE_DEFINED__ */


#ifndef __Hotkeys_INTERFACE_DEFINED__
#define __Hotkeys_INTERFACE_DEFINED__

/* interface Hotkeys */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Hotkeys;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c8ca7c7f-e51d-43cd-8340-fd040e8daec6")
    Hotkeys : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ Hotkey **HotKey) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetDuplicates( 
            /* [in] */ VARIANT key,
            /* [retval][out] */ Hotkeys **HotKeys) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HotkeysVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Hotkeys * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Hotkeys * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Hotkeys * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Hotkeys * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Hotkeys * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Hotkeys * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Hotkeys * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Hotkeys * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Hotkeys * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Hotkeys * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Hotkeys * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Hotkeys * This,
            /* [in] */ long index,
            /* [retval][out] */ Hotkey **HotKey);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetDuplicates )( 
            Hotkeys * This,
            /* [in] */ VARIANT key,
            /* [retval][out] */ Hotkeys **HotKeys);
        
        END_INTERFACE
    } HotkeysVtbl;

    interface Hotkeys
    {
        CONST_VTBL struct HotkeysVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Hotkeys_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Hotkeys_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Hotkeys_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Hotkeys_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Hotkeys_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Hotkeys_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Hotkeys_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Hotkeys_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Hotkeys_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Hotkeys_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define Hotkeys_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define Hotkeys_Item(This,index,HotKey)	\
    ( (This)->lpVtbl -> Item(This,index,HotKey) ) 

#define Hotkeys_GetDuplicates(This,key,HotKeys)	\
    ( (This)->lpVtbl -> GetDuplicates(This,key,HotKeys) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Hotkeys_INTERFACE_DEFINED__ */


#ifndef __Hotkey_INTERFACE_DEFINED__
#define __Hotkey_INTERFACE_DEFINED__

/* interface Hotkey */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Hotkey;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("72a98026-b0fc-41ba-8835-ff3f24a07987")
    Hotkey : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ HotkeyID *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ VARIANT *key) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Key( 
            /* [in] */ VARIANT key) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Execute( 
            /* [optional][in] */ VARIANT KeyAction) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Scope( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Scope( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HotkeyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Hotkey * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Hotkey * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Hotkey * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Hotkey * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Hotkey * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Hotkey * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Hotkey * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Hotkey * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Hotkey * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Hotkey * This,
            /* [retval][out] */ HotkeyID *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            Hotkey * This,
            /* [retval][out] */ VARIANT *key);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Key )( 
            Hotkey * This,
            /* [in] */ VARIANT key);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            Hotkey * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Execute )( 
            Hotkey * This,
            /* [optional][in] */ VARIANT KeyAction);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scope )( 
            Hotkey * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Scope )( 
            Hotkey * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } HotkeyVtbl;

    interface Hotkey
    {
        CONST_VTBL struct HotkeyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Hotkey_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Hotkey_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Hotkey_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Hotkey_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Hotkey_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Hotkey_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Hotkey_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Hotkey_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Hotkey_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Hotkey_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define Hotkey_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define Hotkey_put_Key(This,key)	\
    ( (This)->lpVtbl -> put_Key(This,key) ) 

#define Hotkey_get_Description(This,prop)	\
    ( (This)->lpVtbl -> get_Description(This,prop) ) 

#define Hotkey_Execute(This,KeyAction)	\
    ( (This)->lpVtbl -> Execute(This,KeyAction) ) 

#define Hotkey_get_Scope(This,prop)	\
    ( (This)->lpVtbl -> get_Scope(This,prop) ) 

#define Hotkey_put_Scope(This,prop)	\
    ( (This)->lpVtbl -> put_Scope(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Hotkey_INTERFACE_DEFINED__ */


#ifndef __CursorKey_INTERFACE_DEFINED__
#define __CursorKey_INTERFACE_DEFINED__

/* interface CursorKey */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_CursorKey;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("275e3f64-d44a-4643-97d7-5c741320cad3")
    CursorKey : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ VARIANT *key) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Key( 
            /* [in] */ VARIANT key) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FirstAction( 
            /* [retval][out] */ CursorKeyAction **Action) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SecondAction( 
            /* [retval][out] */ CursorKeyAction **Action) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DelayFactor( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DelayFactor( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Scope( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Scope( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CursorKeyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CursorKey * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CursorKey * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CursorKey * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CursorKey * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CursorKey * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CursorKey * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CursorKey * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CursorKey * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CursorKey * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            CursorKey * This,
            /* [retval][out] */ VARIANT *key);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Key )( 
            CursorKey * This,
            /* [in] */ VARIANT key);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstAction )( 
            CursorKey * This,
            /* [retval][out] */ CursorKeyAction **Action);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SecondAction )( 
            CursorKey * This,
            /* [retval][out] */ CursorKeyAction **Action);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DelayFactor )( 
            CursorKey * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DelayFactor )( 
            CursorKey * This,
            /* [in] */ long prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scope )( 
            CursorKey * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Scope )( 
            CursorKey * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } CursorKeyVtbl;

    interface CursorKey
    {
        CONST_VTBL struct CursorKeyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CursorKey_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CursorKey_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CursorKey_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CursorKey_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CursorKey_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CursorKey_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CursorKey_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CursorKey_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define CursorKey_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define CursorKey_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define CursorKey_put_Key(This,key)	\
    ( (This)->lpVtbl -> put_Key(This,key) ) 

#define CursorKey_get_FirstAction(This,Action)	\
    ( (This)->lpVtbl -> get_FirstAction(This,Action) ) 

#define CursorKey_get_SecondAction(This,Action)	\
    ( (This)->lpVtbl -> get_SecondAction(This,Action) ) 

#define CursorKey_get_DelayFactor(This,prop)	\
    ( (This)->lpVtbl -> get_DelayFactor(This,prop) ) 

#define CursorKey_put_DelayFactor(This,prop)	\
    ( (This)->lpVtbl -> put_DelayFactor(This,prop) ) 

#define CursorKey_get_Scope(This,prop)	\
    ( (This)->lpVtbl -> get_Scope(This,prop) ) 

#define CursorKey_put_Scope(This,prop)	\
    ( (This)->lpVtbl -> put_Scope(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CursorKey_INTERFACE_DEFINED__ */


#ifndef __CursorKeyAction_INTERFACE_DEFINED__
#define __CursorKeyAction_INTERFACE_DEFINED__

/* interface CursorKeyAction */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_CursorKeyAction;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e362fb3e-5315-4ecc-9b81-fc8281f64786")
    CursorKeyAction : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ CursorKeyActions *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ID( 
            /* [in] */ CursorKeyActions prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parameter( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Parameter( 
            /* [in] */ VARIANT prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Execute( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CursorKeyActionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CursorKeyAction * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CursorKeyAction * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CursorKeyAction * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CursorKeyAction * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CursorKeyAction * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CursorKeyAction * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CursorKeyAction * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CursorKeyAction * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CursorKeyAction * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            CursorKeyAction * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            CursorKeyAction * This,
            /* [retval][out] */ CursorKeyActions *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ID )( 
            CursorKeyAction * This,
            /* [in] */ CursorKeyActions prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parameter )( 
            CursorKeyAction * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Parameter )( 
            CursorKeyAction * This,
            /* [in] */ VARIANT prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Execute )( 
            CursorKeyAction * This);
        
        END_INTERFACE
    } CursorKeyActionVtbl;

    interface CursorKeyAction
    {
        CONST_VTBL struct CursorKeyActionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CursorKeyAction_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CursorKeyAction_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CursorKeyAction_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CursorKeyAction_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CursorKeyAction_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CursorKeyAction_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CursorKeyAction_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CursorKeyAction_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define CursorKeyAction_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define CursorKeyAction_get_Description(This,prop)	\
    ( (This)->lpVtbl -> get_Description(This,prop) ) 

#define CursorKeyAction_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define CursorKeyAction_put_ID(This,prop)	\
    ( (This)->lpVtbl -> put_ID(This,prop) ) 

#define CursorKeyAction_get_Parameter(This,prop)	\
    ( (This)->lpVtbl -> get_Parameter(This,prop) ) 

#define CursorKeyAction_put_Parameter(This,prop)	\
    ( (This)->lpVtbl -> put_Parameter(This,prop) ) 

#define CursorKeyAction_Execute(This)	\
    ( (This)->lpVtbl -> Execute(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CursorKeyAction_INTERFACE_DEFINED__ */


#ifndef __CursorKeys_INTERFACE_DEFINED__
#define __CursorKeys_INTERFACE_DEFINED__

/* interface CursorKeys */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_CursorKeys;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("193004dd-1572-4966-8a3f-6710c54be4e3")
    CursorKeys : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ CursorKey **Cursorkey) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetDuplicates( 
            /* [in] */ VARIANT key,
            /* [retval][out] */ CursorKeys **Cursorkeys) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeGlobalKeys( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeGlobalKeys( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CursorKeysVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CursorKeys * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CursorKeys * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CursorKeys * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CursorKeys * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CursorKeys * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CursorKeys * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CursorKeys * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CursorKeys * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CursorKeys * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CursorKeys * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            CursorKeys * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CursorKeys * This,
            /* [in] */ long index,
            /* [retval][out] */ CursorKey **Cursorkey);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetDuplicates )( 
            CursorKeys * This,
            /* [in] */ VARIANT key,
            /* [retval][out] */ CursorKeys **Cursorkeys);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeGlobalKeys )( 
            CursorKeys * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeGlobalKeys )( 
            CursorKeys * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } CursorKeysVtbl;

    interface CursorKeys
    {
        CONST_VTBL struct CursorKeysVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CursorKeys_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CursorKeys_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CursorKeys_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CursorKeys_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CursorKeys_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CursorKeys_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CursorKeys_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CursorKeys_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define CursorKeys_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define CursorKeys_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define CursorKeys_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define CursorKeys_Item(This,index,Cursorkey)	\
    ( (This)->lpVtbl -> Item(This,index,Cursorkey) ) 

#define CursorKeys_GetDuplicates(This,key,Cursorkeys)	\
    ( (This)->lpVtbl -> GetDuplicates(This,key,Cursorkeys) ) 

#define CursorKeys_get_IncludeGlobalKeys(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeGlobalKeys(This,prop) ) 

#define CursorKeys_put_IncludeGlobalKeys(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeGlobalKeys(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CursorKeys_INTERFACE_DEFINED__ */


#ifndef __HyperactiveWindows_INTERFACE_DEFINED__
#define __HyperactiveWindows_INTERFACE_DEFINED__

/* interface HyperactiveWindows */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_HyperactiveWindows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("742b480f-5a4e-4e2d-b544-d21fbede9a1c")
    HyperactiveWindows : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ BSTR hyperWinID,
            /* [retval][out] */ HyperactiveWindow **hyperWindow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HyperactiveWindowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HyperactiveWindows * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HyperactiveWindows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HyperactiveWindows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HyperactiveWindows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HyperactiveWindows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HyperactiveWindows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HyperactiveWindows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HyperactiveWindows * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HyperactiveWindows * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            HyperactiveWindows * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            HyperactiveWindows * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            HyperactiveWindows * This,
            /* [in] */ BSTR hyperWinID,
            /* [retval][out] */ HyperactiveWindow **hyperWindow);
        
        END_INTERFACE
    } HyperactiveWindowsVtbl;

    interface HyperactiveWindows
    {
        CONST_VTBL struct HyperactiveWindowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HyperactiveWindows_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HyperactiveWindows_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HyperactiveWindows_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HyperactiveWindows_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HyperactiveWindows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HyperactiveWindows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HyperactiveWindows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HyperactiveWindows_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define HyperactiveWindows_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define HyperactiveWindows_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define HyperactiveWindows_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define HyperactiveWindows_Item(This,hyperWinID,hyperWindow)	\
    ( (This)->lpVtbl -> Item(This,hyperWinID,hyperWindow) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HyperactiveWindows_INTERFACE_DEFINED__ */


#ifndef __UserWindows_INTERFACE_DEFINED__
#define __UserWindows_INTERFACE_DEFINED__

/* interface UserWindows */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_UserWindows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b1ab92cc-3c71-4a77-8fcf-12b3a71c5b09")
    UserWindows : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long userWinID,
            /* [retval][out] */ UserWindow **userWindow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UserWindowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UserWindows * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UserWindows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UserWindows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UserWindows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UserWindows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UserWindows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UserWindows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            UserWindows * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            UserWindows * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            UserWindows * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            UserWindows * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            UserWindows * This,
            /* [in] */ long userWinID,
            /* [retval][out] */ UserWindow **userWindow);
        
        END_INTERFACE
    } UserWindowsVtbl;

    interface UserWindows
    {
        CONST_VTBL struct UserWindowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UserWindows_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define UserWindows_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define UserWindows_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define UserWindows_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define UserWindows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define UserWindows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define UserWindows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define UserWindows_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define UserWindows_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define UserWindows_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define UserWindows_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define UserWindows_Item(This,userWinID,userWindow)	\
    ( (This)->lpVtbl -> Item(This,userWinID,userWindow) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __UserWindows_INTERFACE_DEFINED__ */


#ifndef __CharacterDictionary_INTERFACE_DEFINED__
#define __CharacterDictionary_INTERFACE_DEFINED__

/* interface CharacterDictionary */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_CharacterDictionary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2e3a39f9-65da-4b7f-bd59-9ac8490f17f2")
    CharacterDictionary : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Overlap( 
            /* [retval][out] */ _Window **overlap) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsValid( 
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Character,
            /* [optional][in] */ VARIANT FontName,
            /* [retval][out] */ CharacterEntry **characterEntry) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ VARIANT Character,
            /* [in] */ BSTR translation,
            /* [optional][in] */ VARIANT FontName,
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ VARIANT Character,
            /* [optional][in] */ VARIANT FontName,
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CharacterDictionaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CharacterDictionary * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CharacterDictionary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CharacterDictionary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CharacterDictionary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CharacterDictionary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CharacterDictionary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CharacterDictionary * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CharacterDictionary * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CharacterDictionary * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CharacterDictionary * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            CharacterDictionary * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Overlap )( 
            CharacterDictionary * This,
            /* [retval][out] */ _Window **overlap);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsValid )( 
            CharacterDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            CharacterDictionary * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CharacterDictionary * This,
            /* [in] */ VARIANT Character,
            /* [optional][in] */ VARIANT FontName,
            /* [retval][out] */ CharacterEntry **characterEntry);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            CharacterDictionary * This,
            /* [in] */ VARIANT Character,
            /* [in] */ BSTR translation,
            /* [optional][in] */ VARIANT FontName,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            CharacterDictionary * This,
            /* [in] */ VARIANT Character,
            /* [optional][in] */ VARIANT FontName,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            CharacterDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            CharacterDictionary * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            CharacterDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            CharacterDictionary * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        END_INTERFACE
    } CharacterDictionaryVtbl;

    interface CharacterDictionary
    {
        CONST_VTBL struct CharacterDictionaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CharacterDictionary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CharacterDictionary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CharacterDictionary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CharacterDictionary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CharacterDictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CharacterDictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CharacterDictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CharacterDictionary_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define CharacterDictionary_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define CharacterDictionary_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define CharacterDictionary_get_FileName(This,name)	\
    ( (This)->lpVtbl -> get_FileName(This,name) ) 

#define CharacterDictionary_get_Overlap(This,overlap)	\
    ( (This)->lpVtbl -> get_Overlap(This,overlap) ) 

#define CharacterDictionary_get_IsValid(This,success)	\
    ( (This)->lpVtbl -> get_IsValid(This,success) ) 

#define CharacterDictionary_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define CharacterDictionary_Item(This,Character,FontName,characterEntry)	\
    ( (This)->lpVtbl -> Item(This,Character,FontName,characterEntry) ) 

#define CharacterDictionary_Add(This,Character,translation,FontName,succes)	\
    ( (This)->lpVtbl -> Add(This,Character,translation,FontName,succes) ) 

#define CharacterDictionary_Delete(This,Character,FontName,succes)	\
    ( (This)->lpVtbl -> Delete(This,Character,FontName,succes) ) 

#define CharacterDictionary_Save(This,succes)	\
    ( (This)->lpVtbl -> Save(This,succes) ) 

#define CharacterDictionary_SaveAs(This,name,succes)	\
    ( (This)->lpVtbl -> SaveAs(This,name,succes) ) 

#define CharacterDictionary_Close(This,succes)	\
    ( (This)->lpVtbl -> Close(This,succes) ) 

#define CharacterDictionary_Open(This,name,succes)	\
    ( (This)->lpVtbl -> Open(This,name,succes) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CharacterDictionary_INTERFACE_DEFINED__ */


#ifndef __ExceptionDictionary_INTERFACE_DEFINED__
#define __ExceptionDictionary_INTERFACE_DEFINED__

/* interface ExceptionDictionary */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ExceptionDictionary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7569e232-5c97-4ce8-a432-4a549e77a175")
    ExceptionDictionary : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Overlap( 
            /* [retval][out] */ _Window **overlap) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsValid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ BSTR word,
            /* [retval][out] */ ExceptionEntry **exceptionEntry) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR word,
            /* [in] */ BSTR translation,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ BSTR word,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExceptionDictionaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ExceptionDictionary * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ExceptionDictionary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ExceptionDictionary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ExceptionDictionary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ExceptionDictionary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ExceptionDictionary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ExceptionDictionary * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ExceptionDictionary * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ExceptionDictionary * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ExceptionDictionary * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            ExceptionDictionary * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Overlap )( 
            ExceptionDictionary * This,
            /* [retval][out] */ _Window **overlap);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsValid )( 
            ExceptionDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ExceptionDictionary * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ExceptionDictionary * This,
            /* [in] */ BSTR word,
            /* [retval][out] */ ExceptionEntry **exceptionEntry);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ExceptionDictionary * This,
            /* [in] */ BSTR word,
            /* [in] */ BSTR translation,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ExceptionDictionary * This,
            /* [in] */ BSTR word,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            ExceptionDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            ExceptionDictionary * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            ExceptionDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            ExceptionDictionary * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        END_INTERFACE
    } ExceptionDictionaryVtbl;

    interface ExceptionDictionary
    {
        CONST_VTBL struct ExceptionDictionaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ExceptionDictionary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ExceptionDictionary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ExceptionDictionary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ExceptionDictionary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ExceptionDictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ExceptionDictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ExceptionDictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ExceptionDictionary_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ExceptionDictionary_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ExceptionDictionary_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define ExceptionDictionary_get_FileName(This,name)	\
    ( (This)->lpVtbl -> get_FileName(This,name) ) 

#define ExceptionDictionary_get_Overlap(This,overlap)	\
    ( (This)->lpVtbl -> get_Overlap(This,overlap) ) 

#define ExceptionDictionary_get_IsValid(This,prop)	\
    ( (This)->lpVtbl -> get_IsValid(This,prop) ) 

#define ExceptionDictionary_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define ExceptionDictionary_Item(This,word,exceptionEntry)	\
    ( (This)->lpVtbl -> Item(This,word,exceptionEntry) ) 

#define ExceptionDictionary_Add(This,word,translation,success)	\
    ( (This)->lpVtbl -> Add(This,word,translation,success) ) 

#define ExceptionDictionary_Delete(This,word,success)	\
    ( (This)->lpVtbl -> Delete(This,word,success) ) 

#define ExceptionDictionary_Save(This,success)	\
    ( (This)->lpVtbl -> Save(This,success) ) 

#define ExceptionDictionary_SaveAs(This,name,success)	\
    ( (This)->lpVtbl -> SaveAs(This,name,success) ) 

#define ExceptionDictionary_Close(This,success)	\
    ( (This)->lpVtbl -> Close(This,success) ) 

#define ExceptionDictionary_Open(This,name,success)	\
    ( (This)->lpVtbl -> Open(This,name,success) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ExceptionDictionary_INTERFACE_DEFINED__ */


#ifndef __ColorDictionary_INTERFACE_DEFINED__
#define __ColorDictionary_INTERFACE_DEFINED__

/* interface ColorDictionary */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ColorDictionary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fadf1af7-3ac3-4e41-8f34-b0528ced5d0a")
    ColorDictionary : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Overlap( 
            /* [retval][out] */ _Window **overlap) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsValid( 
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ Color *color,
            /* [optional][in] */ VARIANT ClosestMatch,
            /* [retval][out] */ ColorEntry **colorEntry) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Color *color,
            /* [in] */ BSTR translation,
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ Color *color,
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *succes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColorDictionaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ColorDictionary * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ColorDictionary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ColorDictionary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ColorDictionary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ColorDictionary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ColorDictionary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ColorDictionary * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ColorDictionary * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ColorDictionary * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ColorDictionary * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            ColorDictionary * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Overlap )( 
            ColorDictionary * This,
            /* [retval][out] */ _Window **overlap);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsValid )( 
            ColorDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ColorDictionary * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ColorDictionary * This,
            /* [in] */ Color *color,
            /* [optional][in] */ VARIANT ClosestMatch,
            /* [retval][out] */ ColorEntry **colorEntry);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ColorDictionary * This,
            /* [in] */ Color *color,
            /* [in] */ BSTR translation,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ColorDictionary * This,
            /* [in] */ Color *color,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            ColorDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            ColorDictionary * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            ColorDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            ColorDictionary * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *succes);
        
        END_INTERFACE
    } ColorDictionaryVtbl;

    interface ColorDictionary
    {
        CONST_VTBL struct ColorDictionaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ColorDictionary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ColorDictionary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ColorDictionary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ColorDictionary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ColorDictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ColorDictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ColorDictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ColorDictionary_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ColorDictionary_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ColorDictionary_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define ColorDictionary_get_FileName(This,name)	\
    ( (This)->lpVtbl -> get_FileName(This,name) ) 

#define ColorDictionary_get_Overlap(This,overlap)	\
    ( (This)->lpVtbl -> get_Overlap(This,overlap) ) 

#define ColorDictionary_get_IsValid(This,success)	\
    ( (This)->lpVtbl -> get_IsValid(This,success) ) 

#define ColorDictionary_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define ColorDictionary_Item(This,color,ClosestMatch,colorEntry)	\
    ( (This)->lpVtbl -> Item(This,color,ClosestMatch,colorEntry) ) 

#define ColorDictionary_Add(This,color,translation,succes)	\
    ( (This)->lpVtbl -> Add(This,color,translation,succes) ) 

#define ColorDictionary_Delete(This,color,succes)	\
    ( (This)->lpVtbl -> Delete(This,color,succes) ) 

#define ColorDictionary_Save(This,succes)	\
    ( (This)->lpVtbl -> Save(This,succes) ) 

#define ColorDictionary_SaveAs(This,name,succes)	\
    ( (This)->lpVtbl -> SaveAs(This,name,succes) ) 

#define ColorDictionary_Close(This,succes)	\
    ( (This)->lpVtbl -> Close(This,succes) ) 

#define ColorDictionary_Open(This,name,succes)	\
    ( (This)->lpVtbl -> Open(This,name,succes) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ColorDictionary_INTERFACE_DEFINED__ */


#ifndef __GraphicDictionary_INTERFACE_DEFINED__
#define __GraphicDictionary_INTERFACE_DEFINED__

/* interface GraphicDictionary */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_GraphicDictionary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("61cf7e57-96b5-40c8-823a-a25cc29c7f93")
    GraphicDictionary : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Overlap( 
            /* [retval][out] */ _Window **overlap) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsValid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long CRC,
            /* [retval][out] */ GraphicEntry **graphicEntry) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ long CRC,
            /* [in] */ BSTR SpeechLabel,
            /* [in] */ BSTR BrailleLabel,
            /* [in] */ VARIANT_BOOL SpeechSilence,
            /* [in] */ VARIANT_BOOL ExcludeFromLines,
            /* [in] */ VARIANT_BOOL BrailleSilence,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ long CRC,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GraphicDictionaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            GraphicDictionary * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            GraphicDictionary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            GraphicDictionary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            GraphicDictionary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            GraphicDictionary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            GraphicDictionary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            GraphicDictionary * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            GraphicDictionary * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            GraphicDictionary * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            GraphicDictionary * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            GraphicDictionary * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Overlap )( 
            GraphicDictionary * This,
            /* [retval][out] */ _Window **overlap);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsValid )( 
            GraphicDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            GraphicDictionary * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            GraphicDictionary * This,
            /* [in] */ long CRC,
            /* [retval][out] */ GraphicEntry **graphicEntry);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            GraphicDictionary * This,
            /* [in] */ long CRC,
            /* [in] */ BSTR SpeechLabel,
            /* [in] */ BSTR BrailleLabel,
            /* [in] */ VARIANT_BOOL SpeechSilence,
            /* [in] */ VARIANT_BOOL ExcludeFromLines,
            /* [in] */ VARIANT_BOOL BrailleSilence,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            GraphicDictionary * This,
            /* [in] */ long CRC,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            GraphicDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            GraphicDictionary * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            GraphicDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            GraphicDictionary * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        END_INTERFACE
    } GraphicDictionaryVtbl;

    interface GraphicDictionary
    {
        CONST_VTBL struct GraphicDictionaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define GraphicDictionary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define GraphicDictionary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define GraphicDictionary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define GraphicDictionary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define GraphicDictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define GraphicDictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define GraphicDictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define GraphicDictionary_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define GraphicDictionary_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define GraphicDictionary_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define GraphicDictionary_get_FileName(This,name)	\
    ( (This)->lpVtbl -> get_FileName(This,name) ) 

#define GraphicDictionary_get_Overlap(This,overlap)	\
    ( (This)->lpVtbl -> get_Overlap(This,overlap) ) 

#define GraphicDictionary_get_IsValid(This,prop)	\
    ( (This)->lpVtbl -> get_IsValid(This,prop) ) 

#define GraphicDictionary_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define GraphicDictionary_Item(This,CRC,graphicEntry)	\
    ( (This)->lpVtbl -> Item(This,CRC,graphicEntry) ) 

#define GraphicDictionary_Add(This,CRC,SpeechLabel,BrailleLabel,SpeechSilence,ExcludeFromLines,BrailleSilence,success)	\
    ( (This)->lpVtbl -> Add(This,CRC,SpeechLabel,BrailleLabel,SpeechSilence,ExcludeFromLines,BrailleSilence,success) ) 

#define GraphicDictionary_Delete(This,CRC,success)	\
    ( (This)->lpVtbl -> Delete(This,CRC,success) ) 

#define GraphicDictionary_Save(This,success)	\
    ( (This)->lpVtbl -> Save(This,success) ) 

#define GraphicDictionary_SaveAs(This,name,success)	\
    ( (This)->lpVtbl -> SaveAs(This,name,success) ) 

#define GraphicDictionary_Close(This,success)	\
    ( (This)->lpVtbl -> Close(This,success) ) 

#define GraphicDictionary_Open(This,name,success)	\
    ( (This)->lpVtbl -> Open(This,name,success) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __GraphicDictionary_INTERFACE_DEFINED__ */


#ifndef __KeyLabelDictionary_INTERFACE_DEFINED__
#define __KeyLabelDictionary_INTERFACE_DEFINED__

/* interface KeyLabelDictionary */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_KeyLabelDictionary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("781865fc-9e31-46c9-8140-e4af15a8170b")
    KeyLabelDictionary : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Overlap( 
            /* [retval][out] */ _Window **overlap) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsValid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VirtualKeyCode key,
            /* [in] */ KeyModifiers mods,
            /* [retval][out] */ KeyLabelEntry **keyLabelEntry) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ VirtualKeyCode key,
            /* [in] */ KeyModifiers mods,
            /* [in] */ BSTR translation,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ VirtualKeyCode key,
            /* [in] */ KeyModifiers mods,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct KeyLabelDictionaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            KeyLabelDictionary * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            KeyLabelDictionary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            KeyLabelDictionary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            KeyLabelDictionary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            KeyLabelDictionary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            KeyLabelDictionary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            KeyLabelDictionary * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            KeyLabelDictionary * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            KeyLabelDictionary * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            KeyLabelDictionary * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            KeyLabelDictionary * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Overlap )( 
            KeyLabelDictionary * This,
            /* [retval][out] */ _Window **overlap);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsValid )( 
            KeyLabelDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            KeyLabelDictionary * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            KeyLabelDictionary * This,
            /* [in] */ VirtualKeyCode key,
            /* [in] */ KeyModifiers mods,
            /* [retval][out] */ KeyLabelEntry **keyLabelEntry);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            KeyLabelDictionary * This,
            /* [in] */ VirtualKeyCode key,
            /* [in] */ KeyModifiers mods,
            /* [in] */ BSTR translation,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            KeyLabelDictionary * This,
            /* [in] */ VirtualKeyCode key,
            /* [in] */ KeyModifiers mods,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            KeyLabelDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            KeyLabelDictionary * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            KeyLabelDictionary * This,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            KeyLabelDictionary * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT_BOOL *success);
        
        END_INTERFACE
    } KeyLabelDictionaryVtbl;

    interface KeyLabelDictionary
    {
        CONST_VTBL struct KeyLabelDictionaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define KeyLabelDictionary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define KeyLabelDictionary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define KeyLabelDictionary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define KeyLabelDictionary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define KeyLabelDictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define KeyLabelDictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define KeyLabelDictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define KeyLabelDictionary_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define KeyLabelDictionary_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define KeyLabelDictionary_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define KeyLabelDictionary_get_FileName(This,name)	\
    ( (This)->lpVtbl -> get_FileName(This,name) ) 

#define KeyLabelDictionary_get_Overlap(This,overlap)	\
    ( (This)->lpVtbl -> get_Overlap(This,overlap) ) 

#define KeyLabelDictionary_get_IsValid(This,prop)	\
    ( (This)->lpVtbl -> get_IsValid(This,prop) ) 

#define KeyLabelDictionary_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define KeyLabelDictionary_Item(This,key,mods,keyLabelEntry)	\
    ( (This)->lpVtbl -> Item(This,key,mods,keyLabelEntry) ) 

#define KeyLabelDictionary_Add(This,key,mods,translation,success)	\
    ( (This)->lpVtbl -> Add(This,key,mods,translation,success) ) 

#define KeyLabelDictionary_Delete(This,key,mods,success)	\
    ( (This)->lpVtbl -> Delete(This,key,mods,success) ) 

#define KeyLabelDictionary_Save(This,success)	\
    ( (This)->lpVtbl -> Save(This,success) ) 

#define KeyLabelDictionary_SaveAs(This,name,success)	\
    ( (This)->lpVtbl -> SaveAs(This,name,success) ) 

#define KeyLabelDictionary_Close(This,success)	\
    ( (This)->lpVtbl -> Close(This,success) ) 

#define KeyLabelDictionary_Open(This,name,success)	\
    ( (This)->lpVtbl -> Open(This,name,success) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __KeyLabelDictionary_INTERFACE_DEFINED__ */


#ifndef __UserWindowCoordinates_INTERFACE_DEFINED__
#define __UserWindowCoordinates_INTERFACE_DEFINED__

/* interface UserWindowCoordinates */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_UserWindowCoordinates;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2a8a2434-956d-41a0-891c-71b3e4fe6ef2")
    UserWindowCoordinates : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Right( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bottom( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Bottom( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OffsetFromLeft( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OffsetFromLeft( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OffsetFromRight( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OffsetFromRight( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OffsetFromTop( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OffsetFromTop( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OffsetFromBottom( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OffsetFromBottom( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftFloatPosition( 
            /* [retval][out] */ FloatWindowPosition *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LeftFloatPosition( 
            /* [in] */ FloatWindowPosition prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RightFloatPosition( 
            /* [retval][out] */ FloatWindowPosition *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RightFloatPosition( 
            /* [in] */ FloatWindowPosition prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TopFloatPosition( 
            /* [retval][out] */ FloatWindowPosition *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TopFloatPosition( 
            /* [in] */ FloatWindowPosition prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BottomFloatPosition( 
            /* [retval][out] */ FloatWindowPosition *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BottomFloatPosition( 
            /* [in] */ FloatWindowPosition prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftString( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LeftString( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RightString( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RightString( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TopString( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TopString( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BottomString( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BottomString( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationDialog( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UserWindowCoordinatesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UserWindowCoordinates * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UserWindowCoordinates * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UserWindowCoordinates * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UserWindowCoordinates * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UserWindowCoordinates * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UserWindowCoordinates * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UserWindowCoordinates * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            UserWindowCoordinates * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Right )( 
            UserWindowCoordinates * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            UserWindowCoordinates * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bottom )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Bottom )( 
            UserWindowCoordinates * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OffsetFromLeft )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OffsetFromLeft )( 
            UserWindowCoordinates * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OffsetFromRight )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OffsetFromRight )( 
            UserWindowCoordinates * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OffsetFromTop )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OffsetFromTop )( 
            UserWindowCoordinates * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OffsetFromBottom )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OffsetFromBottom )( 
            UserWindowCoordinates * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftFloatPosition )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ FloatWindowPosition *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LeftFloatPosition )( 
            UserWindowCoordinates * This,
            /* [in] */ FloatWindowPosition prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightFloatPosition )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ FloatWindowPosition *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RightFloatPosition )( 
            UserWindowCoordinates * This,
            /* [in] */ FloatWindowPosition prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TopFloatPosition )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ FloatWindowPosition *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TopFloatPosition )( 
            UserWindowCoordinates * This,
            /* [in] */ FloatWindowPosition prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BottomFloatPosition )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ FloatWindowPosition *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BottomFloatPosition )( 
            UserWindowCoordinates * This,
            /* [in] */ FloatWindowPosition prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftString )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LeftString )( 
            UserWindowCoordinates * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightString )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RightString )( 
            UserWindowCoordinates * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TopString )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TopString )( 
            UserWindowCoordinates * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BottomString )( 
            UserWindowCoordinates * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BottomString )( 
            UserWindowCoordinates * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConfigurationDialog )( 
            UserWindowCoordinates * This);
        
        END_INTERFACE
    } UserWindowCoordinatesVtbl;

    interface UserWindowCoordinates
    {
        CONST_VTBL struct UserWindowCoordinatesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UserWindowCoordinates_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define UserWindowCoordinates_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define UserWindowCoordinates_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define UserWindowCoordinates_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define UserWindowCoordinates_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define UserWindowCoordinates_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define UserWindowCoordinates_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define UserWindowCoordinates_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define UserWindowCoordinates_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define UserWindowCoordinates_get_Left(This,prop)	\
    ( (This)->lpVtbl -> get_Left(This,prop) ) 

#define UserWindowCoordinates_put_Left(This,prop)	\
    ( (This)->lpVtbl -> put_Left(This,prop) ) 

#define UserWindowCoordinates_get_Right(This,prop)	\
    ( (This)->lpVtbl -> get_Right(This,prop) ) 

#define UserWindowCoordinates_put_Right(This,prop)	\
    ( (This)->lpVtbl -> put_Right(This,prop) ) 

#define UserWindowCoordinates_get_Top(This,prop)	\
    ( (This)->lpVtbl -> get_Top(This,prop) ) 

#define UserWindowCoordinates_put_Top(This,prop)	\
    ( (This)->lpVtbl -> put_Top(This,prop) ) 

#define UserWindowCoordinates_get_Bottom(This,prop)	\
    ( (This)->lpVtbl -> get_Bottom(This,prop) ) 

#define UserWindowCoordinates_put_Bottom(This,prop)	\
    ( (This)->lpVtbl -> put_Bottom(This,prop) ) 

#define UserWindowCoordinates_get_OffsetFromLeft(This,prop)	\
    ( (This)->lpVtbl -> get_OffsetFromLeft(This,prop) ) 

#define UserWindowCoordinates_put_OffsetFromLeft(This,prop)	\
    ( (This)->lpVtbl -> put_OffsetFromLeft(This,prop) ) 

#define UserWindowCoordinates_get_OffsetFromRight(This,prop)	\
    ( (This)->lpVtbl -> get_OffsetFromRight(This,prop) ) 

#define UserWindowCoordinates_put_OffsetFromRight(This,prop)	\
    ( (This)->lpVtbl -> put_OffsetFromRight(This,prop) ) 

#define UserWindowCoordinates_get_OffsetFromTop(This,prop)	\
    ( (This)->lpVtbl -> get_OffsetFromTop(This,prop) ) 

#define UserWindowCoordinates_put_OffsetFromTop(This,prop)	\
    ( (This)->lpVtbl -> put_OffsetFromTop(This,prop) ) 

#define UserWindowCoordinates_get_OffsetFromBottom(This,prop)	\
    ( (This)->lpVtbl -> get_OffsetFromBottom(This,prop) ) 

#define UserWindowCoordinates_put_OffsetFromBottom(This,prop)	\
    ( (This)->lpVtbl -> put_OffsetFromBottom(This,prop) ) 

#define UserWindowCoordinates_get_LeftFloatPosition(This,prop)	\
    ( (This)->lpVtbl -> get_LeftFloatPosition(This,prop) ) 

#define UserWindowCoordinates_put_LeftFloatPosition(This,prop)	\
    ( (This)->lpVtbl -> put_LeftFloatPosition(This,prop) ) 

#define UserWindowCoordinates_get_RightFloatPosition(This,prop)	\
    ( (This)->lpVtbl -> get_RightFloatPosition(This,prop) ) 

#define UserWindowCoordinates_put_RightFloatPosition(This,prop)	\
    ( (This)->lpVtbl -> put_RightFloatPosition(This,prop) ) 

#define UserWindowCoordinates_get_TopFloatPosition(This,prop)	\
    ( (This)->lpVtbl -> get_TopFloatPosition(This,prop) ) 

#define UserWindowCoordinates_put_TopFloatPosition(This,prop)	\
    ( (This)->lpVtbl -> put_TopFloatPosition(This,prop) ) 

#define UserWindowCoordinates_get_BottomFloatPosition(This,prop)	\
    ( (This)->lpVtbl -> get_BottomFloatPosition(This,prop) ) 

#define UserWindowCoordinates_put_BottomFloatPosition(This,prop)	\
    ( (This)->lpVtbl -> put_BottomFloatPosition(This,prop) ) 

#define UserWindowCoordinates_get_LeftString(This,prop)	\
    ( (This)->lpVtbl -> get_LeftString(This,prop) ) 

#define UserWindowCoordinates_put_LeftString(This,prop)	\
    ( (This)->lpVtbl -> put_LeftString(This,prop) ) 

#define UserWindowCoordinates_get_RightString(This,prop)	\
    ( (This)->lpVtbl -> get_RightString(This,prop) ) 

#define UserWindowCoordinates_put_RightString(This,prop)	\
    ( (This)->lpVtbl -> put_RightString(This,prop) ) 

#define UserWindowCoordinates_get_TopString(This,prop)	\
    ( (This)->lpVtbl -> get_TopString(This,prop) ) 

#define UserWindowCoordinates_put_TopString(This,prop)	\
    ( (This)->lpVtbl -> put_TopString(This,prop) ) 

#define UserWindowCoordinates_get_BottomString(This,prop)	\
    ( (This)->lpVtbl -> get_BottomString(This,prop) ) 

#define UserWindowCoordinates_put_BottomString(This,prop)	\
    ( (This)->lpVtbl -> put_BottomString(This,prop) ) 

#define UserWindowCoordinates_ConfigurationDialog(This)	\
    ( (This)->lpVtbl -> ConfigurationDialog(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __UserWindowCoordinates_INTERFACE_DEFINED__ */


#ifndef __UserWindow_INTERFACE_DEFINED__
#define __UserWindow_INTERFACE_DEFINED__

/* interface UserWindow */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_UserWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5cef409d-ba9f-4b8a-befb-7c7a27997550")
    UserWindow : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ UserWindowCoordinates **coords) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ UserWindowStatus *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Status( 
            /* [in] */ UserWindowStatus prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MatchAnyForegroundColor( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MatchAnyForegroundColor( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ForegroundColor( 
            /* [retval][out] */ Color **color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ForegroundColor( 
            /* [in] */ Color *color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MatchAnyBackgroundColor( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MatchAnyBackgroundColor( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColor( 
            /* [retval][out] */ Color **color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundColor( 
            /* [in] */ Color *color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowToChainRead( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowToChainRead( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeakAndSpell( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeakAndSpell( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HighlightForegroundColor( 
            /* [retval][out] */ Color **color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HighlightForegroundColor( 
            /* [in] */ Color *color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HighlightBackgroundColor( 
            /* [retval][out] */ Color **color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HighlightBackgroundColor( 
            /* [in] */ Color *color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoDetermineHighlightColor( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoDetermineHighlightColor( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HighlightStatus( 
            /* [retval][out] */ AutoMode *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HighlightStatus( 
            /* [in] */ AutoMode prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rectangle( 
            /* [retval][out] */ WindowRectangle **windowRectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationDialog( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Speak( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UserWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UserWindow * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UserWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UserWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UserWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UserWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UserWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UserWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            UserWindow * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            UserWindow * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            UserWindow * This,
            /* [retval][out] */ UserWindowCoordinates **coords);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            UserWindow * This,
            /* [retval][out] */ UserWindowStatus *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Status )( 
            UserWindow * This,
            /* [in] */ UserWindowStatus prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            UserWindow * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            UserWindow * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MatchAnyForegroundColor )( 
            UserWindow * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MatchAnyForegroundColor )( 
            UserWindow * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundColor )( 
            UserWindow * This,
            /* [retval][out] */ Color **color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundColor )( 
            UserWindow * This,
            /* [in] */ Color *color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MatchAnyBackgroundColor )( 
            UserWindow * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MatchAnyBackgroundColor )( 
            UserWindow * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            UserWindow * This,
            /* [retval][out] */ Color **color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            UserWindow * This,
            /* [in] */ Color *color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowToChainRead )( 
            UserWindow * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowToChainRead )( 
            UserWindow * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeakAndSpell )( 
            UserWindow * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeakAndSpell )( 
            UserWindow * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HighlightForegroundColor )( 
            UserWindow * This,
            /* [retval][out] */ Color **color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HighlightForegroundColor )( 
            UserWindow * This,
            /* [in] */ Color *color);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HighlightBackgroundColor )( 
            UserWindow * This,
            /* [retval][out] */ Color **color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HighlightBackgroundColor )( 
            UserWindow * This,
            /* [in] */ Color *color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoDetermineHighlightColor )( 
            UserWindow * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoDetermineHighlightColor )( 
            UserWindow * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HighlightStatus )( 
            UserWindow * This,
            /* [retval][out] */ AutoMode *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HighlightStatus )( 
            UserWindow * This,
            /* [in] */ AutoMode prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rectangle )( 
            UserWindow * This,
            /* [retval][out] */ WindowRectangle **windowRectangle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConfigurationDialog )( 
            UserWindow * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Speak )( 
            UserWindow * This);
        
        END_INTERFACE
    } UserWindowVtbl;

    interface UserWindow
    {
        CONST_VTBL struct UserWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UserWindow_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define UserWindow_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define UserWindow_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define UserWindow_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define UserWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define UserWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define UserWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define UserWindow_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define UserWindow_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define UserWindow_get_Coordinates(This,coords)	\
    ( (This)->lpVtbl -> get_Coordinates(This,coords) ) 

#define UserWindow_get_Status(This,prop)	\
    ( (This)->lpVtbl -> get_Status(This,prop) ) 

#define UserWindow_put_Status(This,prop)	\
    ( (This)->lpVtbl -> put_Status(This,prop) ) 

#define UserWindow_get_Comment(This,prop)	\
    ( (This)->lpVtbl -> get_Comment(This,prop) ) 

#define UserWindow_put_Comment(This,prop)	\
    ( (This)->lpVtbl -> put_Comment(This,prop) ) 

#define UserWindow_put_MatchAnyForegroundColor(This,prop)	\
    ( (This)->lpVtbl -> put_MatchAnyForegroundColor(This,prop) ) 

#define UserWindow_get_MatchAnyForegroundColor(This,prop)	\
    ( (This)->lpVtbl -> get_MatchAnyForegroundColor(This,prop) ) 

#define UserWindow_get_ForegroundColor(This,color)	\
    ( (This)->lpVtbl -> get_ForegroundColor(This,color) ) 

#define UserWindow_put_ForegroundColor(This,color)	\
    ( (This)->lpVtbl -> put_ForegroundColor(This,color) ) 

#define UserWindow_put_MatchAnyBackgroundColor(This,prop)	\
    ( (This)->lpVtbl -> put_MatchAnyBackgroundColor(This,prop) ) 

#define UserWindow_get_MatchAnyBackgroundColor(This,prop)	\
    ( (This)->lpVtbl -> get_MatchAnyBackgroundColor(This,prop) ) 

#define UserWindow_get_BackgroundColor(This,color)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,color) ) 

#define UserWindow_put_BackgroundColor(This,color)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,color) ) 

#define UserWindow_put_WindowToChainRead(This,prop)	\
    ( (This)->lpVtbl -> put_WindowToChainRead(This,prop) ) 

#define UserWindow_get_WindowToChainRead(This,prop)	\
    ( (This)->lpVtbl -> get_WindowToChainRead(This,prop) ) 

#define UserWindow_put_SpeakAndSpell(This,prop)	\
    ( (This)->lpVtbl -> put_SpeakAndSpell(This,prop) ) 

#define UserWindow_get_SpeakAndSpell(This,prop)	\
    ( (This)->lpVtbl -> get_SpeakAndSpell(This,prop) ) 

#define UserWindow_get_HighlightForegroundColor(This,color)	\
    ( (This)->lpVtbl -> get_HighlightForegroundColor(This,color) ) 

#define UserWindow_put_HighlightForegroundColor(This,color)	\
    ( (This)->lpVtbl -> put_HighlightForegroundColor(This,color) ) 

#define UserWindow_get_HighlightBackgroundColor(This,color)	\
    ( (This)->lpVtbl -> get_HighlightBackgroundColor(This,color) ) 

#define UserWindow_put_HighlightBackgroundColor(This,color)	\
    ( (This)->lpVtbl -> put_HighlightBackgroundColor(This,color) ) 

#define UserWindow_put_AutoDetermineHighlightColor(This,prop)	\
    ( (This)->lpVtbl -> put_AutoDetermineHighlightColor(This,prop) ) 

#define UserWindow_get_AutoDetermineHighlightColor(This,prop)	\
    ( (This)->lpVtbl -> get_AutoDetermineHighlightColor(This,prop) ) 

#define UserWindow_get_HighlightStatus(This,prop)	\
    ( (This)->lpVtbl -> get_HighlightStatus(This,prop) ) 

#define UserWindow_put_HighlightStatus(This,prop)	\
    ( (This)->lpVtbl -> put_HighlightStatus(This,prop) ) 

#define UserWindow_get_Rectangle(This,windowRectangle)	\
    ( (This)->lpVtbl -> get_Rectangle(This,windowRectangle) ) 

#define UserWindow_ConfigurationDialog(This)	\
    ( (This)->lpVtbl -> ConfigurationDialog(This) ) 

#define UserWindow_Speak(This)	\
    ( (This)->lpVtbl -> Speak(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __UserWindow_INTERFACE_DEFINED__ */


#ifndef __HyperactiveWindow_INTERFACE_DEFINED__
#define __HyperactiveWindow_INTERFACE_DEFINED__

/* interface HyperactiveWindow */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_HyperactiveWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("86b2e2df-4987-4e18-8791-e638bfb774ae")
    HyperactiveWindow : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Coordinates( 
            /* [retval][out] */ UserWindowCoordinates **coords) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Status( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Interruptability( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Interruptability( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Trigger( 
            /* [retval][out] */ HyperWindowTrigger *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Trigger( 
            /* [in] */ HyperWindowTrigger prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Commands( 
            /* [retval][out] */ HyperactiveWindowCommands **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TriggerInformation( 
            /* [retval][out] */ VARIANT *commandInfo) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TriggerInformation( 
            /* [in] */ VARIANT commandInfo) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SearchAttribute( 
            /* [retval][out] */ TriggerSearchAttribute **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rectangle( 
            /* [retval][out] */ WindowRectangle **windowRectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationDialog( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Speak( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HyperactiveWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HyperactiveWindow * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HyperactiveWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HyperactiveWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HyperactiveWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HyperactiveWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HyperactiveWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HyperactiveWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HyperactiveWindow * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HyperactiveWindow * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Coordinates )( 
            HyperactiveWindow * This,
            /* [retval][out] */ UserWindowCoordinates **coords);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            HyperactiveWindow * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Status )( 
            HyperactiveWindow * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            HyperactiveWindow * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            HyperactiveWindow * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Interruptability )( 
            HyperactiveWindow * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Interruptability )( 
            HyperactiveWindow * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Trigger )( 
            HyperactiveWindow * This,
            /* [retval][out] */ HyperWindowTrigger *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Trigger )( 
            HyperactiveWindow * This,
            /* [in] */ HyperWindowTrigger prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Commands )( 
            HyperactiveWindow * This,
            /* [retval][out] */ HyperactiveWindowCommands **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TriggerInformation )( 
            HyperactiveWindow * This,
            /* [retval][out] */ VARIANT *commandInfo);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TriggerInformation )( 
            HyperactiveWindow * This,
            /* [in] */ VARIANT commandInfo);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SearchAttribute )( 
            HyperactiveWindow * This,
            /* [retval][out] */ TriggerSearchAttribute **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rectangle )( 
            HyperactiveWindow * This,
            /* [retval][out] */ WindowRectangle **windowRectangle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConfigurationDialog )( 
            HyperactiveWindow * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Speak )( 
            HyperactiveWindow * This);
        
        END_INTERFACE
    } HyperactiveWindowVtbl;

    interface HyperactiveWindow
    {
        CONST_VTBL struct HyperactiveWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HyperactiveWindow_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HyperactiveWindow_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HyperactiveWindow_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HyperactiveWindow_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HyperactiveWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HyperactiveWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HyperactiveWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HyperactiveWindow_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define HyperactiveWindow_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define HyperactiveWindow_get_Coordinates(This,coords)	\
    ( (This)->lpVtbl -> get_Coordinates(This,coords) ) 

#define HyperactiveWindow_get_Status(This,prop)	\
    ( (This)->lpVtbl -> get_Status(This,prop) ) 

#define HyperactiveWindow_put_Status(This,prop)	\
    ( (This)->lpVtbl -> put_Status(This,prop) ) 

#define HyperactiveWindow_get_Comment(This,prop)	\
    ( (This)->lpVtbl -> get_Comment(This,prop) ) 

#define HyperactiveWindow_put_Comment(This,prop)	\
    ( (This)->lpVtbl -> put_Comment(This,prop) ) 

#define HyperactiveWindow_get_Interruptability(This,prop)	\
    ( (This)->lpVtbl -> get_Interruptability(This,prop) ) 

#define HyperactiveWindow_put_Interruptability(This,prop)	\
    ( (This)->lpVtbl -> put_Interruptability(This,prop) ) 

#define HyperactiveWindow_get_Trigger(This,prop)	\
    ( (This)->lpVtbl -> get_Trigger(This,prop) ) 

#define HyperactiveWindow_put_Trigger(This,prop)	\
    ( (This)->lpVtbl -> put_Trigger(This,prop) ) 

#define HyperactiveWindow_get_Commands(This,prop)	\
    ( (This)->lpVtbl -> get_Commands(This,prop) ) 

#define HyperactiveWindow_get_TriggerInformation(This,commandInfo)	\
    ( (This)->lpVtbl -> get_TriggerInformation(This,commandInfo) ) 

#define HyperactiveWindow_put_TriggerInformation(This,commandInfo)	\
    ( (This)->lpVtbl -> put_TriggerInformation(This,commandInfo) ) 

#define HyperactiveWindow_get_SearchAttribute(This,prop)	\
    ( (This)->lpVtbl -> get_SearchAttribute(This,prop) ) 

#define HyperactiveWindow_get_Rectangle(This,windowRectangle)	\
    ( (This)->lpVtbl -> get_Rectangle(This,windowRectangle) ) 

#define HyperactiveWindow_ConfigurationDialog(This)	\
    ( (This)->lpVtbl -> ConfigurationDialog(This) ) 

#define HyperactiveWindow_Speak(This)	\
    ( (This)->lpVtbl -> Speak(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HyperactiveWindow_INTERFACE_DEFINED__ */


#ifndef __ActivatedVerbosity_INTERFACE_DEFINED__
#define __ActivatedVerbosity_INTERFACE_DEFINED__

/* interface ActivatedVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ActivatedVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("163fa9da-59c4-471c-9e93-907d4489090b")
    ActivatedVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Activated( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Activated( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowType( 
            /* [in] */ WindowTypeStatus prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowType( 
            /* [retval][out] */ WindowTypeStatus *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowTitle( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowTitle( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EntireMessageBox( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EntireMessageBox( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EntireDialog( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EntireDialog( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ActivatedVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ActivatedVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ActivatedVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ActivatedVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ActivatedVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ActivatedVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ActivatedVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ActivatedVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ActivatedVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ActivatedVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Activated )( 
            ActivatedVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Activated )( 
            ActivatedVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowType )( 
            ActivatedVerbosity * This,
            /* [in] */ WindowTypeStatus prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowType )( 
            ActivatedVerbosity * This,
            /* [retval][out] */ WindowTypeStatus *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowTitle )( 
            ActivatedVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowTitle )( 
            ActivatedVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EntireMessageBox )( 
            ActivatedVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EntireMessageBox )( 
            ActivatedVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EntireDialog )( 
            ActivatedVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EntireDialog )( 
            ActivatedVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } ActivatedVerbosityVtbl;

    interface ActivatedVerbosity
    {
        CONST_VTBL struct ActivatedVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ActivatedVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ActivatedVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ActivatedVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ActivatedVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ActivatedVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ActivatedVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ActivatedVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ActivatedVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ActivatedVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ActivatedVerbosity_put_Activated(This,prop)	\
    ( (This)->lpVtbl -> put_Activated(This,prop) ) 

#define ActivatedVerbosity_get_Activated(This,prop)	\
    ( (This)->lpVtbl -> get_Activated(This,prop) ) 

#define ActivatedVerbosity_put_WindowType(This,prop)	\
    ( (This)->lpVtbl -> put_WindowType(This,prop) ) 

#define ActivatedVerbosity_get_WindowType(This,prop)	\
    ( (This)->lpVtbl -> get_WindowType(This,prop) ) 

#define ActivatedVerbosity_put_WindowTitle(This,prop)	\
    ( (This)->lpVtbl -> put_WindowTitle(This,prop) ) 

#define ActivatedVerbosity_get_WindowTitle(This,prop)	\
    ( (This)->lpVtbl -> get_WindowTitle(This,prop) ) 

#define ActivatedVerbosity_put_EntireMessageBox(This,prop)	\
    ( (This)->lpVtbl -> put_EntireMessageBox(This,prop) ) 

#define ActivatedVerbosity_get_EntireMessageBox(This,prop)	\
    ( (This)->lpVtbl -> get_EntireMessageBox(This,prop) ) 

#define ActivatedVerbosity_put_EntireDialog(This,prop)	\
    ( (This)->lpVtbl -> put_EntireDialog(This,prop) ) 

#define ActivatedVerbosity_get_EntireDialog(This,prop)	\
    ( (This)->lpVtbl -> get_EntireDialog(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ActivatedVerbosity_INTERFACE_DEFINED__ */


#ifndef __FocusedVerbosity_INTERFACE_DEFINED__
#define __FocusedVerbosity_INTERFACE_DEFINED__

/* interface FocusedVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_FocusedVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fd82f541-e59d-4092-8a52-50e8289ccf9b")
    FocusedVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Focused( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowType( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowType( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowTypeFirst( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowTypeFirst( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FieldName( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FieldName( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FieldData( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FieldData( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CustomControl( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CustomControl( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyMSAAControls( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyMSAAControls( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FocusedVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FocusedVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FocusedVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FocusedVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FocusedVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FocusedVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FocusedVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FocusedVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            FocusedVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FocusedVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Focused )( 
            FocusedVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            FocusedVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowType )( 
            FocusedVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowType )( 
            FocusedVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowTypeFirst )( 
            FocusedVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowTypeFirst )( 
            FocusedVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FieldName )( 
            FocusedVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FieldName )( 
            FocusedVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FieldData )( 
            FocusedVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FieldData )( 
            FocusedVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomControl )( 
            FocusedVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomControl )( 
            FocusedVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyMSAAControls )( 
            FocusedVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyMSAAControls )( 
            FocusedVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } FocusedVerbosityVtbl;

    interface FocusedVerbosity
    {
        CONST_VTBL struct FocusedVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FocusedVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FocusedVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FocusedVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FocusedVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FocusedVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FocusedVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FocusedVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FocusedVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define FocusedVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define FocusedVerbosity_put_Focused(This,prop)	\
    ( (This)->lpVtbl -> put_Focused(This,prop) ) 

#define FocusedVerbosity_get_Focused(This,prop)	\
    ( (This)->lpVtbl -> get_Focused(This,prop) ) 

#define FocusedVerbosity_put_WindowType(This,prop)	\
    ( (This)->lpVtbl -> put_WindowType(This,prop) ) 

#define FocusedVerbosity_get_WindowType(This,prop)	\
    ( (This)->lpVtbl -> get_WindowType(This,prop) ) 

#define FocusedVerbosity_put_WindowTypeFirst(This,prop)	\
    ( (This)->lpVtbl -> put_WindowTypeFirst(This,prop) ) 

#define FocusedVerbosity_get_WindowTypeFirst(This,prop)	\
    ( (This)->lpVtbl -> get_WindowTypeFirst(This,prop) ) 

#define FocusedVerbosity_put_FieldName(This,prop)	\
    ( (This)->lpVtbl -> put_FieldName(This,prop) ) 

#define FocusedVerbosity_get_FieldName(This,prop)	\
    ( (This)->lpVtbl -> get_FieldName(This,prop) ) 

#define FocusedVerbosity_put_FieldData(This,prop)	\
    ( (This)->lpVtbl -> put_FieldData(This,prop) ) 

#define FocusedVerbosity_get_FieldData(This,prop)	\
    ( (This)->lpVtbl -> get_FieldData(This,prop) ) 

#define FocusedVerbosity_put_CustomControl(This,prop)	\
    ( (This)->lpVtbl -> put_CustomControl(This,prop) ) 

#define FocusedVerbosity_get_CustomControl(This,prop)	\
    ( (This)->lpVtbl -> get_CustomControl(This,prop) ) 

#define FocusedVerbosity_put_IdentifyMSAAControls(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyMSAAControls(This,prop) ) 

#define FocusedVerbosity_get_IdentifyMSAAControls(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyMSAAControls(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FocusedVerbosity_INTERFACE_DEFINED__ */


#ifndef __MenuVerbosity_INTERFACE_DEFINED__
#define __MenuVerbosity_INTERFACE_DEFINED__

/* interface MenuVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_MenuVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cdf3524c-57ef-440a-b55e-9f5379b233e9")
    MenuVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Opened( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Opened( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Closed( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Closed( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Option( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Option( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Accelerators( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Accelerators( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Descriptions( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Descriptions( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Pulldown( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Pulldown( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Shortcut( 
            /* [in] */ VerbosityShortcut prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Shortcut( 
            /* [retval][out] */ VerbosityShortcut *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MenuVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MenuVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MenuVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MenuVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MenuVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MenuVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MenuVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MenuVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MenuVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MenuVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Opened )( 
            MenuVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Opened )( 
            MenuVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Closed )( 
            MenuVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Closed )( 
            MenuVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Option )( 
            MenuVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Option )( 
            MenuVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Accelerators )( 
            MenuVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Accelerators )( 
            MenuVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Descriptions )( 
            MenuVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Descriptions )( 
            MenuVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Pulldown )( 
            MenuVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pulldown )( 
            MenuVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Shortcut )( 
            MenuVerbosity * This,
            /* [in] */ VerbosityShortcut prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Shortcut )( 
            MenuVerbosity * This,
            /* [retval][out] */ VerbosityShortcut *prop);
        
        END_INTERFACE
    } MenuVerbosityVtbl;

    interface MenuVerbosity
    {
        CONST_VTBL struct MenuVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MenuVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MenuVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MenuVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MenuVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MenuVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MenuVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MenuVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MenuVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define MenuVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define MenuVerbosity_put_Opened(This,prop)	\
    ( (This)->lpVtbl -> put_Opened(This,prop) ) 

#define MenuVerbosity_get_Opened(This,prop)	\
    ( (This)->lpVtbl -> get_Opened(This,prop) ) 

#define MenuVerbosity_put_Closed(This,prop)	\
    ( (This)->lpVtbl -> put_Closed(This,prop) ) 

#define MenuVerbosity_get_Closed(This,prop)	\
    ( (This)->lpVtbl -> get_Closed(This,prop) ) 

#define MenuVerbosity_put_Option(This,prop)	\
    ( (This)->lpVtbl -> put_Option(This,prop) ) 

#define MenuVerbosity_get_Option(This,prop)	\
    ( (This)->lpVtbl -> get_Option(This,prop) ) 

#define MenuVerbosity_put_Accelerators(This,prop)	\
    ( (This)->lpVtbl -> put_Accelerators(This,prop) ) 

#define MenuVerbosity_get_Accelerators(This,prop)	\
    ( (This)->lpVtbl -> get_Accelerators(This,prop) ) 

#define MenuVerbosity_put_Descriptions(This,prop)	\
    ( (This)->lpVtbl -> put_Descriptions(This,prop) ) 

#define MenuVerbosity_get_Descriptions(This,prop)	\
    ( (This)->lpVtbl -> get_Descriptions(This,prop) ) 

#define MenuVerbosity_put_Pulldown(This,prop)	\
    ( (This)->lpVtbl -> put_Pulldown(This,prop) ) 

#define MenuVerbosity_get_Pulldown(This,prop)	\
    ( (This)->lpVtbl -> get_Pulldown(This,prop) ) 

#define MenuVerbosity_put_Shortcut(This,prop)	\
    ( (This)->lpVtbl -> put_Shortcut(This,prop) ) 

#define MenuVerbosity_get_Shortcut(This,prop)	\
    ( (This)->lpVtbl -> get_Shortcut(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MenuVerbosity_INTERFACE_DEFINED__ */


#ifndef __AttributeChangeVerbosity_INTERFACE_DEFINED__
#define __AttributeChangeVerbosity_INTERFACE_DEFINED__

/* interface AttributeChangeVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_AttributeChangeVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b55eff9a-8946-4ed2-8c60-3ec69a854117")
    AttributeChangeVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Font( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Size( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AttributeChangeVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AttributeChangeVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AttributeChangeVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AttributeChangeVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AttributeChangeVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AttributeChangeVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AttributeChangeVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AttributeChangeVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AttributeChangeVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AttributeChangeVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            AttributeChangeVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            AttributeChangeVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Font )( 
            AttributeChangeVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            AttributeChangeVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Size )( 
            AttributeChangeVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            AttributeChangeVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            AttributeChangeVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            AttributeChangeVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } AttributeChangeVerbosityVtbl;

    interface AttributeChangeVerbosity
    {
        CONST_VTBL struct AttributeChangeVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AttributeChangeVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AttributeChangeVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AttributeChangeVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AttributeChangeVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AttributeChangeVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AttributeChangeVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AttributeChangeVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AttributeChangeVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define AttributeChangeVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define AttributeChangeVerbosity_put_Color(This,prop)	\
    ( (This)->lpVtbl -> put_Color(This,prop) ) 

#define AttributeChangeVerbosity_get_Color(This,prop)	\
    ( (This)->lpVtbl -> get_Color(This,prop) ) 

#define AttributeChangeVerbosity_put_Font(This,prop)	\
    ( (This)->lpVtbl -> put_Font(This,prop) ) 

#define AttributeChangeVerbosity_get_Font(This,prop)	\
    ( (This)->lpVtbl -> get_Font(This,prop) ) 

#define AttributeChangeVerbosity_put_Size(This,prop)	\
    ( (This)->lpVtbl -> put_Size(This,prop) ) 

#define AttributeChangeVerbosity_get_Size(This,prop)	\
    ( (This)->lpVtbl -> get_Size(This,prop) ) 

#define AttributeChangeVerbosity_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define AttributeChangeVerbosity_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AttributeChangeVerbosity_INTERFACE_DEFINED__ */


#ifndef __MouseVerbosity_INTERFACE_DEFINED__
#define __MouseVerbosity_INTERFACE_DEFINED__

/* interface MouseVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_MouseVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("827de804-ef0c-40c1-938c-85de3fe974f4")
    MouseVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_In( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_In( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Out( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Out( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ClipChange( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClipChange( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LineChange( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineChange( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowChange( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowChange( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MouseVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MouseVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MouseVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MouseVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MouseVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MouseVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MouseVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MouseVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MouseVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MouseVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_In )( 
            MouseVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_In )( 
            MouseVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Out )( 
            MouseVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Out )( 
            MouseVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClipChange )( 
            MouseVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClipChange )( 
            MouseVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineChange )( 
            MouseVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineChange )( 
            MouseVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowChange )( 
            MouseVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowChange )( 
            MouseVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } MouseVerbosityVtbl;

    interface MouseVerbosity
    {
        CONST_VTBL struct MouseVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MouseVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MouseVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MouseVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MouseVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MouseVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MouseVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MouseVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MouseVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define MouseVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define MouseVerbosity_put_In(This,prop)	\
    ( (This)->lpVtbl -> put_In(This,prop) ) 

#define MouseVerbosity_get_In(This,prop)	\
    ( (This)->lpVtbl -> get_In(This,prop) ) 

#define MouseVerbosity_put_Out(This,prop)	\
    ( (This)->lpVtbl -> put_Out(This,prop) ) 

#define MouseVerbosity_get_Out(This,prop)	\
    ( (This)->lpVtbl -> get_Out(This,prop) ) 

#define MouseVerbosity_put_ClipChange(This,prop)	\
    ( (This)->lpVtbl -> put_ClipChange(This,prop) ) 

#define MouseVerbosity_get_ClipChange(This,prop)	\
    ( (This)->lpVtbl -> get_ClipChange(This,prop) ) 

#define MouseVerbosity_put_LineChange(This,prop)	\
    ( (This)->lpVtbl -> put_LineChange(This,prop) ) 

#define MouseVerbosity_get_LineChange(This,prop)	\
    ( (This)->lpVtbl -> get_LineChange(This,prop) ) 

#define MouseVerbosity_put_WindowChange(This,prop)	\
    ( (This)->lpVtbl -> put_WindowChange(This,prop) ) 

#define MouseVerbosity_get_WindowChange(This,prop)	\
    ( (This)->lpVtbl -> get_WindowChange(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MouseVerbosity_INTERFACE_DEFINED__ */


#ifndef __MiscVerbosity_INTERFACE_DEFINED__
#define __MiscVerbosity_INTERFACE_DEFINED__

/* interface MiscVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_MiscVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4201f55c-a4f1-40e7-878d-9e7b97bf8ebf")
    MiscVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Shortcut( 
            /* [in] */ VerbosityShortcut prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Shortcut( 
            /* [retval][out] */ VerbosityShortcut *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TopBottomIndex( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TopBottomIndex( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CurrentIndex( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentIndex( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SilencePasswordEdits( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SilencePasswordEdits( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ListviewHeaders( 
            /* [in] */ VerbosityListviewHeaders prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ListviewHeaders( 
            /* [retval][out] */ VerbosityListviewHeaders *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MiscVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MiscVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MiscVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MiscVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MiscVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MiscVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MiscVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MiscVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MiscVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MiscVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Shortcut )( 
            MiscVerbosity * This,
            /* [in] */ VerbosityShortcut prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Shortcut )( 
            MiscVerbosity * This,
            /* [retval][out] */ VerbosityShortcut *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TopBottomIndex )( 
            MiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TopBottomIndex )( 
            MiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentIndex )( 
            MiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentIndex )( 
            MiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SilencePasswordEdits )( 
            MiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SilencePasswordEdits )( 
            MiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ListviewHeaders )( 
            MiscVerbosity * This,
            /* [in] */ VerbosityListviewHeaders prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ListviewHeaders )( 
            MiscVerbosity * This,
            /* [retval][out] */ VerbosityListviewHeaders *prop);
        
        END_INTERFACE
    } MiscVerbosityVtbl;

    interface MiscVerbosity
    {
        CONST_VTBL struct MiscVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MiscVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MiscVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MiscVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MiscVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MiscVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MiscVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MiscVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MiscVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define MiscVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define MiscVerbosity_put_Shortcut(This,prop)	\
    ( (This)->lpVtbl -> put_Shortcut(This,prop) ) 

#define MiscVerbosity_get_Shortcut(This,prop)	\
    ( (This)->lpVtbl -> get_Shortcut(This,prop) ) 

#define MiscVerbosity_put_TopBottomIndex(This,prop)	\
    ( (This)->lpVtbl -> put_TopBottomIndex(This,prop) ) 

#define MiscVerbosity_get_TopBottomIndex(This,prop)	\
    ( (This)->lpVtbl -> get_TopBottomIndex(This,prop) ) 

#define MiscVerbosity_put_CurrentIndex(This,prop)	\
    ( (This)->lpVtbl -> put_CurrentIndex(This,prop) ) 

#define MiscVerbosity_get_CurrentIndex(This,prop)	\
    ( (This)->lpVtbl -> get_CurrentIndex(This,prop) ) 

#define MiscVerbosity_put_SilencePasswordEdits(This,prop)	\
    ( (This)->lpVtbl -> put_SilencePasswordEdits(This,prop) ) 

#define MiscVerbosity_get_SilencePasswordEdits(This,prop)	\
    ( (This)->lpVtbl -> get_SilencePasswordEdits(This,prop) ) 

#define MiscVerbosity_put_ListviewHeaders(This,prop)	\
    ( (This)->lpVtbl -> put_ListviewHeaders(This,prop) ) 

#define MiscVerbosity_get_ListviewHeaders(This,prop)	\
    ( (This)->lpVtbl -> get_ListviewHeaders(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MiscVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeVerbosity_INTERFACE_DEFINED__
#define __BrowseModeVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6061a38d-dd88-484b-9d72-372ad1be73a8")
    BrowseModeVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AccessKeys( 
            /* [retval][out] */ BrowseModeAccessKeyVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AcronymsAbbreviations( 
            /* [retval][out] */ BrowseModeAcronymVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Flash( 
            /* [retval][out] */ BrowseModeFlashVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Forms( 
            /* [retval][out] */ BrowseModeFormVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Headings( 
            /* [retval][out] */ BrowseModeHeadingVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Languages( 
            /* [retval][out] */ BrowseModeLanguageVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Links( 
            /* [retval][out] */ BrowseModeLinkVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Lists( 
            /* [retval][out] */ BrowseModeListVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LongDesc( 
            /* [retval][out] */ BrowseModeLongDescVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Miscellaneous( 
            /* [retval][out] */ BrowseModeMiscVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NewPageInformation( 
            /* [retval][out] */ BrowseModeNewPageVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Objects( 
            /* [retval][out] */ BrowseModeObjectVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Paragraphs( 
            /* [retval][out] */ BrowseModeParagraphVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_QuotesBlockQuotes( 
            /* [retval][out] */ BrowseModeQuoteVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Tables( 
            /* [retval][out] */ BrowseModeTableVerbosity **obj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AccessKeys )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeAccessKeyVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AcronymsAbbreviations )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeAcronymVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flash )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeFlashVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Forms )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeFormVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Headings )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeHeadingVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeLanguageVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Links )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeLinkVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lists )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeListVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LongDesc )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeLongDescVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Miscellaneous )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeMiscVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NewPageInformation )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeNewPageVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Objects )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeObjectVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Paragraphs )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeParagraphVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuotesBlockQuotes )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeQuoteVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tables )( 
            BrowseModeVerbosity * This,
            /* [retval][out] */ BrowseModeTableVerbosity **obj);
        
        END_INTERFACE
    } BrowseModeVerbosityVtbl;

    interface BrowseModeVerbosity
    {
        CONST_VTBL struct BrowseModeVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeVerbosity_get_AccessKeys(This,obj)	\
    ( (This)->lpVtbl -> get_AccessKeys(This,obj) ) 

#define BrowseModeVerbosity_get_AcronymsAbbreviations(This,obj)	\
    ( (This)->lpVtbl -> get_AcronymsAbbreviations(This,obj) ) 

#define BrowseModeVerbosity_get_Flash(This,obj)	\
    ( (This)->lpVtbl -> get_Flash(This,obj) ) 

#define BrowseModeVerbosity_get_Forms(This,obj)	\
    ( (This)->lpVtbl -> get_Forms(This,obj) ) 

#define BrowseModeVerbosity_get_Headings(This,obj)	\
    ( (This)->lpVtbl -> get_Headings(This,obj) ) 

#define BrowseModeVerbosity_get_Languages(This,obj)	\
    ( (This)->lpVtbl -> get_Languages(This,obj) ) 

#define BrowseModeVerbosity_get_Links(This,obj)	\
    ( (This)->lpVtbl -> get_Links(This,obj) ) 

#define BrowseModeVerbosity_get_Lists(This,obj)	\
    ( (This)->lpVtbl -> get_Lists(This,obj) ) 

#define BrowseModeVerbosity_get_LongDesc(This,obj)	\
    ( (This)->lpVtbl -> get_LongDesc(This,obj) ) 

#define BrowseModeVerbosity_get_Miscellaneous(This,obj)	\
    ( (This)->lpVtbl -> get_Miscellaneous(This,obj) ) 

#define BrowseModeVerbosity_get_NewPageInformation(This,obj)	\
    ( (This)->lpVtbl -> get_NewPageInformation(This,obj) ) 

#define BrowseModeVerbosity_get_Objects(This,obj)	\
    ( (This)->lpVtbl -> get_Objects(This,obj) ) 

#define BrowseModeVerbosity_get_Paragraphs(This,obj)	\
    ( (This)->lpVtbl -> get_Paragraphs(This,obj) ) 

#define BrowseModeVerbosity_get_QuotesBlockQuotes(This,obj)	\
    ( (This)->lpVtbl -> get_QuotesBlockQuotes(This,obj) ) 

#define BrowseModeVerbosity_get_Tables(This,obj)	\
    ( (This)->lpVtbl -> get_Tables(This,obj) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeVerbosity_INTERFACE_DEFINED__ */


#ifndef __WordVerbosity_INTERFACE_DEFINED__
#define __WordVerbosity_INTERFACE_DEFINED__

/* interface WordVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WordVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("45f09bbf-5811-49be-bf38-f97adbaa7d9e")
    WordVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Columns( 
            /* [retval][out] */ WordColumnVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Fields( 
            /* [retval][out] */ WordFieldVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HeadersFooters( 
            /* [retval][out] */ WordHeaderFooterVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Miscellaneous( 
            /* [retval][out] */ WordMiscVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PicturesObjects( 
            /* [retval][out] */ WordPictureObjectVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_References( 
            /* [retval][out] */ WordReferenceVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Revisions( 
            /* [retval][out] */ WordRevisionVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Sections( 
            /* [retval][out] */ WordSectionVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpellingGrammar( 
            /* [retval][out] */ WordSpellingGrammarVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Tables( 
            /* [retval][out] */ WordTableVerbosity **obj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WordVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WordVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WordVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WordVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WordVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WordVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WordVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WordVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WordVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Columns )( 
            WordVerbosity * This,
            /* [retval][out] */ WordColumnVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Fields )( 
            WordVerbosity * This,
            /* [retval][out] */ WordFieldVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeadersFooters )( 
            WordVerbosity * This,
            /* [retval][out] */ WordHeaderFooterVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Miscellaneous )( 
            WordVerbosity * This,
            /* [retval][out] */ WordMiscVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PicturesObjects )( 
            WordVerbosity * This,
            /* [retval][out] */ WordPictureObjectVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_References )( 
            WordVerbosity * This,
            /* [retval][out] */ WordReferenceVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Revisions )( 
            WordVerbosity * This,
            /* [retval][out] */ WordRevisionVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sections )( 
            WordVerbosity * This,
            /* [retval][out] */ WordSectionVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpellingGrammar )( 
            WordVerbosity * This,
            /* [retval][out] */ WordSpellingGrammarVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tables )( 
            WordVerbosity * This,
            /* [retval][out] */ WordTableVerbosity **obj);
        
        END_INTERFACE
    } WordVerbosityVtbl;

    interface WordVerbosity
    {
        CONST_VTBL struct WordVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WordVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WordVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WordVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WordVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WordVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WordVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WordVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WordVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WordVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WordVerbosity_get_Columns(This,obj)	\
    ( (This)->lpVtbl -> get_Columns(This,obj) ) 

#define WordVerbosity_get_Fields(This,obj)	\
    ( (This)->lpVtbl -> get_Fields(This,obj) ) 

#define WordVerbosity_get_HeadersFooters(This,obj)	\
    ( (This)->lpVtbl -> get_HeadersFooters(This,obj) ) 

#define WordVerbosity_get_Miscellaneous(This,obj)	\
    ( (This)->lpVtbl -> get_Miscellaneous(This,obj) ) 

#define WordVerbosity_get_PicturesObjects(This,obj)	\
    ( (This)->lpVtbl -> get_PicturesObjects(This,obj) ) 

#define WordVerbosity_get_References(This,obj)	\
    ( (This)->lpVtbl -> get_References(This,obj) ) 

#define WordVerbosity_get_Revisions(This,obj)	\
    ( (This)->lpVtbl -> get_Revisions(This,obj) ) 

#define WordVerbosity_get_Sections(This,obj)	\
    ( (This)->lpVtbl -> get_Sections(This,obj) ) 

#define WordVerbosity_get_SpellingGrammar(This,obj)	\
    ( (This)->lpVtbl -> get_SpellingGrammar(This,obj) ) 

#define WordVerbosity_get_Tables(This,obj)	\
    ( (This)->lpVtbl -> get_Tables(This,obj) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WordVerbosity_INTERFACE_DEFINED__ */


#ifndef __ExcelVerbosity_INTERFACE_DEFINED__
#define __ExcelVerbosity_INTERFACE_DEFINED__

/* interface ExcelVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ExcelVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("45968376-3971-459d-ad10-27149c4c3b7d")
    ExcelVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CellInformation( 
            /* [retval][out] */ ExcelCellVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Miscellaneous( 
            /* [retval][out] */ ExcelMiscVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ ExcelSelectionVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Summary( 
            /* [retval][out] */ ExcelSummaryVerbosity **obj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExcelVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ExcelVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ExcelVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ExcelVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ExcelVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ExcelVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ExcelVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ExcelVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ExcelVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ExcelVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CellInformation )( 
            ExcelVerbosity * This,
            /* [retval][out] */ ExcelCellVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Miscellaneous )( 
            ExcelVerbosity * This,
            /* [retval][out] */ ExcelMiscVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            ExcelVerbosity * This,
            /* [retval][out] */ ExcelSelectionVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Summary )( 
            ExcelVerbosity * This,
            /* [retval][out] */ ExcelSummaryVerbosity **obj);
        
        END_INTERFACE
    } ExcelVerbosityVtbl;

    interface ExcelVerbosity
    {
        CONST_VTBL struct ExcelVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ExcelVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ExcelVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ExcelVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ExcelVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ExcelVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ExcelVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ExcelVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ExcelVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ExcelVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ExcelVerbosity_get_CellInformation(This,obj)	\
    ( (This)->lpVtbl -> get_CellInformation(This,obj) ) 

#define ExcelVerbosity_get_Miscellaneous(This,obj)	\
    ( (This)->lpVtbl -> get_Miscellaneous(This,obj) ) 

#define ExcelVerbosity_get_Selection(This,obj)	\
    ( (This)->lpVtbl -> get_Selection(This,obj) ) 

#define ExcelVerbosity_get_Summary(This,obj)	\
    ( (This)->lpVtbl -> get_Summary(This,obj) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ExcelVerbosity_INTERFACE_DEFINED__ */


#ifndef __PowerPointVerbosity_INTERFACE_DEFINED__
#define __PowerPointVerbosity_INTERFACE_DEFINED__

/* interface PowerPointVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_PowerPointVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("41648b9d-a0ea-47c7-b684-f2b83d8b0b70")
    PowerPointVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SlidePane( 
            /* [retval][out] */ PowerPointSlideVerbosity **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Playback( 
            /* [retval][out] */ PowerPointPlaybackVerbosity **obj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PowerPointVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PowerPointVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PowerPointVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PowerPointVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PowerPointVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PowerPointVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PowerPointVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PowerPointVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PowerPointVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PowerPointVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SlidePane )( 
            PowerPointVerbosity * This,
            /* [retval][out] */ PowerPointSlideVerbosity **obj);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Playback )( 
            PowerPointVerbosity * This,
            /* [retval][out] */ PowerPointPlaybackVerbosity **obj);
        
        END_INTERFACE
    } PowerPointVerbosityVtbl;

    interface PowerPointVerbosity
    {
        CONST_VTBL struct PowerPointVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PowerPointVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PowerPointVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PowerPointVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PowerPointVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PowerPointVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PowerPointVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PowerPointVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PowerPointVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define PowerPointVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define PowerPointVerbosity_get_SlidePane(This,obj)	\
    ( (This)->lpVtbl -> get_SlidePane(This,obj) ) 

#define PowerPointVerbosity_get_Playback(This,obj)	\
    ( (This)->lpVtbl -> get_Playback(This,obj) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PowerPointVerbosity_INTERFACE_DEFINED__ */


#ifndef __ScreenPoint_INTERFACE_DEFINED__
#define __ScreenPoint_INTERFACE_DEFINED__

/* interface ScreenPoint */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ScreenPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ec281a02-caa5-4bbf-a7d3-1ebffce77444")
    ScreenPoint : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_X( 
            /* [retval][out] */ long *x) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_X( 
            /* [in] */ long x) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
            /* [retval][out] */ long *y) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Y( 
            /* [in] */ long y) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Accessible( 
            /* [retval][out] */ Accessible **accessible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowPoint( 
            /* [in] */ _Window *window,
            /* [retval][out] */ WindowPoint **point) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClientPoint( 
            /* [in] */ _Window *window,
            /* [retval][out] */ ClientPoint **point) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ScreenPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ScreenPoint * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ScreenPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ScreenPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ScreenPoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ScreenPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ScreenPoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ScreenPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ScreenPoint * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ScreenPoint * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            ScreenPoint * This,
            /* [retval][out] */ long *x);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_X )( 
            ScreenPoint * This,
            /* [in] */ long x);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            ScreenPoint * This,
            /* [retval][out] */ long *y);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Y )( 
            ScreenPoint * This,
            /* [in] */ long y);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Accessible )( 
            ScreenPoint * This,
            /* [retval][out] */ Accessible **accessible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            ScreenPoint * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowPoint )( 
            ScreenPoint * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ WindowPoint **point);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClientPoint )( 
            ScreenPoint * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ ClientPoint **point);
        
        END_INTERFACE
    } ScreenPointVtbl;

    interface ScreenPoint
    {
        CONST_VTBL struct ScreenPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ScreenPoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ScreenPoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ScreenPoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ScreenPoint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ScreenPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ScreenPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ScreenPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ScreenPoint_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ScreenPoint_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ScreenPoint_get_X(This,x)	\
    ( (This)->lpVtbl -> get_X(This,x) ) 

#define ScreenPoint_put_X(This,x)	\
    ( (This)->lpVtbl -> put_X(This,x) ) 

#define ScreenPoint_get_Y(This,y)	\
    ( (This)->lpVtbl -> get_Y(This,y) ) 

#define ScreenPoint_put_Y(This,y)	\
    ( (This)->lpVtbl -> put_Y(This,y) ) 

#define ScreenPoint_get_Accessible(This,accessible)	\
    ( (This)->lpVtbl -> get_Accessible(This,accessible) ) 

#define ScreenPoint_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define ScreenPoint_WindowPoint(This,window,point)	\
    ( (This)->lpVtbl -> WindowPoint(This,window,point) ) 

#define ScreenPoint_ClientPoint(This,window,point)	\
    ( (This)->lpVtbl -> ClientPoint(This,window,point) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ScreenPoint_INTERFACE_DEFINED__ */


#ifndef __WindowPoint_INTERFACE_DEFINED__
#define __WindowPoint_INTERFACE_DEFINED__

/* interface WindowPoint */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WindowPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("71a1dfd7-cd71-49f6-9e46-62bab10dd8b8")
    WindowPoint : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_X( 
            /* [retval][out] */ long *x) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_X( 
            /* [in] */ long x) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
            /* [retval][out] */ long *y) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Y( 
            /* [in] */ long y) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScreenPoint( 
            /* [retval][out] */ ScreenPoint **point) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScreenPoint( 
            /* [in] */ ScreenPoint *point) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClientPoint( 
            /* [retval][out] */ ClientPoint **point) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ClientPoint( 
            /* [in] */ ClientPoint *point) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WindowPoint * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WindowPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WindowPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WindowPoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WindowPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WindowPoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WindowPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WindowPoint * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WindowPoint * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            WindowPoint * This,
            /* [retval][out] */ long *x);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_X )( 
            WindowPoint * This,
            /* [in] */ long x);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            WindowPoint * This,
            /* [retval][out] */ long *y);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Y )( 
            WindowPoint * This,
            /* [in] */ long y);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            WindowPoint * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScreenPoint )( 
            WindowPoint * This,
            /* [retval][out] */ ScreenPoint **point);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScreenPoint )( 
            WindowPoint * This,
            /* [in] */ ScreenPoint *point);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientPoint )( 
            WindowPoint * This,
            /* [retval][out] */ ClientPoint **point);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientPoint )( 
            WindowPoint * This,
            /* [in] */ ClientPoint *point);
        
        END_INTERFACE
    } WindowPointVtbl;

    interface WindowPoint
    {
        CONST_VTBL struct WindowPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WindowPoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WindowPoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WindowPoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WindowPoint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WindowPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WindowPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WindowPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WindowPoint_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WindowPoint_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WindowPoint_get_X(This,x)	\
    ( (This)->lpVtbl -> get_X(This,x) ) 

#define WindowPoint_put_X(This,x)	\
    ( (This)->lpVtbl -> put_X(This,x) ) 

#define WindowPoint_get_Y(This,y)	\
    ( (This)->lpVtbl -> get_Y(This,y) ) 

#define WindowPoint_put_Y(This,y)	\
    ( (This)->lpVtbl -> put_Y(This,y) ) 

#define WindowPoint_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define WindowPoint_get_ScreenPoint(This,point)	\
    ( (This)->lpVtbl -> get_ScreenPoint(This,point) ) 

#define WindowPoint_put_ScreenPoint(This,point)	\
    ( (This)->lpVtbl -> put_ScreenPoint(This,point) ) 

#define WindowPoint_get_ClientPoint(This,point)	\
    ( (This)->lpVtbl -> get_ClientPoint(This,point) ) 

#define WindowPoint_put_ClientPoint(This,point)	\
    ( (This)->lpVtbl -> put_ClientPoint(This,point) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WindowPoint_INTERFACE_DEFINED__ */


#ifndef __ClientPoint_INTERFACE_DEFINED__
#define __ClientPoint_INTERFACE_DEFINED__

/* interface ClientPoint */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ClientPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("38373772-1b30-4c81-90be-12ac169ecc79")
    ClientPoint : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_X( 
            /* [retval][out] */ long *x) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_X( 
            /* [in] */ long x) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
            /* [retval][out] */ long *y) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Y( 
            /* [in] */ long y) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScreenPoint( 
            /* [retval][out] */ ScreenPoint **point) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScreenPoint( 
            /* [in] */ ScreenPoint *point) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowPoint( 
            /* [retval][out] */ WindowPoint **point) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowPoint( 
            /* [in] */ WindowPoint *point) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ClientPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ClientPoint * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ClientPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ClientPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ClientPoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ClientPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ClientPoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ClientPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ClientPoint * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ClientPoint * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            ClientPoint * This,
            /* [retval][out] */ long *x);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_X )( 
            ClientPoint * This,
            /* [in] */ long x);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            ClientPoint * This,
            /* [retval][out] */ long *y);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Y )( 
            ClientPoint * This,
            /* [in] */ long y);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            ClientPoint * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScreenPoint )( 
            ClientPoint * This,
            /* [retval][out] */ ScreenPoint **point);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScreenPoint )( 
            ClientPoint * This,
            /* [in] */ ScreenPoint *point);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowPoint )( 
            ClientPoint * This,
            /* [retval][out] */ WindowPoint **point);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowPoint )( 
            ClientPoint * This,
            /* [in] */ WindowPoint *point);
        
        END_INTERFACE
    } ClientPointVtbl;

    interface ClientPoint
    {
        CONST_VTBL struct ClientPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ClientPoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ClientPoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ClientPoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ClientPoint_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ClientPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ClientPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ClientPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ClientPoint_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ClientPoint_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ClientPoint_get_X(This,x)	\
    ( (This)->lpVtbl -> get_X(This,x) ) 

#define ClientPoint_put_X(This,x)	\
    ( (This)->lpVtbl -> put_X(This,x) ) 

#define ClientPoint_get_Y(This,y)	\
    ( (This)->lpVtbl -> get_Y(This,y) ) 

#define ClientPoint_put_Y(This,y)	\
    ( (This)->lpVtbl -> put_Y(This,y) ) 

#define ClientPoint_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define ClientPoint_get_ScreenPoint(This,point)	\
    ( (This)->lpVtbl -> get_ScreenPoint(This,point) ) 

#define ClientPoint_put_ScreenPoint(This,point)	\
    ( (This)->lpVtbl -> put_ScreenPoint(This,point) ) 

#define ClientPoint_get_WindowPoint(This,point)	\
    ( (This)->lpVtbl -> get_WindowPoint(This,point) ) 

#define ClientPoint_put_WindowPoint(This,point)	\
    ( (This)->lpVtbl -> put_WindowPoint(This,point) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ClientPoint_INTERFACE_DEFINED__ */


#ifndef __ScreenRectangle_INTERFACE_DEFINED__
#define __ScreenRectangle_INTERFACE_DEFINED__

/* interface ScreenRectangle */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ScreenRectangle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d75594b7-6df2-4fb6-a001-28e93eff520c")
    ScreenRectangle : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *left) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ long left) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *top) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ long top) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [retval][out] */ long *right) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Right( 
            /* [in] */ long right) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bottom( 
            /* [retval][out] */ long *bottom) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Bottom( 
            /* [in] */ long bottom) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsEmpty( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowRectangle( 
            /* [in] */ _Window *window,
            /* [retval][out] */ WindowRectangle **rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClientRectangle( 
            /* [in] */ _Window *window,
            /* [retval][out] */ ClientRectangle **rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsPointInRectangle( 
            /* [in] */ ScreenPoint *point,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Intersects( 
            /* [in] */ ScreenRectangle *rect,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Intersection( 
            /* [in] */ ScreenRectangle *Rectangle,
            /* [retval][out] */ ScreenRectangle **Intersection) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Equals( 
            /* [in] */ ScreenRectangle *TargetRectangle,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Contains( 
            /* [in] */ ScreenRectangle *TargetRectangle,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ScreenRectangleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ScreenRectangle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ScreenRectangle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ScreenRectangle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ScreenRectangle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ScreenRectangle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ScreenRectangle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ScreenRectangle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ScreenRectangle * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ScreenRectangle * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            ScreenRectangle * This,
            /* [retval][out] */ long *left);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            ScreenRectangle * This,
            /* [in] */ long left);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            ScreenRectangle * This,
            /* [retval][out] */ long *top);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            ScreenRectangle * This,
            /* [in] */ long top);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            ScreenRectangle * This,
            /* [retval][out] */ long *right);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Right )( 
            ScreenRectangle * This,
            /* [in] */ long right);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bottom )( 
            ScreenRectangle * This,
            /* [retval][out] */ long *bottom);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Bottom )( 
            ScreenRectangle * This,
            /* [in] */ long bottom);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsEmpty )( 
            ScreenRectangle * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowRectangle )( 
            ScreenRectangle * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ WindowRectangle **rectangle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClientRectangle )( 
            ScreenRectangle * This,
            /* [in] */ _Window *window,
            /* [retval][out] */ ClientRectangle **rectangle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsPointInRectangle )( 
            ScreenRectangle * This,
            /* [in] */ ScreenPoint *point,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Intersects )( 
            ScreenRectangle * This,
            /* [in] */ ScreenRectangle *rect,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Intersection )( 
            ScreenRectangle * This,
            /* [in] */ ScreenRectangle *Rectangle,
            /* [retval][out] */ ScreenRectangle **Intersection);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Equals )( 
            ScreenRectangle * This,
            /* [in] */ ScreenRectangle *TargetRectangle,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Contains )( 
            ScreenRectangle * This,
            /* [in] */ ScreenRectangle *TargetRectangle,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } ScreenRectangleVtbl;

    interface ScreenRectangle
    {
        CONST_VTBL struct ScreenRectangleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ScreenRectangle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ScreenRectangle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ScreenRectangle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ScreenRectangle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ScreenRectangle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ScreenRectangle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ScreenRectangle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ScreenRectangle_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ScreenRectangle_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ScreenRectangle_get_Left(This,left)	\
    ( (This)->lpVtbl -> get_Left(This,left) ) 

#define ScreenRectangle_put_Left(This,left)	\
    ( (This)->lpVtbl -> put_Left(This,left) ) 

#define ScreenRectangle_get_Top(This,top)	\
    ( (This)->lpVtbl -> get_Top(This,top) ) 

#define ScreenRectangle_put_Top(This,top)	\
    ( (This)->lpVtbl -> put_Top(This,top) ) 

#define ScreenRectangle_get_Right(This,right)	\
    ( (This)->lpVtbl -> get_Right(This,right) ) 

#define ScreenRectangle_put_Right(This,right)	\
    ( (This)->lpVtbl -> put_Right(This,right) ) 

#define ScreenRectangle_get_Bottom(This,bottom)	\
    ( (This)->lpVtbl -> get_Bottom(This,bottom) ) 

#define ScreenRectangle_put_Bottom(This,bottom)	\
    ( (This)->lpVtbl -> put_Bottom(This,bottom) ) 

#define ScreenRectangle_get_IsEmpty(This,prop)	\
    ( (This)->lpVtbl -> get_IsEmpty(This,prop) ) 

#define ScreenRectangle_WindowRectangle(This,window,rectangle)	\
    ( (This)->lpVtbl -> WindowRectangle(This,window,rectangle) ) 

#define ScreenRectangle_ClientRectangle(This,window,rectangle)	\
    ( (This)->lpVtbl -> ClientRectangle(This,window,rectangle) ) 

#define ScreenRectangle_IsPointInRectangle(This,point,prop)	\
    ( (This)->lpVtbl -> IsPointInRectangle(This,point,prop) ) 

#define ScreenRectangle_Intersects(This,rect,prop)	\
    ( (This)->lpVtbl -> Intersects(This,rect,prop) ) 

#define ScreenRectangle_Intersection(This,Rectangle,Intersection)	\
    ( (This)->lpVtbl -> Intersection(This,Rectangle,Intersection) ) 

#define ScreenRectangle_Equals(This,TargetRectangle,prop)	\
    ( (This)->lpVtbl -> Equals(This,TargetRectangle,prop) ) 

#define ScreenRectangle_Contains(This,TargetRectangle,prop)	\
    ( (This)->lpVtbl -> Contains(This,TargetRectangle,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ScreenRectangle_INTERFACE_DEFINED__ */


#ifndef __WindowRectangle_INTERFACE_DEFINED__
#define __WindowRectangle_INTERFACE_DEFINED__

/* interface WindowRectangle */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WindowRectangle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f0c26627-1e1e-4c1b-8086-a26bff1290f6")
    WindowRectangle : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *left) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ long left) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *top) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ long top) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [retval][out] */ long *right) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Right( 
            /* [in] */ long right) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bottom( 
            /* [retval][out] */ long *bottom) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Bottom( 
            /* [in] */ long bottom) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScreenRectangle( 
            /* [retval][out] */ ScreenRectangle **rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScreenRectangle( 
            /* [in] */ ScreenRectangle *rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClientRectangle( 
            /* [retval][out] */ ClientRectangle **rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ClientRectangle( 
            /* [in] */ ClientRectangle *rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsPointInRectangle( 
            /* [in] */ WindowPoint *point,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowRectangleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WindowRectangle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WindowRectangle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WindowRectangle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WindowRectangle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WindowRectangle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WindowRectangle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WindowRectangle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WindowRectangle * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WindowRectangle * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            WindowRectangle * This,
            /* [retval][out] */ long *left);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            WindowRectangle * This,
            /* [in] */ long left);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            WindowRectangle * This,
            /* [retval][out] */ long *top);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            WindowRectangle * This,
            /* [in] */ long top);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            WindowRectangle * This,
            /* [retval][out] */ long *right);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Right )( 
            WindowRectangle * This,
            /* [in] */ long right);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bottom )( 
            WindowRectangle * This,
            /* [retval][out] */ long *bottom);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Bottom )( 
            WindowRectangle * This,
            /* [in] */ long bottom);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            WindowRectangle * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScreenRectangle )( 
            WindowRectangle * This,
            /* [retval][out] */ ScreenRectangle **rectangle);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScreenRectangle )( 
            WindowRectangle * This,
            /* [in] */ ScreenRectangle *rectangle);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientRectangle )( 
            WindowRectangle * This,
            /* [retval][out] */ ClientRectangle **rectangle);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientRectangle )( 
            WindowRectangle * This,
            /* [in] */ ClientRectangle *rectangle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsPointInRectangle )( 
            WindowRectangle * This,
            /* [in] */ WindowPoint *point,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WindowRectangleVtbl;

    interface WindowRectangle
    {
        CONST_VTBL struct WindowRectangleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WindowRectangle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WindowRectangle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WindowRectangle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WindowRectangle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WindowRectangle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WindowRectangle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WindowRectangle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WindowRectangle_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WindowRectangle_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WindowRectangle_get_Left(This,left)	\
    ( (This)->lpVtbl -> get_Left(This,left) ) 

#define WindowRectangle_put_Left(This,left)	\
    ( (This)->lpVtbl -> put_Left(This,left) ) 

#define WindowRectangle_get_Top(This,top)	\
    ( (This)->lpVtbl -> get_Top(This,top) ) 

#define WindowRectangle_put_Top(This,top)	\
    ( (This)->lpVtbl -> put_Top(This,top) ) 

#define WindowRectangle_get_Right(This,right)	\
    ( (This)->lpVtbl -> get_Right(This,right) ) 

#define WindowRectangle_put_Right(This,right)	\
    ( (This)->lpVtbl -> put_Right(This,right) ) 

#define WindowRectangle_get_Bottom(This,bottom)	\
    ( (This)->lpVtbl -> get_Bottom(This,bottom) ) 

#define WindowRectangle_put_Bottom(This,bottom)	\
    ( (This)->lpVtbl -> put_Bottom(This,bottom) ) 

#define WindowRectangle_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define WindowRectangle_get_ScreenRectangle(This,rectangle)	\
    ( (This)->lpVtbl -> get_ScreenRectangle(This,rectangle) ) 

#define WindowRectangle_put_ScreenRectangle(This,rectangle)	\
    ( (This)->lpVtbl -> put_ScreenRectangle(This,rectangle) ) 

#define WindowRectangle_get_ClientRectangle(This,rectangle)	\
    ( (This)->lpVtbl -> get_ClientRectangle(This,rectangle) ) 

#define WindowRectangle_put_ClientRectangle(This,rectangle)	\
    ( (This)->lpVtbl -> put_ClientRectangle(This,rectangle) ) 

#define WindowRectangle_IsPointInRectangle(This,point,prop)	\
    ( (This)->lpVtbl -> IsPointInRectangle(This,point,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WindowRectangle_INTERFACE_DEFINED__ */


#ifndef __ClientRectangle_INTERFACE_DEFINED__
#define __ClientRectangle_INTERFACE_DEFINED__

/* interface ClientRectangle */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ClientRectangle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bc5bee46-5487-4dde-adfd-be2725307c0b")
    ClientRectangle : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *left) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ long left) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *top) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ long top) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [retval][out] */ long *right) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Right( 
            /* [in] */ long right) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bottom( 
            /* [retval][out] */ long *bottom) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Bottom( 
            /* [in] */ long bottom) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScreenRectangle( 
            /* [retval][out] */ ScreenRectangle **rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScreenRectangle( 
            /* [in] */ ScreenRectangle *rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowRectangle( 
            /* [retval][out] */ WindowRectangle **rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowRectangle( 
            /* [in] */ WindowRectangle *rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsPointInRectangle( 
            /* [in] */ ClientPoint *point,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ClientRectangleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ClientRectangle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ClientRectangle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ClientRectangle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ClientRectangle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ClientRectangle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ClientRectangle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ClientRectangle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ClientRectangle * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ClientRectangle * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            ClientRectangle * This,
            /* [retval][out] */ long *left);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            ClientRectangle * This,
            /* [in] */ long left);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            ClientRectangle * This,
            /* [retval][out] */ long *top);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            ClientRectangle * This,
            /* [in] */ long top);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            ClientRectangle * This,
            /* [retval][out] */ long *right);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Right )( 
            ClientRectangle * This,
            /* [in] */ long right);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bottom )( 
            ClientRectangle * This,
            /* [retval][out] */ long *bottom);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Bottom )( 
            ClientRectangle * This,
            /* [in] */ long bottom);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            ClientRectangle * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScreenRectangle )( 
            ClientRectangle * This,
            /* [retval][out] */ ScreenRectangle **rectangle);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScreenRectangle )( 
            ClientRectangle * This,
            /* [in] */ ScreenRectangle *rectangle);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowRectangle )( 
            ClientRectangle * This,
            /* [retval][out] */ WindowRectangle **rectangle);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowRectangle )( 
            ClientRectangle * This,
            /* [in] */ WindowRectangle *rectangle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsPointInRectangle )( 
            ClientRectangle * This,
            /* [in] */ ClientPoint *point,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } ClientRectangleVtbl;

    interface ClientRectangle
    {
        CONST_VTBL struct ClientRectangleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ClientRectangle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ClientRectangle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ClientRectangle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ClientRectangle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ClientRectangle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ClientRectangle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ClientRectangle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ClientRectangle_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ClientRectangle_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ClientRectangle_get_Left(This,left)	\
    ( (This)->lpVtbl -> get_Left(This,left) ) 

#define ClientRectangle_put_Left(This,left)	\
    ( (This)->lpVtbl -> put_Left(This,left) ) 

#define ClientRectangle_get_Top(This,top)	\
    ( (This)->lpVtbl -> get_Top(This,top) ) 

#define ClientRectangle_put_Top(This,top)	\
    ( (This)->lpVtbl -> put_Top(This,top) ) 

#define ClientRectangle_get_Right(This,right)	\
    ( (This)->lpVtbl -> get_Right(This,right) ) 

#define ClientRectangle_put_Right(This,right)	\
    ( (This)->lpVtbl -> put_Right(This,right) ) 

#define ClientRectangle_get_Bottom(This,bottom)	\
    ( (This)->lpVtbl -> get_Bottom(This,bottom) ) 

#define ClientRectangle_put_Bottom(This,bottom)	\
    ( (This)->lpVtbl -> put_Bottom(This,bottom) ) 

#define ClientRectangle_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define ClientRectangle_get_ScreenRectangle(This,rectangle)	\
    ( (This)->lpVtbl -> get_ScreenRectangle(This,rectangle) ) 

#define ClientRectangle_put_ScreenRectangle(This,rectangle)	\
    ( (This)->lpVtbl -> put_ScreenRectangle(This,rectangle) ) 

#define ClientRectangle_get_WindowRectangle(This,rectangle)	\
    ( (This)->lpVtbl -> get_WindowRectangle(This,rectangle) ) 

#define ClientRectangle_put_WindowRectangle(This,rectangle)	\
    ( (This)->lpVtbl -> put_WindowRectangle(This,rectangle) ) 

#define ClientRectangle_IsPointInRectangle(This,point,prop)	\
    ( (This)->lpVtbl -> IsPointInRectangle(This,point,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ClientRectangle_INTERFACE_DEFINED__ */


#ifndef __Color_INTERFACE_DEFINED__
#define __Color_INTERFACE_DEFINED__

/* interface Color */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Color;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e8b9cfba-3e39-4ea7-bf3e-87f52bd8f2a3")
    Color : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Red( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Red( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Green( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Green( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Blue( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Blue( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Color * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Color * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Color * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Color * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Color * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Color * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Color * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Color * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Color * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            Color * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Red )( 
            Color * This,
            /* [in] */ long prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            Color * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Green )( 
            Color * This,
            /* [in] */ long prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            Color * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Blue )( 
            Color * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } ColorVtbl;

    interface Color
    {
        CONST_VTBL struct ColorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Color_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Color_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Color_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Color_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Color_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Color_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Color_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Color_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Color_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Color_get_Red(This,prop)	\
    ( (This)->lpVtbl -> get_Red(This,prop) ) 

#define Color_put_Red(This,prop)	\
    ( (This)->lpVtbl -> put_Red(This,prop) ) 

#define Color_get_Green(This,prop)	\
    ( (This)->lpVtbl -> get_Green(This,prop) ) 

#define Color_put_Green(This,prop)	\
    ( (This)->lpVtbl -> put_Green(This,prop) ) 

#define Color_get_Blue(This,prop)	\
    ( (This)->lpVtbl -> get_Blue(This,prop) ) 

#define Color_put_Blue(This,prop)	\
    ( (This)->lpVtbl -> put_Blue(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Color_INTERFACE_DEFINED__ */


#ifndef __WordColumnVerbosity_INTERFACE_DEFINED__
#define __WordColumnVerbosity_INTERFACE_DEFINED__

/* interface WordColumnVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WordColumnVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e7f432c2-6a0d-43bc-b106-e5414c23ff24")
    WordColumnVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Identify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Identify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordColumnVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WordColumnVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WordColumnVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WordColumnVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WordColumnVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WordColumnVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WordColumnVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WordColumnVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WordColumnVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WordColumnVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Identify )( 
            WordColumnVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Identify )( 
            WordColumnVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyReadToEnd )( 
            WordColumnVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyReadToEnd )( 
            WordColumnVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WordColumnVerbosityVtbl;

    interface WordColumnVerbosity
    {
        CONST_VTBL struct WordColumnVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WordColumnVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WordColumnVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WordColumnVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WordColumnVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WordColumnVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WordColumnVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WordColumnVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WordColumnVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WordColumnVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WordColumnVerbosity_put_Identify(This,prop)	\
    ( (This)->lpVtbl -> put_Identify(This,prop) ) 

#define WordColumnVerbosity_get_Identify(This,prop)	\
    ( (This)->lpVtbl -> get_Identify(This,prop) ) 

#define WordColumnVerbosity_put_IdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyReadToEnd(This,prop) ) 

#define WordColumnVerbosity_get_IdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WordColumnVerbosity_INTERFACE_DEFINED__ */


#ifndef __WordFieldVerbosity_INTERFACE_DEFINED__
#define __WordFieldVerbosity_INTERFACE_DEFINED__

/* interface WordFieldVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WordFieldVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2113d7ce-5269-4cbc-9583-c1844036e1b6")
    WordFieldVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Identify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Identify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Count( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CountReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CountReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordFieldVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WordFieldVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WordFieldVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WordFieldVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WordFieldVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WordFieldVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WordFieldVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WordFieldVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WordFieldVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WordFieldVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Identify )( 
            WordFieldVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Identify )( 
            WordFieldVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Count )( 
            WordFieldVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            WordFieldVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CountReadToEnd )( 
            WordFieldVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountReadToEnd )( 
            WordFieldVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WordFieldVerbosityVtbl;

    interface WordFieldVerbosity
    {
        CONST_VTBL struct WordFieldVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WordFieldVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WordFieldVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WordFieldVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WordFieldVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WordFieldVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WordFieldVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WordFieldVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WordFieldVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WordFieldVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WordFieldVerbosity_put_Identify(This,prop)	\
    ( (This)->lpVtbl -> put_Identify(This,prop) ) 

#define WordFieldVerbosity_get_Identify(This,prop)	\
    ( (This)->lpVtbl -> get_Identify(This,prop) ) 

#define WordFieldVerbosity_put_Count(This,prop)	\
    ( (This)->lpVtbl -> put_Count(This,prop) ) 

#define WordFieldVerbosity_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define WordFieldVerbosity_put_CountReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_CountReadToEnd(This,prop) ) 

#define WordFieldVerbosity_get_CountReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_CountReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WordFieldVerbosity_INTERFACE_DEFINED__ */


#ifndef __WordHeaderFooterVerbosity_INTERFACE_DEFINED__
#define __WordHeaderFooterVerbosity_INTERFACE_DEFINED__

/* interface WordHeaderFooterVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WordHeaderFooterVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("af1222c1-c085-4e87-b836-4959fbeb7228")
    WordHeaderFooterVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HeaderIdentify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HeaderIdentify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FooterIdentify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FooterIdentify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HeaderIdentifyReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HeaderIdentifyReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FooterIdentifyReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FooterIdentifyReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PageIdentify( 
            /* [in] */ WordPageVerbosity prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageIdentify( 
            /* [retval][out] */ WordPageVerbosity *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PageIdentifyReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PageIdentifyReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordHeaderFooterVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WordHeaderFooterVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WordHeaderFooterVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WordHeaderFooterVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WordHeaderFooterVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WordHeaderFooterVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WordHeaderFooterVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WordHeaderFooterVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WordHeaderFooterVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WordHeaderFooterVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeaderIdentify )( 
            WordHeaderFooterVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeaderIdentify )( 
            WordHeaderFooterVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FooterIdentify )( 
            WordHeaderFooterVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FooterIdentify )( 
            WordHeaderFooterVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeaderIdentifyReadToEnd )( 
            WordHeaderFooterVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeaderIdentifyReadToEnd )( 
            WordHeaderFooterVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FooterIdentifyReadToEnd )( 
            WordHeaderFooterVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FooterIdentifyReadToEnd )( 
            WordHeaderFooterVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PageIdentify )( 
            WordHeaderFooterVerbosity * This,
            /* [in] */ WordPageVerbosity prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageIdentify )( 
            WordHeaderFooterVerbosity * This,
            /* [retval][out] */ WordPageVerbosity *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PageIdentifyReadToEnd )( 
            WordHeaderFooterVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PageIdentifyReadToEnd )( 
            WordHeaderFooterVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WordHeaderFooterVerbosityVtbl;

    interface WordHeaderFooterVerbosity
    {
        CONST_VTBL struct WordHeaderFooterVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WordHeaderFooterVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WordHeaderFooterVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WordHeaderFooterVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WordHeaderFooterVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WordHeaderFooterVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WordHeaderFooterVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WordHeaderFooterVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WordHeaderFooterVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WordHeaderFooterVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WordHeaderFooterVerbosity_put_HeaderIdentify(This,prop)	\
    ( (This)->lpVtbl -> put_HeaderIdentify(This,prop) ) 

#define WordHeaderFooterVerbosity_get_HeaderIdentify(This,prop)	\
    ( (This)->lpVtbl -> get_HeaderIdentify(This,prop) ) 

#define WordHeaderFooterVerbosity_put_FooterIdentify(This,prop)	\
    ( (This)->lpVtbl -> put_FooterIdentify(This,prop) ) 

#define WordHeaderFooterVerbosity_get_FooterIdentify(This,prop)	\
    ( (This)->lpVtbl -> get_FooterIdentify(This,prop) ) 

#define WordHeaderFooterVerbosity_put_HeaderIdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_HeaderIdentifyReadToEnd(This,prop) ) 

#define WordHeaderFooterVerbosity_get_HeaderIdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_HeaderIdentifyReadToEnd(This,prop) ) 

#define WordHeaderFooterVerbosity_put_FooterIdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_FooterIdentifyReadToEnd(This,prop) ) 

#define WordHeaderFooterVerbosity_get_FooterIdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_FooterIdentifyReadToEnd(This,prop) ) 

#define WordHeaderFooterVerbosity_put_PageIdentify(This,prop)	\
    ( (This)->lpVtbl -> put_PageIdentify(This,prop) ) 

#define WordHeaderFooterVerbosity_get_PageIdentify(This,prop)	\
    ( (This)->lpVtbl -> get_PageIdentify(This,prop) ) 

#define WordHeaderFooterVerbosity_put_PageIdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_PageIdentifyReadToEnd(This,prop) ) 

#define WordHeaderFooterVerbosity_get_PageIdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_PageIdentifyReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WordHeaderFooterVerbosity_INTERFACE_DEFINED__ */


#ifndef __WordMiscVerbosity_INTERFACE_DEFINED__
#define __WordMiscVerbosity_INTERFACE_DEFINED__

/* interface WordMiscVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WordMiscVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("85e8a2fb-7255-46fd-84ef-5cafbf459aef")
    WordMiscVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoCorrectIdentify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoCorrectIdentify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BorderIdentify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BorderIdentify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SmartTagIdentify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SmartTagIdentify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StyleIdentify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StyleIdentify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoDockToolbars( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoDockToolbars( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordMiscVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WordMiscVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WordMiscVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WordMiscVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WordMiscVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WordMiscVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WordMiscVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WordMiscVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WordMiscVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WordMiscVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoCorrectIdentify )( 
            WordMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoCorrectIdentify )( 
            WordMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderIdentify )( 
            WordMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BorderIdentify )( 
            WordMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SmartTagIdentify )( 
            WordMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SmartTagIdentify )( 
            WordMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StyleIdentify )( 
            WordMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StyleIdentify )( 
            WordMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoDockToolbars )( 
            WordMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoDockToolbars )( 
            WordMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WordMiscVerbosityVtbl;

    interface WordMiscVerbosity
    {
        CONST_VTBL struct WordMiscVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WordMiscVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WordMiscVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WordMiscVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WordMiscVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WordMiscVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WordMiscVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WordMiscVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WordMiscVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WordMiscVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WordMiscVerbosity_put_AutoCorrectIdentify(This,prop)	\
    ( (This)->lpVtbl -> put_AutoCorrectIdentify(This,prop) ) 

#define WordMiscVerbosity_get_AutoCorrectIdentify(This,prop)	\
    ( (This)->lpVtbl -> get_AutoCorrectIdentify(This,prop) ) 

#define WordMiscVerbosity_put_BorderIdentify(This,prop)	\
    ( (This)->lpVtbl -> put_BorderIdentify(This,prop) ) 

#define WordMiscVerbosity_get_BorderIdentify(This,prop)	\
    ( (This)->lpVtbl -> get_BorderIdentify(This,prop) ) 

#define WordMiscVerbosity_put_SmartTagIdentify(This,prop)	\
    ( (This)->lpVtbl -> put_SmartTagIdentify(This,prop) ) 

#define WordMiscVerbosity_get_SmartTagIdentify(This,prop)	\
    ( (This)->lpVtbl -> get_SmartTagIdentify(This,prop) ) 

#define WordMiscVerbosity_put_StyleIdentify(This,prop)	\
    ( (This)->lpVtbl -> put_StyleIdentify(This,prop) ) 

#define WordMiscVerbosity_get_StyleIdentify(This,prop)	\
    ( (This)->lpVtbl -> get_StyleIdentify(This,prop) ) 

#define WordMiscVerbosity_put_AutoDockToolbars(This,prop)	\
    ( (This)->lpVtbl -> put_AutoDockToolbars(This,prop) ) 

#define WordMiscVerbosity_get_AutoDockToolbars(This,prop)	\
    ( (This)->lpVtbl -> get_AutoDockToolbars(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WordMiscVerbosity_INTERFACE_DEFINED__ */


#ifndef __WordPictureObjectVerbosity_INTERFACE_DEFINED__
#define __WordPictureObjectVerbosity_INTERFACE_DEFINED__

/* interface WordPictureObjectVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WordPictureObjectVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c1da88d1-913a-44eb-9bf8-19057cc47d12")
    WordPictureObjectVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Identify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Identify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordPictureObjectVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WordPictureObjectVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WordPictureObjectVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WordPictureObjectVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WordPictureObjectVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WordPictureObjectVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WordPictureObjectVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WordPictureObjectVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WordPictureObjectVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WordPictureObjectVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Identify )( 
            WordPictureObjectVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Identify )( 
            WordPictureObjectVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyReadToEnd )( 
            WordPictureObjectVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyReadToEnd )( 
            WordPictureObjectVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WordPictureObjectVerbosityVtbl;

    interface WordPictureObjectVerbosity
    {
        CONST_VTBL struct WordPictureObjectVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WordPictureObjectVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WordPictureObjectVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WordPictureObjectVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WordPictureObjectVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WordPictureObjectVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WordPictureObjectVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WordPictureObjectVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WordPictureObjectVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WordPictureObjectVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WordPictureObjectVerbosity_put_Identify(This,prop)	\
    ( (This)->lpVtbl -> put_Identify(This,prop) ) 

#define WordPictureObjectVerbosity_get_Identify(This,prop)	\
    ( (This)->lpVtbl -> get_Identify(This,prop) ) 

#define WordPictureObjectVerbosity_put_IdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyReadToEnd(This,prop) ) 

#define WordPictureObjectVerbosity_get_IdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WordPictureObjectVerbosity_INTERFACE_DEFINED__ */


#ifndef __WordReferenceVerbosity_INTERFACE_DEFINED__
#define __WordReferenceVerbosity_INTERFACE_DEFINED__

/* interface WordReferenceVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WordReferenceVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("037dfded-c37e-44a0-aafe-c4a1844654e6")
    WordReferenceVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Identify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Identify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Count( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CountReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CountReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordReferenceVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WordReferenceVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WordReferenceVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WordReferenceVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WordReferenceVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WordReferenceVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WordReferenceVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WordReferenceVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WordReferenceVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WordReferenceVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Identify )( 
            WordReferenceVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Identify )( 
            WordReferenceVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Count )( 
            WordReferenceVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            WordReferenceVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CountReadToEnd )( 
            WordReferenceVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountReadToEnd )( 
            WordReferenceVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WordReferenceVerbosityVtbl;

    interface WordReferenceVerbosity
    {
        CONST_VTBL struct WordReferenceVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WordReferenceVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WordReferenceVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WordReferenceVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WordReferenceVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WordReferenceVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WordReferenceVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WordReferenceVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WordReferenceVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WordReferenceVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WordReferenceVerbosity_put_Identify(This,prop)	\
    ( (This)->lpVtbl -> put_Identify(This,prop) ) 

#define WordReferenceVerbosity_get_Identify(This,prop)	\
    ( (This)->lpVtbl -> get_Identify(This,prop) ) 

#define WordReferenceVerbosity_put_Count(This,prop)	\
    ( (This)->lpVtbl -> put_Count(This,prop) ) 

#define WordReferenceVerbosity_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define WordReferenceVerbosity_put_CountReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_CountReadToEnd(This,prop) ) 

#define WordReferenceVerbosity_get_CountReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_CountReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WordReferenceVerbosity_INTERFACE_DEFINED__ */


#ifndef __WordRevisionVerbosity_INTERFACE_DEFINED__
#define __WordRevisionVerbosity_INTERFACE_DEFINED__

/* interface WordRevisionVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WordRevisionVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cea173dd-411a-4789-ab4b-938f9d924b7b")
    WordRevisionVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Identify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Identify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyAuthor( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyAuthor( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyDate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyDate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Count( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CountReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CountReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordRevisionVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WordRevisionVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WordRevisionVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WordRevisionVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WordRevisionVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WordRevisionVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WordRevisionVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WordRevisionVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WordRevisionVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WordRevisionVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Identify )( 
            WordRevisionVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Identify )( 
            WordRevisionVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyAuthor )( 
            WordRevisionVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyAuthor )( 
            WordRevisionVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyDate )( 
            WordRevisionVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyDate )( 
            WordRevisionVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Count )( 
            WordRevisionVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            WordRevisionVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CountReadToEnd )( 
            WordRevisionVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountReadToEnd )( 
            WordRevisionVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WordRevisionVerbosityVtbl;

    interface WordRevisionVerbosity
    {
        CONST_VTBL struct WordRevisionVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WordRevisionVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WordRevisionVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WordRevisionVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WordRevisionVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WordRevisionVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WordRevisionVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WordRevisionVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WordRevisionVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WordRevisionVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WordRevisionVerbosity_put_Identify(This,prop)	\
    ( (This)->lpVtbl -> put_Identify(This,prop) ) 

#define WordRevisionVerbosity_get_Identify(This,prop)	\
    ( (This)->lpVtbl -> get_Identify(This,prop) ) 

#define WordRevisionVerbosity_put_IdentifyAuthor(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyAuthor(This,prop) ) 

#define WordRevisionVerbosity_get_IdentifyAuthor(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyAuthor(This,prop) ) 

#define WordRevisionVerbosity_put_IdentifyDate(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyDate(This,prop) ) 

#define WordRevisionVerbosity_get_IdentifyDate(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyDate(This,prop) ) 

#define WordRevisionVerbosity_put_Count(This,prop)	\
    ( (This)->lpVtbl -> put_Count(This,prop) ) 

#define WordRevisionVerbosity_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define WordRevisionVerbosity_put_CountReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_CountReadToEnd(This,prop) ) 

#define WordRevisionVerbosity_get_CountReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_CountReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WordRevisionVerbosity_INTERFACE_DEFINED__ */


#ifndef __WordSectionVerbosity_INTERFACE_DEFINED__
#define __WordSectionVerbosity_INTERFACE_DEFINED__

/* interface WordSectionVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WordSectionVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("766c76fb-6aa8-4c0a-b9b1-2f946b4cbc40")
    WordSectionVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Identify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Identify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordSectionVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WordSectionVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WordSectionVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WordSectionVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WordSectionVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WordSectionVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WordSectionVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WordSectionVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WordSectionVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WordSectionVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Identify )( 
            WordSectionVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Identify )( 
            WordSectionVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyReadToEnd )( 
            WordSectionVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyReadToEnd )( 
            WordSectionVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WordSectionVerbosityVtbl;

    interface WordSectionVerbosity
    {
        CONST_VTBL struct WordSectionVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WordSectionVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WordSectionVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WordSectionVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WordSectionVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WordSectionVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WordSectionVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WordSectionVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WordSectionVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WordSectionVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WordSectionVerbosity_put_Identify(This,prop)	\
    ( (This)->lpVtbl -> put_Identify(This,prop) ) 

#define WordSectionVerbosity_get_Identify(This,prop)	\
    ( (This)->lpVtbl -> get_Identify(This,prop) ) 

#define WordSectionVerbosity_put_IdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyReadToEnd(This,prop) ) 

#define WordSectionVerbosity_get_IdentifyReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WordSectionVerbosity_INTERFACE_DEFINED__ */


#ifndef __WordSpellingGrammarVerbosity_INTERFACE_DEFINED__
#define __WordSpellingGrammarVerbosity_INTERFACE_DEFINED__

/* interface WordSpellingGrammarVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WordSpellingGrammarVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("61682996-acde-4715-abb5-f8dbfd629b40")
    WordSpellingGrammarVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpellingIdentify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpellingIdentify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_GrammarIdentify( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_GrammarIdentify( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_GrammarCount( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_GrammarCount( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_GrammarCountReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_GrammarCountReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpellingCount( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpellingCount( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpellingCountReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpellingCountReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordSpellingGrammarVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WordSpellingGrammarVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WordSpellingGrammarVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WordSpellingGrammarVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WordSpellingGrammarVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WordSpellingGrammarVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WordSpellingGrammarVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WordSpellingGrammarVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WordSpellingGrammarVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WordSpellingGrammarVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpellingIdentify )( 
            WordSpellingGrammarVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpellingIdentify )( 
            WordSpellingGrammarVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GrammarIdentify )( 
            WordSpellingGrammarVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GrammarIdentify )( 
            WordSpellingGrammarVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GrammarCount )( 
            WordSpellingGrammarVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GrammarCount )( 
            WordSpellingGrammarVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GrammarCountReadToEnd )( 
            WordSpellingGrammarVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GrammarCountReadToEnd )( 
            WordSpellingGrammarVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpellingCount )( 
            WordSpellingGrammarVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpellingCount )( 
            WordSpellingGrammarVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpellingCountReadToEnd )( 
            WordSpellingGrammarVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpellingCountReadToEnd )( 
            WordSpellingGrammarVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WordSpellingGrammarVerbosityVtbl;

    interface WordSpellingGrammarVerbosity
    {
        CONST_VTBL struct WordSpellingGrammarVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WordSpellingGrammarVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WordSpellingGrammarVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WordSpellingGrammarVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WordSpellingGrammarVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WordSpellingGrammarVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WordSpellingGrammarVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WordSpellingGrammarVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WordSpellingGrammarVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WordSpellingGrammarVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WordSpellingGrammarVerbosity_put_SpellingIdentify(This,prop)	\
    ( (This)->lpVtbl -> put_SpellingIdentify(This,prop) ) 

#define WordSpellingGrammarVerbosity_get_SpellingIdentify(This,prop)	\
    ( (This)->lpVtbl -> get_SpellingIdentify(This,prop) ) 

#define WordSpellingGrammarVerbosity_put_GrammarIdentify(This,prop)	\
    ( (This)->lpVtbl -> put_GrammarIdentify(This,prop) ) 

#define WordSpellingGrammarVerbosity_get_GrammarIdentify(This,prop)	\
    ( (This)->lpVtbl -> get_GrammarIdentify(This,prop) ) 

#define WordSpellingGrammarVerbosity_put_GrammarCount(This,prop)	\
    ( (This)->lpVtbl -> put_GrammarCount(This,prop) ) 

#define WordSpellingGrammarVerbosity_get_GrammarCount(This,prop)	\
    ( (This)->lpVtbl -> get_GrammarCount(This,prop) ) 

#define WordSpellingGrammarVerbosity_put_GrammarCountReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_GrammarCountReadToEnd(This,prop) ) 

#define WordSpellingGrammarVerbosity_get_GrammarCountReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_GrammarCountReadToEnd(This,prop) ) 

#define WordSpellingGrammarVerbosity_put_SpellingCount(This,prop)	\
    ( (This)->lpVtbl -> put_SpellingCount(This,prop) ) 

#define WordSpellingGrammarVerbosity_get_SpellingCount(This,prop)	\
    ( (This)->lpVtbl -> get_SpellingCount(This,prop) ) 

#define WordSpellingGrammarVerbosity_put_SpellingCountReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_SpellingCountReadToEnd(This,prop) ) 

#define WordSpellingGrammarVerbosity_get_SpellingCountReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_SpellingCountReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WordSpellingGrammarVerbosity_INTERFACE_DEFINED__ */


#ifndef __WordTableVerbosity_INTERFACE_DEFINED__
#define __WordTableVerbosity_INTERFACE_DEFINED__

/* interface WordTableVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WordTableVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("918c0986-a398-4679-8360-768c68e47733")
    WordTableVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyTable( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyTable( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyTableReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyTableReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyCell( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyCell( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordTableVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WordTableVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WordTableVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WordTableVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WordTableVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WordTableVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WordTableVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WordTableVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WordTableVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WordTableVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyTable )( 
            WordTableVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyTable )( 
            WordTableVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyTableReadToEnd )( 
            WordTableVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyTableReadToEnd )( 
            WordTableVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyCell )( 
            WordTableVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyCell )( 
            WordTableVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WordTableVerbosityVtbl;

    interface WordTableVerbosity
    {
        CONST_VTBL struct WordTableVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WordTableVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WordTableVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WordTableVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WordTableVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WordTableVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WordTableVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WordTableVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WordTableVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WordTableVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WordTableVerbosity_put_IdentifyTable(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyTable(This,prop) ) 

#define WordTableVerbosity_get_IdentifyTable(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyTable(This,prop) ) 

#define WordTableVerbosity_put_IdentifyTableReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyTableReadToEnd(This,prop) ) 

#define WordTableVerbosity_get_IdentifyTableReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyTableReadToEnd(This,prop) ) 

#define WordTableVerbosity_put_IdentifyCell(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyCell(This,prop) ) 

#define WordTableVerbosity_get_IdentifyCell(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyCell(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WordTableVerbosity_INTERFACE_DEFINED__ */


#ifndef __PowerPointSlideVerbosity_INTERFACE_DEFINED__
#define __PowerPointSlideVerbosity_INTERFACE_DEFINED__

/* interface PowerPointSlideVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_PowerPointSlideVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("11a3c83e-2a8e-43b1-a68a-32a6acf79a9f")
    PowerPointSlideVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateSize( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateSize( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateOverlap( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateOverlap( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicatePlacement( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicatePlacement( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateTextOverflow( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateTextOverflow( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateObjectOverflow( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateObjectOverflow( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MeasurementUnits( 
            /* [in] */ VerbosityMeasurementUnits prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MeasurementUnits( 
            /* [retval][out] */ VerbosityMeasurementUnits *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PowerPointSlideVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PowerPointSlideVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PowerPointSlideVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PowerPointSlideVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PowerPointSlideVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PowerPointSlideVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PowerPointSlideVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PowerPointSlideVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PowerPointSlideVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PowerPointSlideVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateSize )( 
            PowerPointSlideVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateSize )( 
            PowerPointSlideVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateOverlap )( 
            PowerPointSlideVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateOverlap )( 
            PowerPointSlideVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicatePlacement )( 
            PowerPointSlideVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicatePlacement )( 
            PowerPointSlideVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateTextOverflow )( 
            PowerPointSlideVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateTextOverflow )( 
            PowerPointSlideVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateObjectOverflow )( 
            PowerPointSlideVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateObjectOverflow )( 
            PowerPointSlideVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MeasurementUnits )( 
            PowerPointSlideVerbosity * This,
            /* [in] */ VerbosityMeasurementUnits prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeasurementUnits )( 
            PowerPointSlideVerbosity * This,
            /* [retval][out] */ VerbosityMeasurementUnits *prop);
        
        END_INTERFACE
    } PowerPointSlideVerbosityVtbl;

    interface PowerPointSlideVerbosity
    {
        CONST_VTBL struct PowerPointSlideVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PowerPointSlideVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PowerPointSlideVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PowerPointSlideVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PowerPointSlideVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PowerPointSlideVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PowerPointSlideVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PowerPointSlideVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PowerPointSlideVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define PowerPointSlideVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define PowerPointSlideVerbosity_put_IndicateSize(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateSize(This,prop) ) 

#define PowerPointSlideVerbosity_get_IndicateSize(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateSize(This,prop) ) 

#define PowerPointSlideVerbosity_put_IndicateOverlap(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateOverlap(This,prop) ) 

#define PowerPointSlideVerbosity_get_IndicateOverlap(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateOverlap(This,prop) ) 

#define PowerPointSlideVerbosity_put_IndicatePlacement(This,prop)	\
    ( (This)->lpVtbl -> put_IndicatePlacement(This,prop) ) 

#define PowerPointSlideVerbosity_get_IndicatePlacement(This,prop)	\
    ( (This)->lpVtbl -> get_IndicatePlacement(This,prop) ) 

#define PowerPointSlideVerbosity_put_IndicateTextOverflow(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateTextOverflow(This,prop) ) 

#define PowerPointSlideVerbosity_get_IndicateTextOverflow(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateTextOverflow(This,prop) ) 

#define PowerPointSlideVerbosity_put_IndicateObjectOverflow(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateObjectOverflow(This,prop) ) 

#define PowerPointSlideVerbosity_get_IndicateObjectOverflow(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateObjectOverflow(This,prop) ) 

#define PowerPointSlideVerbosity_put_MeasurementUnits(This,prop)	\
    ( (This)->lpVtbl -> put_MeasurementUnits(This,prop) ) 

#define PowerPointSlideVerbosity_get_MeasurementUnits(This,prop)	\
    ( (This)->lpVtbl -> get_MeasurementUnits(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PowerPointSlideVerbosity_INTERFACE_DEFINED__ */


#ifndef __PowerPointPlaybackVerbosity_INTERFACE_DEFINED__
#define __PowerPointPlaybackVerbosity_INTERFACE_DEFINED__

/* interface PowerPointPlaybackVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_PowerPointPlaybackVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("60e556dc-75df-4e41-bad5-825c9ea1b6ea")
    PowerPointPlaybackVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ResetPosition( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ResetPosition( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeNotes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeNotes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateEffects( 
            /* [in] */ PowerPointEffectsVerbosity prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateEffects( 
            /* [retval][out] */ PowerPointEffectsVerbosity *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PowerPointPlaybackVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PowerPointPlaybackVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PowerPointPlaybackVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PowerPointPlaybackVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PowerPointPlaybackVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PowerPointPlaybackVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PowerPointPlaybackVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PowerPointPlaybackVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PowerPointPlaybackVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PowerPointPlaybackVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ResetPosition )( 
            PowerPointPlaybackVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ResetPosition )( 
            PowerPointPlaybackVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeNotes )( 
            PowerPointPlaybackVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeNotes )( 
            PowerPointPlaybackVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateEffects )( 
            PowerPointPlaybackVerbosity * This,
            /* [in] */ PowerPointEffectsVerbosity prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateEffects )( 
            PowerPointPlaybackVerbosity * This,
            /* [retval][out] */ PowerPointEffectsVerbosity *prop);
        
        END_INTERFACE
    } PowerPointPlaybackVerbosityVtbl;

    interface PowerPointPlaybackVerbosity
    {
        CONST_VTBL struct PowerPointPlaybackVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PowerPointPlaybackVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PowerPointPlaybackVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PowerPointPlaybackVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PowerPointPlaybackVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PowerPointPlaybackVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PowerPointPlaybackVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PowerPointPlaybackVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PowerPointPlaybackVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define PowerPointPlaybackVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define PowerPointPlaybackVerbosity_put_ResetPosition(This,prop)	\
    ( (This)->lpVtbl -> put_ResetPosition(This,prop) ) 

#define PowerPointPlaybackVerbosity_get_ResetPosition(This,prop)	\
    ( (This)->lpVtbl -> get_ResetPosition(This,prop) ) 

#define PowerPointPlaybackVerbosity_put_IncludeNotes(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeNotes(This,prop) ) 

#define PowerPointPlaybackVerbosity_get_IncludeNotes(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeNotes(This,prop) ) 

#define PowerPointPlaybackVerbosity_put_IndicateEffects(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateEffects(This,prop) ) 

#define PowerPointPlaybackVerbosity_get_IndicateEffects(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateEffects(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PowerPointPlaybackVerbosity_INTERFACE_DEFINED__ */


#ifndef __ExcelSummaryVerbosity_INTERFACE_DEFINED__
#define __ExcelSummaryVerbosity_INTERFACE_DEFINED__

/* interface ExcelSummaryVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ExcelSummaryVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("384a3d6d-5b6b-4229-8736-97890fd3ca15")
    ExcelSummaryVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WorkbookName( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WorkbookName( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WorksheetName( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WorksheetName( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_WorksheetCount( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_WorksheetCount( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CommentCount( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommentCount( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HyperlinkCount( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HyperlinkCount( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ObjectCount( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ObjectCount( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ChartCount( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ChartCount( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CountsRelativeTo( 
            /* [in] */ ExcelCountsVerbosity prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CountsRelativeTo( 
            /* [retval][out] */ ExcelCountsVerbosity *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExcelSummaryVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ExcelSummaryVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ExcelSummaryVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ExcelSummaryVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ExcelSummaryVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ExcelSummaryVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WorkbookName )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WorkbookName )( 
            ExcelSummaryVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WorksheetName )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WorksheetName )( 
            ExcelSummaryVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WorksheetCount )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WorksheetCount )( 
            ExcelSummaryVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CommentCount )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommentCount )( 
            ExcelSummaryVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HyperlinkCount )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HyperlinkCount )( 
            ExcelSummaryVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ObjectCount )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectCount )( 
            ExcelSummaryVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ChartCount )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChartCount )( 
            ExcelSummaryVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ExcelSummaryVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CountsRelativeTo )( 
            ExcelSummaryVerbosity * This,
            /* [in] */ ExcelCountsVerbosity prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CountsRelativeTo )( 
            ExcelSummaryVerbosity * This,
            /* [retval][out] */ ExcelCountsVerbosity *prop);
        
        END_INTERFACE
    } ExcelSummaryVerbosityVtbl;

    interface ExcelSummaryVerbosity
    {
        CONST_VTBL struct ExcelSummaryVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ExcelSummaryVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ExcelSummaryVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ExcelSummaryVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ExcelSummaryVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ExcelSummaryVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ExcelSummaryVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ExcelSummaryVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ExcelSummaryVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ExcelSummaryVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ExcelSummaryVerbosity_put_WorkbookName(This,prop)	\
    ( (This)->lpVtbl -> put_WorkbookName(This,prop) ) 

#define ExcelSummaryVerbosity_get_WorkbookName(This,prop)	\
    ( (This)->lpVtbl -> get_WorkbookName(This,prop) ) 

#define ExcelSummaryVerbosity_put_WorksheetName(This,prop)	\
    ( (This)->lpVtbl -> put_WorksheetName(This,prop) ) 

#define ExcelSummaryVerbosity_get_WorksheetName(This,prop)	\
    ( (This)->lpVtbl -> get_WorksheetName(This,prop) ) 

#define ExcelSummaryVerbosity_put_WorksheetCount(This,prop)	\
    ( (This)->lpVtbl -> put_WorksheetCount(This,prop) ) 

#define ExcelSummaryVerbosity_get_WorksheetCount(This,prop)	\
    ( (This)->lpVtbl -> get_WorksheetCount(This,prop) ) 

#define ExcelSummaryVerbosity_put_CommentCount(This,prop)	\
    ( (This)->lpVtbl -> put_CommentCount(This,prop) ) 

#define ExcelSummaryVerbosity_get_CommentCount(This,prop)	\
    ( (This)->lpVtbl -> get_CommentCount(This,prop) ) 

#define ExcelSummaryVerbosity_put_HyperlinkCount(This,prop)	\
    ( (This)->lpVtbl -> put_HyperlinkCount(This,prop) ) 

#define ExcelSummaryVerbosity_get_HyperlinkCount(This,prop)	\
    ( (This)->lpVtbl -> get_HyperlinkCount(This,prop) ) 

#define ExcelSummaryVerbosity_put_ObjectCount(This,prop)	\
    ( (This)->lpVtbl -> put_ObjectCount(This,prop) ) 

#define ExcelSummaryVerbosity_get_ObjectCount(This,prop)	\
    ( (This)->lpVtbl -> get_ObjectCount(This,prop) ) 

#define ExcelSummaryVerbosity_put_ChartCount(This,prop)	\
    ( (This)->lpVtbl -> put_ChartCount(This,prop) ) 

#define ExcelSummaryVerbosity_get_ChartCount(This,prop)	\
    ( (This)->lpVtbl -> get_ChartCount(This,prop) ) 

#define ExcelSummaryVerbosity_put_Position(This,prop)	\
    ( (This)->lpVtbl -> put_Position(This,prop) ) 

#define ExcelSummaryVerbosity_get_Position(This,prop)	\
    ( (This)->lpVtbl -> get_Position(This,prop) ) 

#define ExcelSummaryVerbosity_put_CountsRelativeTo(This,prop)	\
    ( (This)->lpVtbl -> put_CountsRelativeTo(This,prop) ) 

#define ExcelSummaryVerbosity_get_CountsRelativeTo(This,prop)	\
    ( (This)->lpVtbl -> get_CountsRelativeTo(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ExcelSummaryVerbosity_INTERFACE_DEFINED__ */


#ifndef __ExcelCellVerbosity_INTERFACE_DEFINED__
#define __ExcelCellVerbosity_INTERFACE_DEFINED__

/* interface ExcelCellVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ExcelCellVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7fe654a2-b097-410e-9cad-4adfab97d6b0")
    ExcelCellVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Contents( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Contents( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Border( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeakPositionBeforeContents( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeakPositionBeforeContents( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Formula( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Formula( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Hyperlink( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Hyperlink( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Clipped( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Clipped( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Wrapped( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Wrapped( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Overlaps( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Overlaps( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Merged( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Merged( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Shrunk( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Shrunk( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AffectsCells( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AffectsCells( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoFilter( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoFilter( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_InputMessage( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_InputMessage( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ConditionalFormatting( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ConditionalFormatting( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberFormat( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberFormat( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeakPosition( 
            /* [in] */ ExcelPositionVerbosity prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeakPosition( 
            /* [retval][out] */ ExcelPositionVerbosity *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExcelCellVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ExcelCellVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ExcelCellVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ExcelCellVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ExcelCellVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ExcelCellVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ExcelCellVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ExcelCellVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Contents )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Contents )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Border )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeakPositionBeforeContents )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeakPositionBeforeContents )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Formula )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Formula )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Hyperlink )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlink )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Clipped )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Clipped )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Wrapped )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Wrapped )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Overlaps )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Overlaps )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Merged )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Merged )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Shrunk )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Shrunk )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AffectsCells )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AffectsCells )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFilter )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFilter )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InputMessage )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InputMessage )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ConditionalFormatting )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ConditionalFormatting )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberFormat )( 
            ExcelCellVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberFormat )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeakPosition )( 
            ExcelCellVerbosity * This,
            /* [in] */ ExcelPositionVerbosity prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeakPosition )( 
            ExcelCellVerbosity * This,
            /* [retval][out] */ ExcelPositionVerbosity *prop);
        
        END_INTERFACE
    } ExcelCellVerbosityVtbl;

    interface ExcelCellVerbosity
    {
        CONST_VTBL struct ExcelCellVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ExcelCellVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ExcelCellVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ExcelCellVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ExcelCellVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ExcelCellVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ExcelCellVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ExcelCellVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ExcelCellVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ExcelCellVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ExcelCellVerbosity_put_Contents(This,prop)	\
    ( (This)->lpVtbl -> put_Contents(This,prop) ) 

#define ExcelCellVerbosity_get_Contents(This,prop)	\
    ( (This)->lpVtbl -> get_Contents(This,prop) ) 

#define ExcelCellVerbosity_put_Border(This,prop)	\
    ( (This)->lpVtbl -> put_Border(This,prop) ) 

#define ExcelCellVerbosity_get_Border(This,prop)	\
    ( (This)->lpVtbl -> get_Border(This,prop) ) 

#define ExcelCellVerbosity_put_SpeakPositionBeforeContents(This,prop)	\
    ( (This)->lpVtbl -> put_SpeakPositionBeforeContents(This,prop) ) 

#define ExcelCellVerbosity_get_SpeakPositionBeforeContents(This,prop)	\
    ( (This)->lpVtbl -> get_SpeakPositionBeforeContents(This,prop) ) 

#define ExcelCellVerbosity_put_Formula(This,prop)	\
    ( (This)->lpVtbl -> put_Formula(This,prop) ) 

#define ExcelCellVerbosity_get_Formula(This,prop)	\
    ( (This)->lpVtbl -> get_Formula(This,prop) ) 

#define ExcelCellVerbosity_put_Comment(This,prop)	\
    ( (This)->lpVtbl -> put_Comment(This,prop) ) 

#define ExcelCellVerbosity_get_Comment(This,prop)	\
    ( (This)->lpVtbl -> get_Comment(This,prop) ) 

#define ExcelCellVerbosity_put_Hyperlink(This,prop)	\
    ( (This)->lpVtbl -> put_Hyperlink(This,prop) ) 

#define ExcelCellVerbosity_get_Hyperlink(This,prop)	\
    ( (This)->lpVtbl -> get_Hyperlink(This,prop) ) 

#define ExcelCellVerbosity_put_Clipped(This,prop)	\
    ( (This)->lpVtbl -> put_Clipped(This,prop) ) 

#define ExcelCellVerbosity_get_Clipped(This,prop)	\
    ( (This)->lpVtbl -> get_Clipped(This,prop) ) 

#define ExcelCellVerbosity_put_Wrapped(This,prop)	\
    ( (This)->lpVtbl -> put_Wrapped(This,prop) ) 

#define ExcelCellVerbosity_get_Wrapped(This,prop)	\
    ( (This)->lpVtbl -> get_Wrapped(This,prop) ) 

#define ExcelCellVerbosity_put_Overlaps(This,prop)	\
    ( (This)->lpVtbl -> put_Overlaps(This,prop) ) 

#define ExcelCellVerbosity_get_Overlaps(This,prop)	\
    ( (This)->lpVtbl -> get_Overlaps(This,prop) ) 

#define ExcelCellVerbosity_put_Merged(This,prop)	\
    ( (This)->lpVtbl -> put_Merged(This,prop) ) 

#define ExcelCellVerbosity_get_Merged(This,prop)	\
    ( (This)->lpVtbl -> get_Merged(This,prop) ) 

#define ExcelCellVerbosity_put_Shrunk(This,prop)	\
    ( (This)->lpVtbl -> put_Shrunk(This,prop) ) 

#define ExcelCellVerbosity_get_Shrunk(This,prop)	\
    ( (This)->lpVtbl -> get_Shrunk(This,prop) ) 

#define ExcelCellVerbosity_put_AffectsCells(This,prop)	\
    ( (This)->lpVtbl -> put_AffectsCells(This,prop) ) 

#define ExcelCellVerbosity_get_AffectsCells(This,prop)	\
    ( (This)->lpVtbl -> get_AffectsCells(This,prop) ) 

#define ExcelCellVerbosity_put_AutoFilter(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFilter(This,prop) ) 

#define ExcelCellVerbosity_get_AutoFilter(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFilter(This,prop) ) 

#define ExcelCellVerbosity_put_Orientation(This,prop)	\
    ( (This)->lpVtbl -> put_Orientation(This,prop) ) 

#define ExcelCellVerbosity_get_Orientation(This,prop)	\
    ( (This)->lpVtbl -> get_Orientation(This,prop) ) 

#define ExcelCellVerbosity_put_InputMessage(This,prop)	\
    ( (This)->lpVtbl -> put_InputMessage(This,prop) ) 

#define ExcelCellVerbosity_get_InputMessage(This,prop)	\
    ( (This)->lpVtbl -> get_InputMessage(This,prop) ) 

#define ExcelCellVerbosity_put_ConditionalFormatting(This,prop)	\
    ( (This)->lpVtbl -> put_ConditionalFormatting(This,prop) ) 

#define ExcelCellVerbosity_get_ConditionalFormatting(This,prop)	\
    ( (This)->lpVtbl -> get_ConditionalFormatting(This,prop) ) 

#define ExcelCellVerbosity_put_NumberFormat(This,prop)	\
    ( (This)->lpVtbl -> put_NumberFormat(This,prop) ) 

#define ExcelCellVerbosity_get_NumberFormat(This,prop)	\
    ( (This)->lpVtbl -> get_NumberFormat(This,prop) ) 

#define ExcelCellVerbosity_put_SpeakPosition(This,prop)	\
    ( (This)->lpVtbl -> put_SpeakPosition(This,prop) ) 

#define ExcelCellVerbosity_get_SpeakPosition(This,prop)	\
    ( (This)->lpVtbl -> get_SpeakPosition(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ExcelCellVerbosity_INTERFACE_DEFINED__ */


#ifndef __ExcelMiscVerbosity_INTERFACE_DEFINED__
#define __ExcelMiscVerbosity_INTERFACE_DEFINED__

/* interface ExcelMiscVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ExcelMiscVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c6f3b503-d467-4b69-bf02-d2ed035f9350")
    ExcelMiscVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeakWorksheetNameOnFocus( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeakWorksheetNameOnFocus( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeakWorkbookNameOnFocus( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeakWorkbookNameOnFocus( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoDockToolbars( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoDockToolbars( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MeasurementUnits( 
            /* [in] */ VerbosityMeasurementUnits prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MeasurementUnits( 
            /* [retval][out] */ VerbosityMeasurementUnits *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExcelMiscVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ExcelMiscVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ExcelMiscVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ExcelMiscVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ExcelMiscVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ExcelMiscVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ExcelMiscVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ExcelMiscVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ExcelMiscVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ExcelMiscVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeakWorksheetNameOnFocus )( 
            ExcelMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeakWorksheetNameOnFocus )( 
            ExcelMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeakWorkbookNameOnFocus )( 
            ExcelMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeakWorkbookNameOnFocus )( 
            ExcelMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoDockToolbars )( 
            ExcelMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoDockToolbars )( 
            ExcelMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MeasurementUnits )( 
            ExcelMiscVerbosity * This,
            /* [in] */ VerbosityMeasurementUnits prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeasurementUnits )( 
            ExcelMiscVerbosity * This,
            /* [retval][out] */ VerbosityMeasurementUnits *prop);
        
        END_INTERFACE
    } ExcelMiscVerbosityVtbl;

    interface ExcelMiscVerbosity
    {
        CONST_VTBL struct ExcelMiscVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ExcelMiscVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ExcelMiscVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ExcelMiscVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ExcelMiscVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ExcelMiscVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ExcelMiscVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ExcelMiscVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ExcelMiscVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ExcelMiscVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ExcelMiscVerbosity_put_SpeakWorksheetNameOnFocus(This,prop)	\
    ( (This)->lpVtbl -> put_SpeakWorksheetNameOnFocus(This,prop) ) 

#define ExcelMiscVerbosity_get_SpeakWorksheetNameOnFocus(This,prop)	\
    ( (This)->lpVtbl -> get_SpeakWorksheetNameOnFocus(This,prop) ) 

#define ExcelMiscVerbosity_put_SpeakWorkbookNameOnFocus(This,prop)	\
    ( (This)->lpVtbl -> put_SpeakWorkbookNameOnFocus(This,prop) ) 

#define ExcelMiscVerbosity_get_SpeakWorkbookNameOnFocus(This,prop)	\
    ( (This)->lpVtbl -> get_SpeakWorkbookNameOnFocus(This,prop) ) 

#define ExcelMiscVerbosity_put_AutoDockToolbars(This,prop)	\
    ( (This)->lpVtbl -> put_AutoDockToolbars(This,prop) ) 

#define ExcelMiscVerbosity_get_AutoDockToolbars(This,prop)	\
    ( (This)->lpVtbl -> get_AutoDockToolbars(This,prop) ) 

#define ExcelMiscVerbosity_put_MeasurementUnits(This,prop)	\
    ( (This)->lpVtbl -> put_MeasurementUnits(This,prop) ) 

#define ExcelMiscVerbosity_get_MeasurementUnits(This,prop)	\
    ( (This)->lpVtbl -> get_MeasurementUnits(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ExcelMiscVerbosity_INTERFACE_DEFINED__ */


#ifndef __ExcelSelectionVerbosity_INTERFACE_DEFINED__
#define __ExcelSelectionVerbosity_INTERFACE_DEFINED__

/* interface ExcelSelectionVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ExcelSelectionVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d30eb596-6b56-496d-b0f0-dfe91c7517cf")
    ExcelSelectionVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeakBothNewCorners( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeakBothNewCorners( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeakNumberOfRowsAndColumns( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeakNumberOfRowsAndColumns( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExcelSelectionVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ExcelSelectionVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ExcelSelectionVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ExcelSelectionVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ExcelSelectionVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ExcelSelectionVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ExcelSelectionVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ExcelSelectionVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ExcelSelectionVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ExcelSelectionVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeakBothNewCorners )( 
            ExcelSelectionVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeakBothNewCorners )( 
            ExcelSelectionVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeakNumberOfRowsAndColumns )( 
            ExcelSelectionVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeakNumberOfRowsAndColumns )( 
            ExcelSelectionVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } ExcelSelectionVerbosityVtbl;

    interface ExcelSelectionVerbosity
    {
        CONST_VTBL struct ExcelSelectionVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ExcelSelectionVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ExcelSelectionVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ExcelSelectionVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ExcelSelectionVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ExcelSelectionVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ExcelSelectionVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ExcelSelectionVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ExcelSelectionVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ExcelSelectionVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ExcelSelectionVerbosity_put_SpeakBothNewCorners(This,prop)	\
    ( (This)->lpVtbl -> put_SpeakBothNewCorners(This,prop) ) 

#define ExcelSelectionVerbosity_get_SpeakBothNewCorners(This,prop)	\
    ( (This)->lpVtbl -> get_SpeakBothNewCorners(This,prop) ) 

#define ExcelSelectionVerbosity_put_SpeakNumberOfRowsAndColumns(This,prop)	\
    ( (This)->lpVtbl -> put_SpeakNumberOfRowsAndColumns(This,prop) ) 

#define ExcelSelectionVerbosity_get_SpeakNumberOfRowsAndColumns(This,prop)	\
    ( (This)->lpVtbl -> get_SpeakNumberOfRowsAndColumns(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ExcelSelectionVerbosity_INTERFACE_DEFINED__ */


#ifndef __ExceptionEntry_INTERFACE_DEFINED__
#define __ExceptionEntry_INTERFACE_DEFINED__

/* interface ExceptionEntry */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ExceptionEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("dd771ed5-2fda-4c0f-bf4e-d33a379d885b")
    ExceptionEntry : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Word( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Word( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Translation( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Translation( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExceptionEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ExceptionEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ExceptionEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ExceptionEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ExceptionEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ExceptionEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ExceptionEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ExceptionEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ExceptionEntry * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ExceptionEntry * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Word )( 
            ExceptionEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Word )( 
            ExceptionEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Translation )( 
            ExceptionEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Translation )( 
            ExceptionEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } ExceptionEntryVtbl;

    interface ExceptionEntry
    {
        CONST_VTBL struct ExceptionEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ExceptionEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ExceptionEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ExceptionEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ExceptionEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ExceptionEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ExceptionEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ExceptionEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ExceptionEntry_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ExceptionEntry_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ExceptionEntry_put_Word(This,prop)	\
    ( (This)->lpVtbl -> put_Word(This,prop) ) 

#define ExceptionEntry_get_Word(This,prop)	\
    ( (This)->lpVtbl -> get_Word(This,prop) ) 

#define ExceptionEntry_put_Translation(This,prop)	\
    ( (This)->lpVtbl -> put_Translation(This,prop) ) 

#define ExceptionEntry_get_Translation(This,prop)	\
    ( (This)->lpVtbl -> get_Translation(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ExceptionEntry_INTERFACE_DEFINED__ */


#ifndef __ColorEntry_INTERFACE_DEFINED__
#define __ColorEntry_INTERFACE_DEFINED__

/* interface ColorEntry */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ColorEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2853890e-9d0c-4368-8e79-f9d7e88f8604")
    ColorEntry : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ Color *color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ Color **color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Translation( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Translation( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColorEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ColorEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ColorEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ColorEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ColorEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ColorEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ColorEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ColorEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ColorEntry * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ColorEntry * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            ColorEntry * This,
            /* [in] */ Color *color);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ColorEntry * This,
            /* [retval][out] */ Color **color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Translation )( 
            ColorEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Translation )( 
            ColorEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } ColorEntryVtbl;

    interface ColorEntry
    {
        CONST_VTBL struct ColorEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ColorEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ColorEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ColorEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ColorEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ColorEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ColorEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ColorEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ColorEntry_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ColorEntry_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ColorEntry_put_Value(This,color)	\
    ( (This)->lpVtbl -> put_Value(This,color) ) 

#define ColorEntry_get_Value(This,color)	\
    ( (This)->lpVtbl -> get_Value(This,color) ) 

#define ColorEntry_put_Translation(This,prop)	\
    ( (This)->lpVtbl -> put_Translation(This,prop) ) 

#define ColorEntry_get_Translation(This,prop)	\
    ( (This)->lpVtbl -> get_Translation(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ColorEntry_INTERFACE_DEFINED__ */


#ifndef __KeyLabelEntry_INTERFACE_DEFINED__
#define __KeyLabelEntry_INTERFACE_DEFINED__

/* interface KeyLabelEntry */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_KeyLabelEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8ee54cc0-2617-450e-bff0-55356da30a9c")
    KeyLabelEntry : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Key( 
            /* [in] */ VirtualKeyCode key) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ VirtualKeyCode *key) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeyModifiers( 
            /* [in] */ KeyModifiers mods) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeyModifiers( 
            /* [retval][out] */ KeyModifiers *mods) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Translation( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Translation( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct KeyLabelEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            KeyLabelEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            KeyLabelEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            KeyLabelEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            KeyLabelEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            KeyLabelEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            KeyLabelEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            KeyLabelEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            KeyLabelEntry * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            KeyLabelEntry * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Key )( 
            KeyLabelEntry * This,
            /* [in] */ VirtualKeyCode key);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            KeyLabelEntry * This,
            /* [retval][out] */ VirtualKeyCode *key);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeyModifiers )( 
            KeyLabelEntry * This,
            /* [in] */ KeyModifiers mods);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeyModifiers )( 
            KeyLabelEntry * This,
            /* [retval][out] */ KeyModifiers *mods);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Translation )( 
            KeyLabelEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Translation )( 
            KeyLabelEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } KeyLabelEntryVtbl;

    interface KeyLabelEntry
    {
        CONST_VTBL struct KeyLabelEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define KeyLabelEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define KeyLabelEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define KeyLabelEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define KeyLabelEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define KeyLabelEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define KeyLabelEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define KeyLabelEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define KeyLabelEntry_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define KeyLabelEntry_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define KeyLabelEntry_put_Key(This,key)	\
    ( (This)->lpVtbl -> put_Key(This,key) ) 

#define KeyLabelEntry_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define KeyLabelEntry_put_KeyModifiers(This,mods)	\
    ( (This)->lpVtbl -> put_KeyModifiers(This,mods) ) 

#define KeyLabelEntry_get_KeyModifiers(This,mods)	\
    ( (This)->lpVtbl -> get_KeyModifiers(This,mods) ) 

#define KeyLabelEntry_put_Translation(This,prop)	\
    ( (This)->lpVtbl -> put_Translation(This,prop) ) 

#define KeyLabelEntry_get_Translation(This,prop)	\
    ( (This)->lpVtbl -> get_Translation(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __KeyLabelEntry_INTERFACE_DEFINED__ */


#ifndef __GraphicEntry_INTERFACE_DEFINED__
#define __GraphicEntry_INTERFACE_DEFINED__

/* interface GraphicEntry */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_GraphicEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e60b1e71-548f-4b34-bd81-99003ea6922a")
    GraphicEntry : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CRC( 
            /* [in] */ long CRC) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CRC( 
            /* [retval][out] */ long *CRC) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeechLabel( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeechLabel( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BrailleLabel( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrailleLabel( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeechSilence( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeechSilence( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BrailleSilence( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrailleSilence( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExcludeFromLines( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExcludeFromLines( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GraphicEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            GraphicEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            GraphicEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            GraphicEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            GraphicEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            GraphicEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            GraphicEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            GraphicEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            GraphicEntry * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            GraphicEntry * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CRC )( 
            GraphicEntry * This,
            /* [in] */ long CRC);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CRC )( 
            GraphicEntry * This,
            /* [retval][out] */ long *CRC);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeechLabel )( 
            GraphicEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeechLabel )( 
            GraphicEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BrailleLabel )( 
            GraphicEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrailleLabel )( 
            GraphicEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeechSilence )( 
            GraphicEntry * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeechSilence )( 
            GraphicEntry * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BrailleSilence )( 
            GraphicEntry * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrailleSilence )( 
            GraphicEntry * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExcludeFromLines )( 
            GraphicEntry * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExcludeFromLines )( 
            GraphicEntry * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } GraphicEntryVtbl;

    interface GraphicEntry
    {
        CONST_VTBL struct GraphicEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define GraphicEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define GraphicEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define GraphicEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define GraphicEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define GraphicEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define GraphicEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define GraphicEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define GraphicEntry_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define GraphicEntry_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define GraphicEntry_put_CRC(This,CRC)	\
    ( (This)->lpVtbl -> put_CRC(This,CRC) ) 

#define GraphicEntry_get_CRC(This,CRC)	\
    ( (This)->lpVtbl -> get_CRC(This,CRC) ) 

#define GraphicEntry_put_SpeechLabel(This,prop)	\
    ( (This)->lpVtbl -> put_SpeechLabel(This,prop) ) 

#define GraphicEntry_get_SpeechLabel(This,prop)	\
    ( (This)->lpVtbl -> get_SpeechLabel(This,prop) ) 

#define GraphicEntry_put_BrailleLabel(This,prop)	\
    ( (This)->lpVtbl -> put_BrailleLabel(This,prop) ) 

#define GraphicEntry_get_BrailleLabel(This,prop)	\
    ( (This)->lpVtbl -> get_BrailleLabel(This,prop) ) 

#define GraphicEntry_put_SpeechSilence(This,prop)	\
    ( (This)->lpVtbl -> put_SpeechSilence(This,prop) ) 

#define GraphicEntry_get_SpeechSilence(This,prop)	\
    ( (This)->lpVtbl -> get_SpeechSilence(This,prop) ) 

#define GraphicEntry_put_BrailleSilence(This,prop)	\
    ( (This)->lpVtbl -> put_BrailleSilence(This,prop) ) 

#define GraphicEntry_get_BrailleSilence(This,prop)	\
    ( (This)->lpVtbl -> get_BrailleSilence(This,prop) ) 

#define GraphicEntry_put_ExcludeFromLines(This,prop)	\
    ( (This)->lpVtbl -> put_ExcludeFromLines(This,prop) ) 

#define GraphicEntry_get_ExcludeFromLines(This,prop)	\
    ( (This)->lpVtbl -> get_ExcludeFromLines(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __GraphicEntry_INTERFACE_DEFINED__ */


#ifndef __CharacterEntry_INTERFACE_DEFINED__
#define __CharacterEntry_INTERFACE_DEFINED__

/* interface CharacterEntry */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_CharacterEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9c333e1b-3bda-41df-aab3-56f901f26d5e")
    CharacterEntry : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Character( 
            /* [in] */ VARIANT prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Character( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FontName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FontName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Translation( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Translation( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CharacterEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CharacterEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CharacterEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CharacterEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CharacterEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CharacterEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CharacterEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CharacterEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CharacterEntry * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CharacterEntry * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Character )( 
            CharacterEntry * This,
            /* [in] */ VARIANT prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Character )( 
            CharacterEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontName )( 
            CharacterEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FontName )( 
            CharacterEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Translation )( 
            CharacterEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Translation )( 
            CharacterEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } CharacterEntryVtbl;

    interface CharacterEntry
    {
        CONST_VTBL struct CharacterEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CharacterEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CharacterEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CharacterEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CharacterEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CharacterEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CharacterEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CharacterEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CharacterEntry_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define CharacterEntry_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define CharacterEntry_put_Character(This,prop)	\
    ( (This)->lpVtbl -> put_Character(This,prop) ) 

#define CharacterEntry_get_Character(This,prop)	\
    ( (This)->lpVtbl -> get_Character(This,prop) ) 

#define CharacterEntry_put_FontName(This,prop)	\
    ( (This)->lpVtbl -> put_FontName(This,prop) ) 

#define CharacterEntry_get_FontName(This,prop)	\
    ( (This)->lpVtbl -> get_FontName(This,prop) ) 

#define CharacterEntry_put_Translation(This,prop)	\
    ( (This)->lpVtbl -> put_Translation(This,prop) ) 

#define CharacterEntry_get_Translation(This,prop)	\
    ( (This)->lpVtbl -> get_Translation(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CharacterEntry_INTERFACE_DEFINED__ */


#ifndef ___MousePointer_INTERFACE_DEFINED__
#define ___MousePointer_INTERFACE_DEFINED__

/* interface _MousePointer */
/* [object][helpcontext][version][hidden][dual][uuid] */ 


EXTERN_C const IID IID__MousePointer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b3e482a3-7ee0-4b15-aa04-470d0c4d2d13")
    _MousePointer : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ModuleName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExecutableName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PointerSilenced( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseAsSystemPointer( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DescribePointer( 
            /* [in] */ BSTR name,
            /* [in] */ VARIANT_BOOL Silence,
            /* [in] */ VARIANT_BOOL IsSystemPointer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _MousePointerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _MousePointer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _MousePointer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _MousePointer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _MousePointer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _MousePointer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _MousePointer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _MousePointer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _MousePointer * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _MousePointer * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            _MousePointer * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ModuleName )( 
            _MousePointer * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExecutableName )( 
            _MousePointer * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorName )( 
            _MousePointer * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PointerSilenced )( 
            _MousePointer * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseAsSystemPointer )( 
            _MousePointer * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DescribePointer )( 
            _MousePointer * This,
            /* [in] */ BSTR name,
            /* [in] */ VARIANT_BOOL Silence,
            /* [in] */ VARIANT_BOOL IsSystemPointer);
        
        END_INTERFACE
    } _MousePointerVtbl;

    interface _MousePointer
    {
        CONST_VTBL struct _MousePointerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _MousePointer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _MousePointer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _MousePointer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _MousePointer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _MousePointer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _MousePointer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _MousePointer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _MousePointer_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _MousePointer_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _MousePointer_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define _MousePointer_get_ModuleName(This,prop)	\
    ( (This)->lpVtbl -> get_ModuleName(This,prop) ) 

#define _MousePointer_get_ExecutableName(This,prop)	\
    ( (This)->lpVtbl -> get_ExecutableName(This,prop) ) 

#define _MousePointer_get_CursorName(This,prop)	\
    ( (This)->lpVtbl -> get_CursorName(This,prop) ) 

#define _MousePointer_get_PointerSilenced(This,prop)	\
    ( (This)->lpVtbl -> get_PointerSilenced(This,prop) ) 

#define _MousePointer_get_UseAsSystemPointer(This,prop)	\
    ( (This)->lpVtbl -> get_UseAsSystemPointer(This,prop) ) 

#define _MousePointer_DescribePointer(This,name,Silence,IsSystemPointer)	\
    ( (This)->lpVtbl -> DescribePointer(This,name,Silence,IsSystemPointer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___MousePointer_INTERFACE_DEFINED__ */


#ifndef ___SharedObjects_INTERFACE_DEFINED__
#define ___SharedObjects_INTERFACE_DEFINED__

/* interface _SharedObjects */
/* [object][helpstring][helpcontext][version][hidden][dual][uuid] */ 


EXTERN_C const IID IID__SharedObjects;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8b8674b2-9d28-4968-8666-234ae4229220")
    _SharedObjects : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Get( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT Timeout,
            /* [retval][out] */ IDispatch **Object) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Register( 
            /* [in] */ BSTR Name,
            /* [in] */ IDispatch *Object) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Revoke( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **application) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _SharedObjectsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _SharedObjects * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _SharedObjects * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _SharedObjects * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _SharedObjects * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _SharedObjects * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _SharedObjects * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _SharedObjects * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Get )( 
            _SharedObjects * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT Timeout,
            /* [retval][out] */ IDispatch **Object);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Register )( 
            _SharedObjects * This,
            /* [in] */ BSTR Name,
            /* [in] */ IDispatch *Object);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Revoke )( 
            _SharedObjects * This,
            /* [in] */ BSTR Name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _SharedObjects * This,
            /* [retval][out] */ _Application **application);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _SharedObjects * This,
            /* [retval][out] */ IDispatch **parent);
        
        END_INTERFACE
    } _SharedObjectsVtbl;

    interface _SharedObjects
    {
        CONST_VTBL struct _SharedObjectsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _SharedObjects_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _SharedObjects_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _SharedObjects_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _SharedObjects_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _SharedObjects_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _SharedObjects_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _SharedObjects_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _SharedObjects_Get(This,Name,Timeout,Object)	\
    ( (This)->lpVtbl -> Get(This,Name,Timeout,Object) ) 

#define _SharedObjects_Register(This,Name,Object)	\
    ( (This)->lpVtbl -> Register(This,Name,Object) ) 

#define _SharedObjects_Revoke(This,Name)	\
    ( (This)->lpVtbl -> Revoke(This,Name) ) 

#define _SharedObjects_get_Application(This,application)	\
    ( (This)->lpVtbl -> get_Application(This,application) ) 

#define _SharedObjects_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___SharedObjects_INTERFACE_DEFINED__ */


#ifndef ___ClientInformation_INTERFACE_DEFINED__
#define ___ClientInformation_INTERFACE_DEFINED__

/* interface _ClientInformation */
/* [object][helpstring][helpcontext][hidden][version][dual][uuid] */ 


EXTERN_C const IID IID__ClientInformation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a5082f96-bc80-4ae8-82cc-51101ed91a11")
    _ClientInformation : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **application) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScriptFileName( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScriptProcess( 
            /* [retval][out] */ Process **clientProcess) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScriptGlobal( 
            /* [retval][out] */ VARIANT_BOOL *global) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Overlap( 
            /* [retval][out] */ _Window **overlap) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScriptLaunchTime( 
            /* [retval][out] */ DATE *launchTime) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScriptPath( 
            /* [retval][out] */ BSTR *path) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ApplicationProcess( 
            /* [retval][out] */ Process **process) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScriptEmbedded( 
            /* [retval][out] */ VARIANT_BOOL *embedded) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserProfilePath( 
            /* [retval][out] */ BSTR *path) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScriptDescription( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScriptDescription( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScriptHelp( 
            /* [in] */ VARIANT var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScriptHelp( 
            /* [retval][out] */ VARIANT *var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScriptVersion( 
            /* [in] */ BSTR var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScriptVersion( 
            /* [retval][out] */ BSTR *var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScriptName( 
            /* [in] */ BSTR var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScriptName( 
            /* [retval][out] */ BSTR *var) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UILanguage( 
            /* [retval][out] */ VARIANT *uiLang) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UILanguage( 
            /* [in] */ VARIANT uiLang) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Overlap( 
            /* [in] */ _Window *overlap) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _ClientInformationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _ClientInformation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _ClientInformation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _ClientInformation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _ClientInformation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _ClientInformation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _ClientInformation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _ClientInformation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _ClientInformation * This,
            /* [retval][out] */ _Application **application);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _ClientInformation * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScriptFileName )( 
            _ClientInformation * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScriptProcess )( 
            _ClientInformation * This,
            /* [retval][out] */ Process **clientProcess);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScriptGlobal )( 
            _ClientInformation * This,
            /* [retval][out] */ VARIANT_BOOL *global);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Overlap )( 
            _ClientInformation * This,
            /* [retval][out] */ _Window **overlap);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScriptLaunchTime )( 
            _ClientInformation * This,
            /* [retval][out] */ DATE *launchTime);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScriptPath )( 
            _ClientInformation * This,
            /* [retval][out] */ BSTR *path);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ApplicationProcess )( 
            _ClientInformation * This,
            /* [retval][out] */ Process **process);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScriptEmbedded )( 
            _ClientInformation * This,
            /* [retval][out] */ VARIANT_BOOL *embedded);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserProfilePath )( 
            _ClientInformation * This,
            /* [retval][out] */ BSTR *path);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScriptDescription )( 
            _ClientInformation * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScriptDescription )( 
            _ClientInformation * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScriptHelp )( 
            _ClientInformation * This,
            /* [in] */ VARIANT var);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScriptHelp )( 
            _ClientInformation * This,
            /* [retval][out] */ VARIANT *var);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScriptVersion )( 
            _ClientInformation * This,
            /* [in] */ BSTR var);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScriptVersion )( 
            _ClientInformation * This,
            /* [retval][out] */ BSTR *var);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScriptName )( 
            _ClientInformation * This,
            /* [in] */ BSTR var);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScriptName )( 
            _ClientInformation * This,
            /* [retval][out] */ BSTR *var);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UILanguage )( 
            _ClientInformation * This,
            /* [retval][out] */ VARIANT *uiLang);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UILanguage )( 
            _ClientInformation * This,
            /* [in] */ VARIANT uiLang);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Overlap )( 
            _ClientInformation * This,
            /* [in] */ _Window *overlap);
        
        END_INTERFACE
    } _ClientInformationVtbl;

    interface _ClientInformation
    {
        CONST_VTBL struct _ClientInformationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ClientInformation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _ClientInformation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _ClientInformation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _ClientInformation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _ClientInformation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _ClientInformation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _ClientInformation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _ClientInformation_get_Application(This,application)	\
    ( (This)->lpVtbl -> get_Application(This,application) ) 

#define _ClientInformation_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _ClientInformation_get_ScriptFileName(This,name)	\
    ( (This)->lpVtbl -> get_ScriptFileName(This,name) ) 

#define _ClientInformation_get_ScriptProcess(This,clientProcess)	\
    ( (This)->lpVtbl -> get_ScriptProcess(This,clientProcess) ) 

#define _ClientInformation_get_ScriptGlobal(This,global)	\
    ( (This)->lpVtbl -> get_ScriptGlobal(This,global) ) 

#define _ClientInformation_get_Overlap(This,overlap)	\
    ( (This)->lpVtbl -> get_Overlap(This,overlap) ) 

#define _ClientInformation_get_ScriptLaunchTime(This,launchTime)	\
    ( (This)->lpVtbl -> get_ScriptLaunchTime(This,launchTime) ) 

#define _ClientInformation_get_ScriptPath(This,path)	\
    ( (This)->lpVtbl -> get_ScriptPath(This,path) ) 

#define _ClientInformation_get_ApplicationProcess(This,process)	\
    ( (This)->lpVtbl -> get_ApplicationProcess(This,process) ) 

#define _ClientInformation_get_ScriptEmbedded(This,embedded)	\
    ( (This)->lpVtbl -> get_ScriptEmbedded(This,embedded) ) 

#define _ClientInformation_get_UserProfilePath(This,path)	\
    ( (This)->lpVtbl -> get_UserProfilePath(This,path) ) 

#define _ClientInformation_put_ScriptDescription(This,prop)	\
    ( (This)->lpVtbl -> put_ScriptDescription(This,prop) ) 

#define _ClientInformation_get_ScriptDescription(This,prop)	\
    ( (This)->lpVtbl -> get_ScriptDescription(This,prop) ) 

#define _ClientInformation_put_ScriptHelp(This,var)	\
    ( (This)->lpVtbl -> put_ScriptHelp(This,var) ) 

#define _ClientInformation_get_ScriptHelp(This,var)	\
    ( (This)->lpVtbl -> get_ScriptHelp(This,var) ) 

#define _ClientInformation_put_ScriptVersion(This,var)	\
    ( (This)->lpVtbl -> put_ScriptVersion(This,var) ) 

#define _ClientInformation_get_ScriptVersion(This,var)	\
    ( (This)->lpVtbl -> get_ScriptVersion(This,var) ) 

#define _ClientInformation_put_ScriptName(This,var)	\
    ( (This)->lpVtbl -> put_ScriptName(This,var) ) 

#define _ClientInformation_get_ScriptName(This,var)	\
    ( (This)->lpVtbl -> get_ScriptName(This,var) ) 

#define _ClientInformation_get_UILanguage(This,uiLang)	\
    ( (This)->lpVtbl -> get_UILanguage(This,uiLang) ) 

#define _ClientInformation_put_UILanguage(This,uiLang)	\
    ( (This)->lpVtbl -> put_UILanguage(This,uiLang) ) 

#define _ClientInformation_put_Overlap(This,overlap)	\
    ( (This)->lpVtbl -> put_Overlap(This,overlap) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___ClientInformation_INTERFACE_DEFINED__ */


#ifndef ___Dialog_INTERFACE_DEFINED__
#define ___Dialog_INTERFACE_DEFINED__

/* interface _Dialog */
/* [object][helpstring][helpcontext][hidden][version][dual][uuid] */ 


EXTERN_C const IID IID__Dialog;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6465fe90-c00c-47e3-b2dc-278e486477fc")
    _Dialog : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **application) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Control( 
            /* [optional][in] */ VARIANT id,
            /* [retval][out] */ IDispatch **control) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EventInfo( 
            /* [retval][out] */ VARIANT *info) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Menu( 
            /* [retval][out] */ Menu **Menu) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _DialogVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Dialog * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Dialog * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Dialog * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Dialog * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Dialog * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Dialog * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Dialog * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Dialog * This,
            /* [retval][out] */ _Application **application);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Dialog * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _Dialog * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Control )( 
            _Dialog * This,
            /* [optional][in] */ VARIANT id,
            /* [retval][out] */ IDispatch **control);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventInfo )( 
            _Dialog * This,
            /* [retval][out] */ VARIANT *info);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            _Dialog * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Menu )( 
            _Dialog * This,
            /* [retval][out] */ Menu **Menu);
        
        END_INTERFACE
    } _DialogVtbl;

    interface _Dialog
    {
        CONST_VTBL struct _DialogVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Dialog_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Dialog_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Dialog_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Dialog_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Dialog_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Dialog_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Dialog_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Dialog_get_Application(This,application)	\
    ( (This)->lpVtbl -> get_Application(This,application) ) 

#define _Dialog_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Dialog_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _Dialog_get_Control(This,id,control)	\
    ( (This)->lpVtbl -> get_Control(This,id,control) ) 

#define _Dialog_get_EventInfo(This,info)	\
    ( (This)->lpVtbl -> get_EventInfo(This,info) ) 

#define _Dialog_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define _Dialog_get_Menu(This,Menu)	\
    ( (This)->lpVtbl -> get_Menu(This,Menu) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Dialog_INTERFACE_DEFINED__ */


#ifndef __Text_INTERFACE_DEFINED__
#define __Text_INTERFACE_DEFINED__

/* interface Text */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Text;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a3e20300-8ef2-4e7f-a485-6fba94dcdcda")
    Text : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnclosingRectangle( 
            /* [retval][out] */ ScreenRectangle **ScreenRectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnclosingRectangle( 
            /* [in] */ ScreenRectangle *ScreenRectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Point( 
            /* [retval][out] */ ScreenPoint **Point) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Point( 
            /* [in] */ ScreenPoint *Point) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clip( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Character( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Word( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Sentence( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paragraph( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Line( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorClip( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextClip( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorCharacter( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextCharacter( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorWord( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextWord( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorSentence( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextSentence( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorParagraph( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextParagraph( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorLine( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextLine( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SentenceStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ParagraphStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LineStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorSentenceStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextSentenceStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorParagraphStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextParagraphStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorLineStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextLineStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClipStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorClipStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextClipStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharacterStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorCharacterStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextCharacterStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WordStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PriorWordStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextWordStatic( 
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Text * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Text * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Text * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Text * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Text * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Text * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Text * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Text * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Text * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnclosingRectangle )( 
            Text * This,
            /* [retval][out] */ ScreenRectangle **ScreenRectangle);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnclosingRectangle )( 
            Text * This,
            /* [in] */ ScreenRectangle *ScreenRectangle);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Point )( 
            Text * This,
            /* [retval][out] */ ScreenPoint **Point);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Point )( 
            Text * This,
            /* [in] */ ScreenPoint *Point);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clip )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Character )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Word )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Sentence )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paragraph )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Line )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorClip )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextClip )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorCharacter )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextCharacter )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorWord )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextWord )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorSentence )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextSentence )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorParagraph )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextParagraph )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorLine )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextLine )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SentenceStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ParagraphStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LineStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorSentenceStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextSentenceStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorParagraphStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextParagraphStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorLineStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextLineStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ Clips **clips);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClipStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorClipStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextClipStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharacterStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorCharacterStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextCharacterStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WordStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PriorWordStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextWordStatic )( 
            Text * This,
            /* [optional][in] */ VARIANT ScreenPoint,
            /* [retval][out] */ TextClip **clip);
        
        END_INTERFACE
    } TextVtbl;

    interface Text
    {
        CONST_VTBL struct TextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Text_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Text_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Text_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Text_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Text_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Text_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Text_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Text_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Text_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Text_get_EnclosingRectangle(This,ScreenRectangle)	\
    ( (This)->lpVtbl -> get_EnclosingRectangle(This,ScreenRectangle) ) 

#define Text_put_EnclosingRectangle(This,ScreenRectangle)	\
    ( (This)->lpVtbl -> put_EnclosingRectangle(This,ScreenRectangle) ) 

#define Text_get_Point(This,Point)	\
    ( (This)->lpVtbl -> get_Point(This,Point) ) 

#define Text_put_Point(This,Point)	\
    ( (This)->lpVtbl -> put_Point(This,Point) ) 

#define Text_Clip(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> Clip(This,ScreenPoint,clip) ) 

#define Text_Character(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> Character(This,ScreenPoint,clip) ) 

#define Text_Word(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> Word(This,ScreenPoint,clip) ) 

#define Text_Sentence(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> Sentence(This,ScreenPoint,clips) ) 

#define Text_Paragraph(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> Paragraph(This,ScreenPoint,clips) ) 

#define Text_Line(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> Line(This,ScreenPoint,clips) ) 

#define Text_PriorClip(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> PriorClip(This,ScreenPoint,clip) ) 

#define Text_NextClip(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> NextClip(This,ScreenPoint,clip) ) 

#define Text_PriorCharacter(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> PriorCharacter(This,ScreenPoint,clip) ) 

#define Text_NextCharacter(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> NextCharacter(This,ScreenPoint,clip) ) 

#define Text_PriorWord(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> PriorWord(This,ScreenPoint,clip) ) 

#define Text_NextWord(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> NextWord(This,ScreenPoint,clip) ) 

#define Text_PriorSentence(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> PriorSentence(This,ScreenPoint,clips) ) 

#define Text_NextSentence(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> NextSentence(This,ScreenPoint,clips) ) 

#define Text_PriorParagraph(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> PriorParagraph(This,ScreenPoint,clips) ) 

#define Text_NextParagraph(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> NextParagraph(This,ScreenPoint,clips) ) 

#define Text_PriorLine(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> PriorLine(This,ScreenPoint,clips) ) 

#define Text_NextLine(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> NextLine(This,ScreenPoint,clips) ) 

#define Text_SentenceStatic(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> SentenceStatic(This,ScreenPoint,clips) ) 

#define Text_ParagraphStatic(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> ParagraphStatic(This,ScreenPoint,clips) ) 

#define Text_LineStatic(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> LineStatic(This,ScreenPoint,clips) ) 

#define Text_PriorSentenceStatic(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> PriorSentenceStatic(This,ScreenPoint,clips) ) 

#define Text_NextSentenceStatic(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> NextSentenceStatic(This,ScreenPoint,clips) ) 

#define Text_PriorParagraphStatic(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> PriorParagraphStatic(This,ScreenPoint,clips) ) 

#define Text_NextParagraphStatic(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> NextParagraphStatic(This,ScreenPoint,clips) ) 

#define Text_PriorLineStatic(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> PriorLineStatic(This,ScreenPoint,clips) ) 

#define Text_NextLineStatic(This,ScreenPoint,clips)	\
    ( (This)->lpVtbl -> NextLineStatic(This,ScreenPoint,clips) ) 

#define Text_ClipStatic(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> ClipStatic(This,ScreenPoint,clip) ) 

#define Text_PriorClipStatic(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> PriorClipStatic(This,ScreenPoint,clip) ) 

#define Text_NextClipStatic(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> NextClipStatic(This,ScreenPoint,clip) ) 

#define Text_CharacterStatic(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> CharacterStatic(This,ScreenPoint,clip) ) 

#define Text_PriorCharacterStatic(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> PriorCharacterStatic(This,ScreenPoint,clip) ) 

#define Text_NextCharacterStatic(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> NextCharacterStatic(This,ScreenPoint,clip) ) 

#define Text_WordStatic(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> WordStatic(This,ScreenPoint,clip) ) 

#define Text_PriorWordStatic(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> PriorWordStatic(This,ScreenPoint,clip) ) 

#define Text_NextWordStatic(This,ScreenPoint,clip)	\
    ( (This)->lpVtbl -> NextWordStatic(This,ScreenPoint,clip) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Text_INTERFACE_DEFINED__ */


#ifndef __Screen_INTERFACE_DEFINED__
#define __Screen_INTERFACE_DEFINED__

/* interface Screen */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Screen;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("232a9364-2638-4da3-833f-6524c6220d6f")
    Screen : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColorDepth( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Outline( 
            /* [retval][out] */ ScreenRectangle **rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Outline( 
            /* [in] */ ScreenRectangle *rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FullScreenRectangle( 
            /* [retval][out] */ ScreenRectangle **obj) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Point( 
            /* [in] */ int x,
            /* [in] */ int y,
            /* [retval][out] */ ScreenPoint **ScreenPoint) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Rectangle( 
            /* [in] */ int left,
            /* [in] */ int top,
            /* [in] */ int right,
            /* [in] */ int bottom,
            /* [retval][out] */ ScreenRectangle **ScreenRectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PixelColor( 
            /* [in] */ ScreenPoint *point,
            /* [retval][out] */ Color **color) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ScreenVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Screen * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Screen * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Screen * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Screen * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Screen * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Screen * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Screen * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Screen * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Screen * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Screen * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Screen * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorDepth )( 
            Screen * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Outline )( 
            Screen * This,
            /* [retval][out] */ ScreenRectangle **rectangle);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Outline )( 
            Screen * This,
            /* [in] */ ScreenRectangle *rectangle);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FullScreenRectangle )( 
            Screen * This,
            /* [retval][out] */ ScreenRectangle **obj);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Point )( 
            Screen * This,
            /* [in] */ int x,
            /* [in] */ int y,
            /* [retval][out] */ ScreenPoint **ScreenPoint);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Rectangle )( 
            Screen * This,
            /* [in] */ int left,
            /* [in] */ int top,
            /* [in] */ int right,
            /* [in] */ int bottom,
            /* [retval][out] */ ScreenRectangle **ScreenRectangle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PixelColor )( 
            Screen * This,
            /* [in] */ ScreenPoint *point,
            /* [retval][out] */ Color **color);
        
        END_INTERFACE
    } ScreenVtbl;

    interface Screen
    {
        CONST_VTBL struct ScreenVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Screen_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Screen_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Screen_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Screen_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Screen_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Screen_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Screen_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Screen_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Screen_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Screen_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Screen_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Screen_get_ColorDepth(This,prop)	\
    ( (This)->lpVtbl -> get_ColorDepth(This,prop) ) 

#define Screen_get_Outline(This,rectangle)	\
    ( (This)->lpVtbl -> get_Outline(This,rectangle) ) 

#define Screen_put_Outline(This,rectangle)	\
    ( (This)->lpVtbl -> put_Outline(This,rectangle) ) 

#define Screen_get_FullScreenRectangle(This,obj)	\
    ( (This)->lpVtbl -> get_FullScreenRectangle(This,obj) ) 

#define Screen_Point(This,x,y,ScreenPoint)	\
    ( (This)->lpVtbl -> Point(This,x,y,ScreenPoint) ) 

#define Screen_Rectangle(This,left,top,right,bottom,ScreenRectangle)	\
    ( (This)->lpVtbl -> Rectangle(This,left,top,right,bottom,ScreenRectangle) ) 

#define Screen_PixelColor(This,point,color)	\
    ( (This)->lpVtbl -> PixelColor(This,point,color) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Screen_INTERFACE_DEFINED__ */


#ifndef ___Control_INTERFACE_DEFINED__
#define ___Control_INTERFACE_DEFINED__

/* interface _Control */
/* [object][hidden][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__Control;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("24d22926-0c9c-4021-8152-4960fdd790b5")
    _Control : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ ClientPoint **position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ ClientPoint *position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ VARIANT_BOOL *focused) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *height) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long height) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabOrder( 
            /* [retval][out] */ long *tabOrder) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabOrder( 
            /* [in] */ long tabOrder) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabStop( 
            /* [retval][out] */ VARIANT_BOOL *tabStop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabStop( 
            /* [in] */ VARIANT_BOOL tabStop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Group( 
            /* [retval][out] */ VARIANT_BOOL *group) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Group( 
            /* [in] */ VARIANT_BOOL group) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ long *id) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Focus( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Id( 
            /* [in] */ long id) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _ControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Control * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Control * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Control * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Control * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Control * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Control * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Control * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            _Control * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            _Control * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Control * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Control * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _Control * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            _Control * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            _Control * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            _Control * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _Control * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            _Control * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            _Control * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _Control * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _Control * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _Control * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _Control * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            _Control * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            _Control * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            _Control * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            _Control * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            _Control * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            _Control * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _Control * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            _Control * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            _Control * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            _Control * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            _Control * This);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            _Control * This,
            /* [in] */ long id);
        
        END_INTERFACE
    } _ControlVtbl;

    interface _Control
    {
        CONST_VTBL struct _ControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Control_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Control_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Control_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Control_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Control_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Control_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Control_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Control_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define _Control_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define _Control_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _Control_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Control_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define _Control_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define _Control_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define _Control_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define _Control_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define _Control_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define _Control_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define _Control_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define _Control_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define _Control_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define _Control_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define _Control_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define _Control_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define _Control_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define _Control_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define _Control_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define _Control_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define _Control_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _Control_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define _Control_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define _Control_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define _Control_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define _Control_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Control_INTERFACE_DEFINED__ */


#ifndef __Engine_INTERFACE_DEFINED__
#define __Engine_INTERFACE_DEFINED__

/* interface Engine */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Engine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("060585ce-18df-4131-9138-4cec7a664b43")
    Engine : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *param) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Manufacturer( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Product( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Speaker( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EngineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Engine * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Engine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Engine * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Engine * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Engine * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Engine * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Engine * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Engine * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Engine * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            Engine * This,
            /* [retval][out] */ BSTR *param);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Manufacturer )( 
            Engine * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Product )( 
            Engine * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Speaker )( 
            Engine * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } EngineVtbl;

    interface Engine
    {
        CONST_VTBL struct EngineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Engine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Engine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Engine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Engine_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Engine_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Engine_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Engine_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Engine_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Engine_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Engine_get_Description(This,param)	\
    ( (This)->lpVtbl -> get_Description(This,param) ) 

#define Engine_get_Manufacturer(This,prop)	\
    ( (This)->lpVtbl -> get_Manufacturer(This,prop) ) 

#define Engine_get_Product(This,prop)	\
    ( (This)->lpVtbl -> get_Product(This,prop) ) 

#define Engine_get_Speaker(This,prop)	\
    ( (This)->lpVtbl -> get_Speaker(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Engine_INTERFACE_DEFINED__ */


#ifndef ___Synthesizers_INTERFACE_DEFINED__
#define ___Synthesizers_INTERFACE_DEFINED__

/* interface _Synthesizers */
/* [object][helpcontext][version][hidden][dual][uuid] */ 


EXTERN_C const IID IID__Synthesizers;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("34da2e1f-7a7c-47a9-894d-f3e8673b00d0")
    _Synthesizers : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ _Synthesizer **synthsizer) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ _Synthesizer **synthsizer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _SynthesizersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Synthesizers * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Synthesizers * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Synthesizers * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Synthesizers * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Synthesizers * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Synthesizers * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Synthesizers * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Synthesizers * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Synthesizers * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            _Synthesizers * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            _Synthesizers * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            _Synthesizers * This,
            /* [retval][out] */ _Synthesizer **synthsizer);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            _Synthesizers * This,
            /* [in] */ long index,
            /* [retval][out] */ _Synthesizer **synthsizer);
        
        END_INTERFACE
    } _SynthesizersVtbl;

    interface _Synthesizers
    {
        CONST_VTBL struct _SynthesizersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Synthesizers_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Synthesizers_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Synthesizers_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Synthesizers_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Synthesizers_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Synthesizers_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Synthesizers_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Synthesizers_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _Synthesizers_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Synthesizers_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define _Synthesizers_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define _Synthesizers_get_Active(This,synthsizer)	\
    ( (This)->lpVtbl -> get_Active(This,synthsizer) ) 

#define _Synthesizers_Item(This,index,synthsizer)	\
    ( (This)->lpVtbl -> Item(This,index,synthsizer) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Synthesizers_INTERFACE_DEFINED__ */


#ifndef __Engines_INTERFACE_DEFINED__
#define __Engines_INTERFACE_DEFINED__

/* interface Engines */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Engines;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a153f258-36b0-4d4a-abc8-70cacd323f65")
    Engines : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ Engine **engine) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EnginesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Engines * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Engines * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Engines * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Engines * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Engines * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Engines * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Engines * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Engines * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Engines * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Engines * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Engines * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Engines * This,
            /* [in] */ long index,
            /* [retval][out] */ Engine **engine);
        
        END_INTERFACE
    } EnginesVtbl;

    interface Engines
    {
        CONST_VTBL struct EnginesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Engines_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Engines_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Engines_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Engines_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Engines_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Engines_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Engines_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Engines_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Engines_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Engines_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define Engines_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define Engines_Item(This,index,engine)	\
    ( (This)->lpVtbl -> Item(This,index,engine) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Engines_INTERFACE_DEFINED__ */


#ifndef __HyperactiveWindowCommands_INTERFACE_DEFINED__
#define __HyperactiveWindowCommands_INTERFACE_DEFINED__

/* interface HyperactiveWindowCommands */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_HyperactiveWindowCommands;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7ef5ac30-72b1-46bb-b16e-b728e83e7c04")
    HyperactiveWindowCommands : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ HyperactiveWindowCommand **hyperCommand) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HyperactiveWindowCommandsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HyperactiveWindowCommands * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HyperactiveWindowCommands * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HyperactiveWindowCommands * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HyperactiveWindowCommands * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HyperactiveWindowCommands * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HyperactiveWindowCommands * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HyperactiveWindowCommands * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HyperactiveWindowCommands * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HyperactiveWindowCommands * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            HyperactiveWindowCommands * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            HyperactiveWindowCommands * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            HyperactiveWindowCommands * This,
            /* [in] */ long index,
            /* [retval][out] */ HyperactiveWindowCommand **hyperCommand);
        
        END_INTERFACE
    } HyperactiveWindowCommandsVtbl;

    interface HyperactiveWindowCommands
    {
        CONST_VTBL struct HyperactiveWindowCommandsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HyperactiveWindowCommands_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HyperactiveWindowCommands_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HyperactiveWindowCommands_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HyperactiveWindowCommands_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HyperactiveWindowCommands_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HyperactiveWindowCommands_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HyperactiveWindowCommands_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HyperactiveWindowCommands_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define HyperactiveWindowCommands_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define HyperactiveWindowCommands_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define HyperactiveWindowCommands_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define HyperactiveWindowCommands_Item(This,index,hyperCommand)	\
    ( (This)->lpVtbl -> Item(This,index,hyperCommand) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HyperactiveWindowCommands_INTERFACE_DEFINED__ */


#ifndef __TriggerSearchAttribute_INTERFACE_DEFINED__
#define __TriggerSearchAttribute_INTERFACE_DEFINED__

/* interface TriggerSearchAttribute */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_TriggerSearchAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("250971b8-cb84-46f3-8d24-641768707de6")
    TriggerSearchAttribute : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ForegroundColor( 
            /* [retval][out] */ Color **color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ForegroundColor( 
            /* [in] */ Color *color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundColor( 
            /* [retval][out] */ Color **color) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundColor( 
            /* [in] */ Color *color) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TriggerSearchAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TriggerSearchAttribute * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TriggerSearchAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TriggerSearchAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TriggerSearchAttribute * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TriggerSearchAttribute * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TriggerSearchAttribute * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TriggerSearchAttribute * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TriggerSearchAttribute * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TriggerSearchAttribute * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundColor )( 
            TriggerSearchAttribute * This,
            /* [retval][out] */ Color **color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundColor )( 
            TriggerSearchAttribute * This,
            /* [in] */ Color *color);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundColor )( 
            TriggerSearchAttribute * This,
            /* [retval][out] */ Color **color);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundColor )( 
            TriggerSearchAttribute * This,
            /* [in] */ Color *color);
        
        END_INTERFACE
    } TriggerSearchAttributeVtbl;

    interface TriggerSearchAttribute
    {
        CONST_VTBL struct TriggerSearchAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TriggerSearchAttribute_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TriggerSearchAttribute_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TriggerSearchAttribute_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TriggerSearchAttribute_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TriggerSearchAttribute_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TriggerSearchAttribute_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TriggerSearchAttribute_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TriggerSearchAttribute_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define TriggerSearchAttribute_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define TriggerSearchAttribute_get_ForegroundColor(This,color)	\
    ( (This)->lpVtbl -> get_ForegroundColor(This,color) ) 

#define TriggerSearchAttribute_put_ForegroundColor(This,color)	\
    ( (This)->lpVtbl -> put_ForegroundColor(This,color) ) 

#define TriggerSearchAttribute_get_BackgroundColor(This,color)	\
    ( (This)->lpVtbl -> get_BackgroundColor(This,color) ) 

#define TriggerSearchAttribute_put_BackgroundColor(This,color)	\
    ( (This)->lpVtbl -> put_BackgroundColor(This,color) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TriggerSearchAttribute_INTERFACE_DEFINED__ */


#ifndef __HyperactiveWindowCommand_INTERFACE_DEFINED__
#define __HyperactiveWindowCommand_INTERFACE_DEFINED__

/* interface HyperactiveWindowCommand */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_HyperactiveWindowCommand;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9bd2bd33-df7e-44ac-8cf8-bbae0bd47179")
    HyperactiveWindowCommand : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Command( 
            /* [retval][out] */ HyperWindowCommand *command) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Command( 
            /* [in] */ HyperWindowCommand command) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommandInformation( 
            /* [retval][out] */ VARIANT *commandInfo) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CommandInformation( 
            /* [in] */ VARIANT commandInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HyperactiveWindowCommandVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HyperactiveWindowCommand * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HyperactiveWindowCommand * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HyperactiveWindowCommand * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HyperactiveWindowCommand * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HyperactiveWindowCommand * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HyperactiveWindowCommand * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HyperactiveWindowCommand * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HyperactiveWindowCommand * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HyperactiveWindowCommand * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Command )( 
            HyperactiveWindowCommand * This,
            /* [retval][out] */ HyperWindowCommand *command);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Command )( 
            HyperactiveWindowCommand * This,
            /* [in] */ HyperWindowCommand command);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommandInformation )( 
            HyperactiveWindowCommand * This,
            /* [retval][out] */ VARIANT *commandInfo);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CommandInformation )( 
            HyperactiveWindowCommand * This,
            /* [in] */ VARIANT commandInfo);
        
        END_INTERFACE
    } HyperactiveWindowCommandVtbl;

    interface HyperactiveWindowCommand
    {
        CONST_VTBL struct HyperactiveWindowCommandVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HyperactiveWindowCommand_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HyperactiveWindowCommand_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HyperactiveWindowCommand_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HyperactiveWindowCommand_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HyperactiveWindowCommand_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HyperactiveWindowCommand_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HyperactiveWindowCommand_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HyperactiveWindowCommand_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define HyperactiveWindowCommand_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define HyperactiveWindowCommand_get_Command(This,command)	\
    ( (This)->lpVtbl -> get_Command(This,command) ) 

#define HyperactiveWindowCommand_put_Command(This,command)	\
    ( (This)->lpVtbl -> put_Command(This,command) ) 

#define HyperactiveWindowCommand_get_CommandInformation(This,commandInfo)	\
    ( (This)->lpVtbl -> get_CommandInformation(This,commandInfo) ) 

#define HyperactiveWindowCommand_put_CommandInformation(This,commandInfo)	\
    ( (This)->lpVtbl -> put_CommandInformation(This,commandInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HyperactiveWindowCommand_INTERFACE_DEFINED__ */


#ifndef __IniFile_INTERFACE_DEFINED__
#define __IniFile_INTERFACE_DEFINED__

/* interface IniFile */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_IniFile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3706b606-932a-4c9d-adbd-9b93c7be4e8d")
    IniFile : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [in] */ BSTR section,
            /* [in] */ BSTR key,
            /* [optional][in] */ VARIANT defVal,
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR section,
            /* [in] */ BSTR key,
            /* [optional][in] */ VARIANT defVal,
            /* [in] */ BSTR value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Number( 
            /* [in] */ BSTR section,
            /* [in] */ BSTR key,
            /* [optional][in] */ VARIANT defVal,
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Number( 
            /* [in] */ BSTR section,
            /* [in] */ BSTR key,
            /* [optional][in] */ VARIANT defVal,
            /* [in] */ long value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteSection( 
            /* [in] */ BSTR section) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteEntry( 
            /* [in] */ BSTR section,
            /* [in] */ BSTR key) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetSectionKeys( 
            /* [in] */ BSTR section,
            /* [retval][out] */ BSTR *sections) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetSectionNames( 
            /* [retval][out] */ BSTR *names) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IniFileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IniFile * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IniFile * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IniFile * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IniFile * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IniFile * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IniFile * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IniFile * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            IniFile * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            IniFile * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            IniFile * This,
            /* [in] */ BSTR section,
            /* [in] */ BSTR key,
            /* [optional][in] */ VARIANT defVal,
            /* [retval][out] */ BSTR *value);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            IniFile * This,
            /* [in] */ BSTR section,
            /* [in] */ BSTR key,
            /* [optional][in] */ VARIANT defVal,
            /* [in] */ BSTR value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Number )( 
            IniFile * This,
            /* [in] */ BSTR section,
            /* [in] */ BSTR key,
            /* [optional][in] */ VARIANT defVal,
            /* [retval][out] */ long *value);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Number )( 
            IniFile * This,
            /* [in] */ BSTR section,
            /* [in] */ BSTR key,
            /* [optional][in] */ VARIANT defVal,
            /* [in] */ long value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteSection )( 
            IniFile * This,
            /* [in] */ BSTR section);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteEntry )( 
            IniFile * This,
            /* [in] */ BSTR section,
            /* [in] */ BSTR key);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetSectionKeys )( 
            IniFile * This,
            /* [in] */ BSTR section,
            /* [retval][out] */ BSTR *sections);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetSectionNames )( 
            IniFile * This,
            /* [retval][out] */ BSTR *names);
        
        END_INTERFACE
    } IniFileVtbl;

    interface IniFile
    {
        CONST_VTBL struct IniFileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IniFile_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IniFile_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IniFile_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IniFile_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IniFile_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IniFile_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IniFile_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IniFile_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define IniFile_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define IniFile_get_Text(This,section,key,defVal,value)	\
    ( (This)->lpVtbl -> get_Text(This,section,key,defVal,value) ) 

#define IniFile_put_Text(This,section,key,defVal,value)	\
    ( (This)->lpVtbl -> put_Text(This,section,key,defVal,value) ) 

#define IniFile_get_Number(This,section,key,defVal,value)	\
    ( (This)->lpVtbl -> get_Number(This,section,key,defVal,value) ) 

#define IniFile_put_Number(This,section,key,defVal,value)	\
    ( (This)->lpVtbl -> put_Number(This,section,key,defVal,value) ) 

#define IniFile_DeleteSection(This,section)	\
    ( (This)->lpVtbl -> DeleteSection(This,section) ) 

#define IniFile_DeleteEntry(This,section,key)	\
    ( (This)->lpVtbl -> DeleteEntry(This,section,key) ) 

#define IniFile_GetSectionKeys(This,section,sections)	\
    ( (This)->lpVtbl -> GetSectionKeys(This,section,sections) ) 

#define IniFile_GetSectionNames(This,names)	\
    ( (This)->lpVtbl -> GetSectionNames(This,names) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IniFile_INTERFACE_DEFINED__ */


#ifndef ___Speech_INTERFACE_DEFINED__
#define ___Speech_INTERFACE_DEFINED__

/* interface _Speech */
/* [object][helpcontext][version][hidden][dual][uuid] */ 


EXTERN_C const IID IID__Speech;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6344f01-a798-46fe-8736-f321a69f71e6")
    _Speech : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ApplicationSpeakAll( 
            /* [in] */ _Window *overlap,
            /* [retval][out] */ VARIANT_BOOL *speakall) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ApplicationSpeakAll( 
            /* [in] */ _Window *overlap,
            /* [in] */ VARIANT_BOOL speakall) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ApplicationSpeech( 
            /* [in] */ _Window *overlap,
            /* [retval][out] */ VARIANT_BOOL *speak) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ApplicationSpeech( 
            /* [in] */ _Window *overlap,
            /* [in] */ VARIANT_BOOL speak) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_GlobalSpeech( 
            /* [retval][out] */ VARIANT_BOOL *speak) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_GlobalSpeech( 
            /* [in] */ VARIANT_BOOL speak) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Silence( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Speak( 
            /* [in] */ BSTR Text,
            /* [optional][in] */ VARIANT voice) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharacterName( 
            /* [in] */ VARIANT vCharacters,
            /* [retval][out] */ BSTR *names) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Phonetic( 
            /* [in] */ VARIANT vCharacters,
            /* [retval][out] */ BSTR *phonetics) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Spell( 
            /* [in] */ VARIANT vCharacters,
            /* [optional][in] */ VARIANT voice,
            /* [optional][in] */ VARIANT phonetic) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _SpeechVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Speech * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Speech * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Speech * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Speech * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Speech * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Speech * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Speech * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Speech * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Speech * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ApplicationSpeakAll )( 
            _Speech * This,
            /* [in] */ _Window *overlap,
            /* [retval][out] */ VARIANT_BOOL *speakall);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ApplicationSpeakAll )( 
            _Speech * This,
            /* [in] */ _Window *overlap,
            /* [in] */ VARIANT_BOOL speakall);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ApplicationSpeech )( 
            _Speech * This,
            /* [in] */ _Window *overlap,
            /* [retval][out] */ VARIANT_BOOL *speak);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ApplicationSpeech )( 
            _Speech * This,
            /* [in] */ _Window *overlap,
            /* [in] */ VARIANT_BOOL speak);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GlobalSpeech )( 
            _Speech * This,
            /* [retval][out] */ VARIANT_BOOL *speak);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GlobalSpeech )( 
            _Speech * This,
            /* [in] */ VARIANT_BOOL speak);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Silence )( 
            _Speech * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Speak )( 
            _Speech * This,
            /* [in] */ BSTR Text,
            /* [optional][in] */ VARIANT voice);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharacterName )( 
            _Speech * This,
            /* [in] */ VARIANT vCharacters,
            /* [retval][out] */ BSTR *names);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Phonetic )( 
            _Speech * This,
            /* [in] */ VARIANT vCharacters,
            /* [retval][out] */ BSTR *phonetics);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Spell )( 
            _Speech * This,
            /* [in] */ VARIANT vCharacters,
            /* [optional][in] */ VARIANT voice,
            /* [optional][in] */ VARIANT phonetic);
        
        END_INTERFACE
    } _SpeechVtbl;

    interface _Speech
    {
        CONST_VTBL struct _SpeechVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Speech_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Speech_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Speech_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Speech_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Speech_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Speech_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Speech_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Speech_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _Speech_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Speech_get_ApplicationSpeakAll(This,overlap,speakall)	\
    ( (This)->lpVtbl -> get_ApplicationSpeakAll(This,overlap,speakall) ) 

#define _Speech_put_ApplicationSpeakAll(This,overlap,speakall)	\
    ( (This)->lpVtbl -> put_ApplicationSpeakAll(This,overlap,speakall) ) 

#define _Speech_get_ApplicationSpeech(This,overlap,speak)	\
    ( (This)->lpVtbl -> get_ApplicationSpeech(This,overlap,speak) ) 

#define _Speech_put_ApplicationSpeech(This,overlap,speak)	\
    ( (This)->lpVtbl -> put_ApplicationSpeech(This,overlap,speak) ) 

#define _Speech_get_GlobalSpeech(This,speak)	\
    ( (This)->lpVtbl -> get_GlobalSpeech(This,speak) ) 

#define _Speech_put_GlobalSpeech(This,speak)	\
    ( (This)->lpVtbl -> put_GlobalSpeech(This,speak) ) 

#define _Speech_Silence(This)	\
    ( (This)->lpVtbl -> Silence(This) ) 

#define _Speech_Speak(This,Text,voice)	\
    ( (This)->lpVtbl -> Speak(This,Text,voice) ) 

#define _Speech_CharacterName(This,vCharacters,names)	\
    ( (This)->lpVtbl -> CharacterName(This,vCharacters,names) ) 

#define _Speech_Phonetic(This,vCharacters,phonetics)	\
    ( (This)->lpVtbl -> Phonetic(This,vCharacters,phonetics) ) 

#define _Speech_Spell(This,vCharacters,voice,phonetic)	\
    ( (This)->lpVtbl -> Spell(This,vCharacters,voice,phonetic) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Speech_INTERFACE_DEFINED__ */


#ifndef __Accessible_INTERFACE_DEFINED__
#define __Accessible_INTERFACE_DEFINED__

/* interface Accessible */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Accessible;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1291afc2-ad5a-4cc2-b763-a440ec9d8b18")
    Accessible : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ BSTR value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Down( 
            /* [retval][out] */ Accessible **down) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Up( 
            /* [retval][out] */ Accessible **up) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ Accessible **left) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Right( 
            /* [retval][out] */ Accessible **right) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ Accessible **next) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ Accessible **previous) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FirstChild( 
            /* [retval][out] */ Accessible **firstChild) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LastChild( 
            /* [retval][out] */ Accessible **lastChild) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultAction( 
            /* [retval][out] */ BSTR *defaultAction) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *description) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Help( 
            /* [retval][out] */ BSTR *help) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeyboardShortcut( 
            /* [retval][out] */ BSTR *keyboardShortcut) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focus( 
            /* [retval][out] */ Accessible **focus) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ Accessibles **selection) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Role( 
            /* [retval][out] */ AccessibleRole **role) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ AccessibleState **state) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ ScreenRectangle **location) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ Accessibles **children) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IAccessible( 
            /* [retval][out] */ IDispatch **iacc) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ChildID( 
            /* [retval][out] */ VARIANT *childID) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EventWindow( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DoDefaultAction( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE HitTest( 
            /* [in] */ ScreenPoint *point,
            /* [retval][out] */ Accessible **child) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [in] */ AccessibleSelection type) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SimulateEvent( 
            /* [in] */ MSAAEventID id,
            /* [optional][in] */ VARIANT values) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Prefetch( 
            /* [in] */ AccessibleProperty values) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AccessibleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Accessible * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Accessible * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Accessible * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Accessible * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Accessible * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Accessible * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Accessible * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            Accessible * This,
            /* [retval][out] */ BSTR *value);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            Accessible * This,
            /* [in] */ BSTR value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Accessible * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Accessible * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Down )( 
            Accessible * This,
            /* [retval][out] */ Accessible **down);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Up )( 
            Accessible * This,
            /* [retval][out] */ Accessible **up);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Accessible * This,
            /* [retval][out] */ Accessible **left);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Right )( 
            Accessible * This,
            /* [retval][out] */ Accessible **right);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            Accessible * This,
            /* [retval][out] */ Accessible **next);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            Accessible * This,
            /* [retval][out] */ Accessible **previous);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstChild )( 
            Accessible * This,
            /* [retval][out] */ Accessible **firstChild);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LastChild )( 
            Accessible * This,
            /* [retval][out] */ Accessible **lastChild);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultAction )( 
            Accessible * This,
            /* [retval][out] */ BSTR *defaultAction);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            Accessible * This,
            /* [retval][out] */ BSTR *description);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Help )( 
            Accessible * This,
            /* [retval][out] */ BSTR *help);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Accessible * This,
            /* [retval][out] */ BSTR *name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeyboardShortcut )( 
            Accessible * This,
            /* [retval][out] */ BSTR *keyboardShortcut);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focus )( 
            Accessible * This,
            /* [retval][out] */ Accessible **focus);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            Accessible * This,
            /* [retval][out] */ Accessibles **selection);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Role )( 
            Accessible * This,
            /* [retval][out] */ AccessibleRole **role);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            Accessible * This,
            /* [retval][out] */ AccessibleState **state);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            Accessible * This,
            /* [retval][out] */ ScreenRectangle **location);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            Accessible * This,
            /* [retval][out] */ Accessibles **children);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            Accessible * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IAccessible )( 
            Accessible * This,
            /* [retval][out] */ IDispatch **iacc);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ChildID )( 
            Accessible * This,
            /* [retval][out] */ VARIANT *childID);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EventWindow )( 
            Accessible * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DoDefaultAction )( 
            Accessible * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *HitTest )( 
            Accessible * This,
            /* [in] */ ScreenPoint *point,
            /* [retval][out] */ Accessible **child);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Accessible * This,
            /* [in] */ AccessibleSelection type);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SimulateEvent )( 
            Accessible * This,
            /* [in] */ MSAAEventID id,
            /* [optional][in] */ VARIANT values);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Prefetch )( 
            Accessible * This,
            /* [in] */ AccessibleProperty values);
        
        END_INTERFACE
    } AccessibleVtbl;

    interface Accessible
    {
        CONST_VTBL struct AccessibleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Accessible_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Accessible_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Accessible_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Accessible_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Accessible_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Accessible_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Accessible_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Accessible_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#define Accessible_put_Value(This,value)	\
    ( (This)->lpVtbl -> put_Value(This,value) ) 

#define Accessible_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Accessible_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Accessible_get_Down(This,down)	\
    ( (This)->lpVtbl -> get_Down(This,down) ) 

#define Accessible_get_Up(This,up)	\
    ( (This)->lpVtbl -> get_Up(This,up) ) 

#define Accessible_get_Left(This,left)	\
    ( (This)->lpVtbl -> get_Left(This,left) ) 

#define Accessible_get_Right(This,right)	\
    ( (This)->lpVtbl -> get_Right(This,right) ) 

#define Accessible_get_Next(This,next)	\
    ( (This)->lpVtbl -> get_Next(This,next) ) 

#define Accessible_get_Previous(This,previous)	\
    ( (This)->lpVtbl -> get_Previous(This,previous) ) 

#define Accessible_get_FirstChild(This,firstChild)	\
    ( (This)->lpVtbl -> get_FirstChild(This,firstChild) ) 

#define Accessible_get_LastChild(This,lastChild)	\
    ( (This)->lpVtbl -> get_LastChild(This,lastChild) ) 

#define Accessible_get_DefaultAction(This,defaultAction)	\
    ( (This)->lpVtbl -> get_DefaultAction(This,defaultAction) ) 

#define Accessible_get_Description(This,description)	\
    ( (This)->lpVtbl -> get_Description(This,description) ) 

#define Accessible_get_Help(This,help)	\
    ( (This)->lpVtbl -> get_Help(This,help) ) 

#define Accessible_get_Name(This,name)	\
    ( (This)->lpVtbl -> get_Name(This,name) ) 

#define Accessible_get_KeyboardShortcut(This,keyboardShortcut)	\
    ( (This)->lpVtbl -> get_KeyboardShortcut(This,keyboardShortcut) ) 

#define Accessible_get_Focus(This,focus)	\
    ( (This)->lpVtbl -> get_Focus(This,focus) ) 

#define Accessible_get_Selection(This,selection)	\
    ( (This)->lpVtbl -> get_Selection(This,selection) ) 

#define Accessible_get_Role(This,role)	\
    ( (This)->lpVtbl -> get_Role(This,role) ) 

#define Accessible_get_State(This,state)	\
    ( (This)->lpVtbl -> get_State(This,state) ) 

#define Accessible_get_Location(This,location)	\
    ( (This)->lpVtbl -> get_Location(This,location) ) 

#define Accessible_get_Children(This,children)	\
    ( (This)->lpVtbl -> get_Children(This,children) ) 

#define Accessible_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define Accessible_get_IAccessible(This,iacc)	\
    ( (This)->lpVtbl -> get_IAccessible(This,iacc) ) 

#define Accessible_get_ChildID(This,childID)	\
    ( (This)->lpVtbl -> get_ChildID(This,childID) ) 

#define Accessible_get_EventWindow(This,window)	\
    ( (This)->lpVtbl -> get_EventWindow(This,window) ) 

#define Accessible_DoDefaultAction(This)	\
    ( (This)->lpVtbl -> DoDefaultAction(This) ) 

#define Accessible_HitTest(This,point,child)	\
    ( (This)->lpVtbl -> HitTest(This,point,child) ) 

#define Accessible_Select(This,type)	\
    ( (This)->lpVtbl -> Select(This,type) ) 

#define Accessible_SimulateEvent(This,id,values)	\
    ( (This)->lpVtbl -> SimulateEvent(This,id,values) ) 

#define Accessible_Prefetch(This,values)	\
    ( (This)->lpVtbl -> Prefetch(This,values) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Accessible_INTERFACE_DEFINED__ */


#ifndef __AccessibleRole_INTERFACE_DEFINED__
#define __AccessibleRole_INTERFACE_DEFINED__

/* interface AccessibleRole */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_AccessibleRole;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("67c68bdd-7ca8-4877-87f1-d137a367eb4b")
    AccessibleRole : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ AccessibleRoleEnum *role) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AccessibleRoleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AccessibleRole * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AccessibleRole * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AccessibleRole * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AccessibleRole * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AccessibleRole * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AccessibleRole * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AccessibleRole * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            AccessibleRole * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AccessibleRole * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AccessibleRole * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            AccessibleRole * This,
            /* [retval][out] */ AccessibleRoleEnum *role);
        
        END_INTERFACE
    } AccessibleRoleVtbl;

    interface AccessibleRole
    {
        CONST_VTBL struct AccessibleRoleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AccessibleRole_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AccessibleRole_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AccessibleRole_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AccessibleRole_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AccessibleRole_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AccessibleRole_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AccessibleRole_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AccessibleRole_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define AccessibleRole_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define AccessibleRole_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define AccessibleRole_get_Value(This,role)	\
    ( (This)->lpVtbl -> get_Value(This,role) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AccessibleRole_INTERFACE_DEFINED__ */


#ifndef __AccessibleState_INTERFACE_DEFINED__
#define __AccessibleState_INTERFACE_DEFINED__

/* interface AccessibleState */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_AccessibleState;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0cf3cfce-234a-4ad7-a012-bc1efadbaae0")
    AccessibleState : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ AccessibleStateEnum *state) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Animated( 
            /* [retval][out] */ VARIANT_BOOL *animated) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Busy( 
            /* [retval][out] */ VARIANT_BOOL *animated) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Checked( 
            /* [retval][out] */ VARIANT_BOOL *checked) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Collapsed( 
            /* [retval][out] */ VARIANT_BOOL *collapsed) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Default( 
            /* [retval][out] */ VARIANT_BOOL *defaultButton) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Expanded( 
            /* [retval][out] */ VARIANT_BOOL *expanded) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExtendedSelectable( 
            /* [retval][out] */ VARIANT_BOOL *extendedSelectable) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focusable( 
            /* [retval][out] */ VARIANT_BOOL *focusable) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ VARIANT_BOOL *focused) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasPopup( 
            /* [retval][out] */ VARIANT_BOOL *hasPopup) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HotTracked( 
            /* [retval][out] */ VARIANT_BOOL *hotTracked) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Invisible( 
            /* [retval][out] */ VARIANT_BOOL *invisible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Linked( 
            /* [retval][out] */ VARIANT_BOOL *linked) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Marqueed( 
            /* [retval][out] */ VARIANT_BOOL *marqueed) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Mixed( 
            /* [retval][out] */ VARIANT_BOOL *mixed) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Moveable( 
            /* [retval][out] */ VARIANT_BOOL *moveable) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MultiSelectable( 
            /* [retval][out] */ VARIANT_BOOL *multiSelectable) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Offscreen( 
            /* [retval][out] */ VARIANT_BOOL *offscreen) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Pressed( 
            /* [retval][out] */ VARIANT_BOOL *pressed) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Protected( 
            /* [retval][out] */ VARIANT_BOOL *protectedEdit) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ VARIANT_BOOL *readOnly) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selectable( 
            /* [retval][out] */ VARIANT_BOOL *selectable) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selected( 
            /* [retval][out] */ VARIANT_BOOL *selected) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelfVoicing( 
            /* [retval][out] */ VARIANT_BOOL *selfVoicing) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Sizeable( 
            /* [retval][out] */ VARIANT_BOOL *sizeable) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Traversed( 
            /* [retval][out] */ VARIANT_BOOL *traversed) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Unavailable( 
            /* [retval][out] */ VARIANT_BOOL *unavailable) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AccessibleStateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AccessibleState * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AccessibleState * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AccessibleState * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AccessibleState * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AccessibleState * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AccessibleState * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AccessibleState * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            AccessibleState * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AccessibleState * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AccessibleState * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            AccessibleState * This,
            /* [retval][out] */ AccessibleStateEnum *state);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Animated )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *animated);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Busy )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *animated);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Checked )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *checked);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Collapsed )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *collapsed);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Default )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *defaultButton);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Expanded )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *expanded);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendedSelectable )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *extendedSelectable);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focusable )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *focusable);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasPopup )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *hasPopup);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HotTracked )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *hotTracked);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Invisible )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *invisible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Linked )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *linked);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Marqueed )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *marqueed);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mixed )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *mixed);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Moveable )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *moveable);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MultiSelectable )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *multiSelectable);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Offscreen )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *offscreen);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pressed )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *pressed);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Protected )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *protectedEdit);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *readOnly);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selectable )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *selectable);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selected )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *selected);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelfVoicing )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *selfVoicing);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sizeable )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *sizeable);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Traversed )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *traversed);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Unavailable )( 
            AccessibleState * This,
            /* [retval][out] */ VARIANT_BOOL *unavailable);
        
        END_INTERFACE
    } AccessibleStateVtbl;

    interface AccessibleState
    {
        CONST_VTBL struct AccessibleStateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AccessibleState_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AccessibleState_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AccessibleState_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AccessibleState_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AccessibleState_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AccessibleState_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AccessibleState_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AccessibleState_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define AccessibleState_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define AccessibleState_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define AccessibleState_get_Value(This,state)	\
    ( (This)->lpVtbl -> get_Value(This,state) ) 

#define AccessibleState_get_Animated(This,animated)	\
    ( (This)->lpVtbl -> get_Animated(This,animated) ) 

#define AccessibleState_get_Busy(This,animated)	\
    ( (This)->lpVtbl -> get_Busy(This,animated) ) 

#define AccessibleState_get_Checked(This,checked)	\
    ( (This)->lpVtbl -> get_Checked(This,checked) ) 

#define AccessibleState_get_Collapsed(This,collapsed)	\
    ( (This)->lpVtbl -> get_Collapsed(This,collapsed) ) 

#define AccessibleState_get_Default(This,defaultButton)	\
    ( (This)->lpVtbl -> get_Default(This,defaultButton) ) 

#define AccessibleState_get_Expanded(This,expanded)	\
    ( (This)->lpVtbl -> get_Expanded(This,expanded) ) 

#define AccessibleState_get_ExtendedSelectable(This,extendedSelectable)	\
    ( (This)->lpVtbl -> get_ExtendedSelectable(This,extendedSelectable) ) 

#define AccessibleState_get_Focusable(This,focusable)	\
    ( (This)->lpVtbl -> get_Focusable(This,focusable) ) 

#define AccessibleState_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define AccessibleState_get_HasPopup(This,hasPopup)	\
    ( (This)->lpVtbl -> get_HasPopup(This,hasPopup) ) 

#define AccessibleState_get_HotTracked(This,hotTracked)	\
    ( (This)->lpVtbl -> get_HotTracked(This,hotTracked) ) 

#define AccessibleState_get_Invisible(This,invisible)	\
    ( (This)->lpVtbl -> get_Invisible(This,invisible) ) 

#define AccessibleState_get_Linked(This,linked)	\
    ( (This)->lpVtbl -> get_Linked(This,linked) ) 

#define AccessibleState_get_Marqueed(This,marqueed)	\
    ( (This)->lpVtbl -> get_Marqueed(This,marqueed) ) 

#define AccessibleState_get_Mixed(This,mixed)	\
    ( (This)->lpVtbl -> get_Mixed(This,mixed) ) 

#define AccessibleState_get_Moveable(This,moveable)	\
    ( (This)->lpVtbl -> get_Moveable(This,moveable) ) 

#define AccessibleState_get_MultiSelectable(This,multiSelectable)	\
    ( (This)->lpVtbl -> get_MultiSelectable(This,multiSelectable) ) 

#define AccessibleState_get_Offscreen(This,offscreen)	\
    ( (This)->lpVtbl -> get_Offscreen(This,offscreen) ) 

#define AccessibleState_get_Pressed(This,pressed)	\
    ( (This)->lpVtbl -> get_Pressed(This,pressed) ) 

#define AccessibleState_get_Protected(This,protectedEdit)	\
    ( (This)->lpVtbl -> get_Protected(This,protectedEdit) ) 

#define AccessibleState_get_ReadOnly(This,readOnly)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,readOnly) ) 

#define AccessibleState_get_Selectable(This,selectable)	\
    ( (This)->lpVtbl -> get_Selectable(This,selectable) ) 

#define AccessibleState_get_Selected(This,selected)	\
    ( (This)->lpVtbl -> get_Selected(This,selected) ) 

#define AccessibleState_get_SelfVoicing(This,selfVoicing)	\
    ( (This)->lpVtbl -> get_SelfVoicing(This,selfVoicing) ) 

#define AccessibleState_get_Sizeable(This,sizeable)	\
    ( (This)->lpVtbl -> get_Sizeable(This,sizeable) ) 

#define AccessibleState_get_Traversed(This,traversed)	\
    ( (This)->lpVtbl -> get_Traversed(This,traversed) ) 

#define AccessibleState_get_Unavailable(This,unavailable)	\
    ( (This)->lpVtbl -> get_Unavailable(This,unavailable) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AccessibleState_INTERFACE_DEFINED__ */


#ifndef __Accessibles_INTERFACE_DEFINED__
#define __Accessibles_INTERFACE_DEFINED__

/* interface Accessibles */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Accessibles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50660384-fd5c-4d0e-9aaf-720cd7b0e278")
    Accessibles : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ Accessible **accessible) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FilterByRoleAndState( 
            /* [optional][in] */ VARIANT FilterRole,
            /* [optional][in] */ VARIANT FilterState,
            /* [optional][in] */ VARIANT MatchStateExactly,
            /* [retval][out] */ Accessibles **accessibles) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AccessiblesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Accessibles * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Accessibles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Accessibles * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Accessibles * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Accessibles * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Accessibles * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Accessibles * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Accessibles * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Accessibles * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Accessibles * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Accessibles * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Accessibles * This,
            /* [in] */ long index,
            /* [retval][out] */ Accessible **accessible);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FilterByRoleAndState )( 
            Accessibles * This,
            /* [optional][in] */ VARIANT FilterRole,
            /* [optional][in] */ VARIANT FilterState,
            /* [optional][in] */ VARIANT MatchStateExactly,
            /* [retval][out] */ Accessibles **accessibles);
        
        END_INTERFACE
    } AccessiblesVtbl;

    interface Accessibles
    {
        CONST_VTBL struct AccessiblesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Accessibles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Accessibles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Accessibles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Accessibles_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Accessibles_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Accessibles_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Accessibles_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Accessibles_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define Accessibles_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Accessibles_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Accessibles_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define Accessibles_Item(This,index,accessible)	\
    ( (This)->lpVtbl -> Item(This,index,accessible) ) 

#define Accessibles_FilterByRoleAndState(This,FilterRole,FilterState,MatchStateExactly,accessibles)	\
    ( (This)->lpVtbl -> FilterByRoleAndState(This,FilterRole,FilterState,MatchStateExactly,accessibles) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Accessibles_INTERFACE_DEFINED__ */


#ifndef ___MSAAEvents_INTERFACE_DEFINED__
#define ___MSAAEvents_INTERFACE_DEFINED__

/* interface _MSAAEvents */
/* [object][helpcontext][hidden][version][dual][uuid] */ 


EXTERN_C const IID IID__MSAAEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("27ee6a61-246b-45cb-87c0-8a64e577445a")
    _MSAAEvents : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Process( 
            /* [retval][out] */ Process **process) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Process( 
            /* [in] */ Process *process) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Window( 
            /* [in] */ _Window *window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Scope( 
            /* [retval][out] */ WindowFilterScope *scope) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Scope( 
            /* [in] */ WindowFilterScope scope) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Role( 
            /* [retval][out] */ AccessibleRoleEnum *role) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Role( 
            /* [in] */ AccessibleRoleEnum role) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WatchEvent( 
            /* [in] */ MSAAEventID id) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE BlockEvent( 
            /* [in] */ MSAAEventID id,
            /* [optional][in] */ VARIANT process,
            /* [retval][out] */ MSAAEventBlock **block) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _MSAAEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _MSAAEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _MSAAEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _MSAAEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _MSAAEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _MSAAEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _MSAAEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _MSAAEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _MSAAEvents * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _MSAAEvents * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Process )( 
            _MSAAEvents * This,
            /* [retval][out] */ Process **process);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Process )( 
            _MSAAEvents * This,
            /* [in] */ Process *process);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _MSAAEvents * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Window )( 
            _MSAAEvents * This,
            /* [in] */ _Window *window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scope )( 
            _MSAAEvents * This,
            /* [retval][out] */ WindowFilterScope *scope);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Scope )( 
            _MSAAEvents * This,
            /* [in] */ WindowFilterScope scope);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Role )( 
            _MSAAEvents * This,
            /* [retval][out] */ AccessibleRoleEnum *role);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Role )( 
            _MSAAEvents * This,
            /* [in] */ AccessibleRoleEnum role);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WatchEvent )( 
            _MSAAEvents * This,
            /* [in] */ MSAAEventID id);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BlockEvent )( 
            _MSAAEvents * This,
            /* [in] */ MSAAEventID id,
            /* [optional][in] */ VARIANT process,
            /* [retval][out] */ MSAAEventBlock **block);
        
        END_INTERFACE
    } _MSAAEventsVtbl;

    interface _MSAAEvents
    {
        CONST_VTBL struct _MSAAEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _MSAAEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _MSAAEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _MSAAEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _MSAAEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _MSAAEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _MSAAEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _MSAAEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _MSAAEvents_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _MSAAEvents_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _MSAAEvents_get_Process(This,process)	\
    ( (This)->lpVtbl -> get_Process(This,process) ) 

#define _MSAAEvents_put_Process(This,process)	\
    ( (This)->lpVtbl -> put_Process(This,process) ) 

#define _MSAAEvents_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _MSAAEvents_put_Window(This,window)	\
    ( (This)->lpVtbl -> put_Window(This,window) ) 

#define _MSAAEvents_get_Scope(This,scope)	\
    ( (This)->lpVtbl -> get_Scope(This,scope) ) 

#define _MSAAEvents_put_Scope(This,scope)	\
    ( (This)->lpVtbl -> put_Scope(This,scope) ) 

#define _MSAAEvents_get_Role(This,role)	\
    ( (This)->lpVtbl -> get_Role(This,role) ) 

#define _MSAAEvents_put_Role(This,role)	\
    ( (This)->lpVtbl -> put_Role(This,role) ) 

#define _MSAAEvents_WatchEvent(This,id)	\
    ( (This)->lpVtbl -> WatchEvent(This,id) ) 

#define _MSAAEvents_BlockEvent(This,id,process,block)	\
    ( (This)->lpVtbl -> BlockEvent(This,id,process,block) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___MSAAEvents_INTERFACE_DEFINED__ */


#ifndef __Clipboard_INTERFACE_DEFINED__
#define __Clipboard_INTERFACE_DEFINED__

/* interface Clipboard */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Clipboard;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("72a9b17d-98b3-44f7-9be1-a5e892170262")
    Clipboard : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *Text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsText( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsBitmap( 
            /* [retval][out] */ VARIANT_BOOL *Result) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AppendText( 
            /* [in] */ BSTR Text) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ClipboardVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Clipboard * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Clipboard * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Clipboard * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Clipboard * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Clipboard * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Clipboard * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Clipboard * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Clipboard * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Clipboard * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            Clipboard * This,
            /* [retval][out] */ BSTR *Text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            Clipboard * This,
            /* [in] */ BSTR Text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsText )( 
            Clipboard * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsBitmap )( 
            Clipboard * This,
            /* [retval][out] */ VARIANT_BOOL *Result);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AppendText )( 
            Clipboard * This,
            /* [in] */ BSTR Text);
        
        END_INTERFACE
    } ClipboardVtbl;

    interface Clipboard
    {
        CONST_VTBL struct ClipboardVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Clipboard_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Clipboard_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Clipboard_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Clipboard_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Clipboard_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Clipboard_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Clipboard_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Clipboard_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Clipboard_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Clipboard_get_Text(This,Text)	\
    ( (This)->lpVtbl -> get_Text(This,Text) ) 

#define Clipboard_put_Text(This,Text)	\
    ( (This)->lpVtbl -> put_Text(This,Text) ) 

#define Clipboard_get_IsText(This,Result)	\
    ( (This)->lpVtbl -> get_IsText(This,Result) ) 

#define Clipboard_get_IsBitmap(This,Result)	\
    ( (This)->lpVtbl -> get_IsBitmap(This,Result) ) 

#define Clipboard_AppendText(This,Text)	\
    ( (This)->lpVtbl -> AppendText(This,Text) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Clipboard_INTERFACE_DEFINED__ */


#ifndef ___BrowseMode_INTERFACE_DEFINED__
#define ___BrowseMode_INTERFACE_DEFINED__

/* interface _BrowseMode */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__BrowseMode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7298acc8-3023-469a-bfc7-7135f9f8561f")
    _BrowseMode : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Lines( 
            /* [retval][out] */ BrowseModeLines **lines) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelectionBeginLine( 
            /* [retval][out] */ long *line) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelectionBeginColumn( 
            /* [retval][out] */ long *column) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelectionEndLine( 
            /* [retval][out] */ long *line) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelectionEndColumn( 
            /* [retval][out] */ long *column) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ BrowseModeState *state) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorLine( 
            /* [retval][out] */ long *line) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CursorLine( 
            /* [in] */ long line) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorColumn( 
            /* [retval][out] */ long *column) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CursorColumn( 
            /* [in] */ long column) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reload( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [in] */ long startLine,
            /* [in] */ long startColumn,
            /* [in] */ long endLine,
            /* [in] */ long endColumn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _BrowseModeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _BrowseMode * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _BrowseMode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _BrowseMode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _BrowseMode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _BrowseMode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _BrowseMode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _BrowseMode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lines )( 
            _BrowseMode * This,
            /* [retval][out] */ BrowseModeLines **lines);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _BrowseMode * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _BrowseMode * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionBeginLine )( 
            _BrowseMode * This,
            /* [retval][out] */ long *line);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionBeginColumn )( 
            _BrowseMode * This,
            /* [retval][out] */ long *column);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionEndLine )( 
            _BrowseMode * This,
            /* [retval][out] */ long *line);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionEndColumn )( 
            _BrowseMode * This,
            /* [retval][out] */ long *column);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            _BrowseMode * This,
            /* [retval][out] */ BrowseModeState *state);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorLine )( 
            _BrowseMode * This,
            /* [retval][out] */ long *line);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CursorLine )( 
            _BrowseMode * This,
            /* [in] */ long line);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorColumn )( 
            _BrowseMode * This,
            /* [retval][out] */ long *column);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CursorColumn )( 
            _BrowseMode * This,
            /* [in] */ long column);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            _BrowseMode * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reload )( 
            _BrowseMode * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            _BrowseMode * This,
            /* [in] */ long startLine,
            /* [in] */ long startColumn,
            /* [in] */ long endLine,
            /* [in] */ long endColumn);
        
        END_INTERFACE
    } _BrowseModeVtbl;

    interface _BrowseMode
    {
        CONST_VTBL struct _BrowseModeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _BrowseMode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _BrowseMode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _BrowseMode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _BrowseMode_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _BrowseMode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _BrowseMode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _BrowseMode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _BrowseMode_get_Lines(This,lines)	\
    ( (This)->lpVtbl -> get_Lines(This,lines) ) 

#define _BrowseMode_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _BrowseMode_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _BrowseMode_get_SelectionBeginLine(This,line)	\
    ( (This)->lpVtbl -> get_SelectionBeginLine(This,line) ) 

#define _BrowseMode_get_SelectionBeginColumn(This,column)	\
    ( (This)->lpVtbl -> get_SelectionBeginColumn(This,column) ) 

#define _BrowseMode_get_SelectionEndLine(This,line)	\
    ( (This)->lpVtbl -> get_SelectionEndLine(This,line) ) 

#define _BrowseMode_get_SelectionEndColumn(This,column)	\
    ( (This)->lpVtbl -> get_SelectionEndColumn(This,column) ) 

#define _BrowseMode_get_State(This,state)	\
    ( (This)->lpVtbl -> get_State(This,state) ) 

#define _BrowseMode_get_CursorLine(This,line)	\
    ( (This)->lpVtbl -> get_CursorLine(This,line) ) 

#define _BrowseMode_put_CursorLine(This,line)	\
    ( (This)->lpVtbl -> put_CursorLine(This,line) ) 

#define _BrowseMode_get_CursorColumn(This,column)	\
    ( (This)->lpVtbl -> get_CursorColumn(This,column) ) 

#define _BrowseMode_put_CursorColumn(This,column)	\
    ( (This)->lpVtbl -> put_CursorColumn(This,column) ) 

#define _BrowseMode_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define _BrowseMode_Reload(This)	\
    ( (This)->lpVtbl -> Reload(This) ) 

#define _BrowseMode_Select(This,startLine,startColumn,endLine,endColumn)	\
    ( (This)->lpVtbl -> Select(This,startLine,startColumn,endLine,endColumn) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___BrowseMode_INTERFACE_DEFINED__ */


#ifndef __WEDialogs_INTERFACE_DEFINED__
#define __WEDialogs_INTERFACE_DEFINED__

/* interface WEDialogs */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WEDialogs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A84F8D09-34E2-4408-82CC-3E8E78BF264C")
    WEDialogs : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddRemove( 
            /* [optional][in] */ VARIANT PackagePathAndName,
            /* [optional][in] */ VARIANT DeletePackageAfterInstall,
            /* [optional][in] */ VARIANT WaitForCompletion,
            /* [optional][in] */ VARIANT ParentWindow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WEDialogsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WEDialogs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WEDialogs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WEDialogs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WEDialogs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WEDialogs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WEDialogs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WEDialogs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WEDialogs * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WEDialogs * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddRemove )( 
            WEDialogs * This,
            /* [optional][in] */ VARIANT PackagePathAndName,
            /* [optional][in] */ VARIANT DeletePackageAfterInstall,
            /* [optional][in] */ VARIANT WaitForCompletion,
            /* [optional][in] */ VARIANT ParentWindow);
        
        END_INTERFACE
    } WEDialogsVtbl;

    interface WEDialogs
    {
        CONST_VTBL struct WEDialogsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WEDialogs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WEDialogs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WEDialogs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WEDialogs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WEDialogs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WEDialogs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WEDialogs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WEDialogs_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WEDialogs_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WEDialogs_AddRemove(This,PackagePathAndName,DeletePackageAfterInstall,WaitForCompletion,ParentWindow)	\
    ( (This)->lpVtbl -> AddRemove(This,PackagePathAndName,DeletePackageAfterInstall,WaitForCompletion,ParentWindow) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WEDialogs_INTERFACE_DEFINED__ */


#ifndef __OSVersion_INTERFACE_DEFINED__
#define __OSVersion_INTERFACE_DEFINED__

/* interface OSVersion */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_OSVersion;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9a7fd9ff-d729-4b3e-8d60-de0b034b07fc")
    OSVersion : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MajorVersion( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MinorVersion( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BuildNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ServicePackMajor( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ServicePackMinor( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProductSuite( 
            /* [retval][out] */ OSProductSuiteMask *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProductType( 
            /* [retval][out] */ OSProductType *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UserLanguage( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SystemLanguage( 
            /* [retval][out] */ long *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OSVersionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OSVersion * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OSVersion * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OSVersion * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OSVersion * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OSVersion * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OSVersion * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OSVersion * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            OSVersion * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            OSVersion * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MajorVersion )( 
            OSVersion * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinorVersion )( 
            OSVersion * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BuildNumber )( 
            OSVersion * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ServicePackMajor )( 
            OSVersion * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ServicePackMinor )( 
            OSVersion * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProductSuite )( 
            OSVersion * This,
            /* [retval][out] */ OSProductSuiteMask *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProductType )( 
            OSVersion * This,
            /* [retval][out] */ OSProductType *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UserLanguage )( 
            OSVersion * This,
            /* [retval][out] */ long *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SystemLanguage )( 
            OSVersion * This,
            /* [retval][out] */ long *prop);
        
        END_INTERFACE
    } OSVersionVtbl;

    interface OSVersion
    {
        CONST_VTBL struct OSVersionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OSVersion_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define OSVersion_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define OSVersion_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define OSVersion_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define OSVersion_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define OSVersion_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define OSVersion_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define OSVersion_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define OSVersion_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define OSVersion_get_MajorVersion(This,prop)	\
    ( (This)->lpVtbl -> get_MajorVersion(This,prop) ) 

#define OSVersion_get_MinorVersion(This,prop)	\
    ( (This)->lpVtbl -> get_MinorVersion(This,prop) ) 

#define OSVersion_get_BuildNumber(This,prop)	\
    ( (This)->lpVtbl -> get_BuildNumber(This,prop) ) 

#define OSVersion_get_ServicePackMajor(This,prop)	\
    ( (This)->lpVtbl -> get_ServicePackMajor(This,prop) ) 

#define OSVersion_get_ServicePackMinor(This,prop)	\
    ( (This)->lpVtbl -> get_ServicePackMinor(This,prop) ) 

#define OSVersion_get_ProductSuite(This,prop)	\
    ( (This)->lpVtbl -> get_ProductSuite(This,prop) ) 

#define OSVersion_get_ProductType(This,prop)	\
    ( (This)->lpVtbl -> get_ProductType(This,prop) ) 

#define OSVersion_get_UserLanguage(This,prop)	\
    ( (This)->lpVtbl -> get_UserLanguage(This,prop) ) 

#define OSVersion_get_SystemLanguage(This,prop)	\
    ( (This)->lpVtbl -> get_SystemLanguage(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __OSVersion_INTERFACE_DEFINED__ */


#ifndef __WECursor_INTERFACE_DEFINED__
#define __WECursor_INTERFACE_DEFINED__

/* interface WECursor */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WECursor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a3dcea0a-befa-4b2e-9c01-6681304ba595")
    WECursor : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ ScreenPoint **point) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ ScreenPoint *point) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToFocus( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Sync( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WECursorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WECursor * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WECursor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WECursor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WECursor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WECursor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WECursor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WECursor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WECursor * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WECursor * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            WECursor * This,
            /* [retval][out] */ ScreenPoint **point);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            WECursor * This,
            /* [in] */ ScreenPoint *point);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            WECursor * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ToFocus )( 
            WECursor * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Sync )( 
            WECursor * This);
        
        END_INTERFACE
    } WECursorVtbl;

    interface WECursor
    {
        CONST_VTBL struct WECursorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WECursor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WECursor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WECursor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WECursor_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WECursor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WECursor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WECursor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WECursor_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WECursor_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WECursor_get_Position(This,point)	\
    ( (This)->lpVtbl -> get_Position(This,point) ) 

#define WECursor_put_Position(This,point)	\
    ( (This)->lpVtbl -> put_Position(This,point) ) 

#define WECursor_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define WECursor_ToFocus(This)	\
    ( (This)->lpVtbl -> ToFocus(This) ) 

#define WECursor_Sync(This)	\
    ( (This)->lpVtbl -> Sync(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WECursor_INTERFACE_DEFINED__ */


#ifndef __StartupOptions_INTERFACE_DEFINED__
#define __StartupOptions_INTERFACE_DEFINED__

/* interface StartupOptions */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_StartupOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3841e91d-3759-4c7f-bd7d-0af829f07e54")
    StartupOptions : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunAtLoginScreen( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunAfterLoginScreen( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RunAfterLoginCurrentUser( 
            /* [retval][out] */ StartupOptionsCurrentUser *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StartupOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            StartupOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            StartupOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            StartupOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            StartupOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            StartupOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            StartupOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            StartupOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            StartupOptions * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            StartupOptions * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunAtLoginScreen )( 
            StartupOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunAfterLoginScreen )( 
            StartupOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RunAfterLoginCurrentUser )( 
            StartupOptions * This,
            /* [retval][out] */ StartupOptionsCurrentUser *prop);
        
        END_INTERFACE
    } StartupOptionsVtbl;

    interface StartupOptions
    {
        CONST_VTBL struct StartupOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define StartupOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define StartupOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define StartupOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define StartupOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define StartupOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define StartupOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define StartupOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define StartupOptions_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define StartupOptions_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define StartupOptions_get_RunAtLoginScreen(This,prop)	\
    ( (This)->lpVtbl -> get_RunAtLoginScreen(This,prop) ) 

#define StartupOptions_get_RunAfterLoginScreen(This,prop)	\
    ( (This)->lpVtbl -> get_RunAfterLoginScreen(This,prop) ) 

#define StartupOptions_get_RunAfterLoginCurrentUser(This,prop)	\
    ( (This)->lpVtbl -> get_RunAfterLoginCurrentUser(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __StartupOptions_INTERFACE_DEFINED__ */


#ifndef __WEPM_INTERFACE_DEFINED__
#define __WEPM_INTERFACE_DEFINED__

/* interface WEPM */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WEPM;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("22fcd0a5-7cf1-46b1-be14-01cfe86e55c0")
    WEPM : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StopPrompt( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WEPMVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WEPM * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WEPM * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WEPM * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WEPM * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WEPM * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WEPM * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WEPM * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WEPM * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WEPM * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            WEPM * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            WEPM * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StopPrompt )( 
            WEPM * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } WEPMVtbl;

    interface WEPM
    {
        CONST_VTBL struct WEPMVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WEPM_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WEPM_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WEPM_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WEPM_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WEPM_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WEPM_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WEPM_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WEPM_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WEPM_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WEPM_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define WEPM_get_Version(This,prop)	\
    ( (This)->lpVtbl -> get_Version(This,prop) ) 

#define WEPM_get_StopPrompt(This,prop)	\
    ( (This)->lpVtbl -> get_StopPrompt(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WEPM_INTERFACE_DEFINED__ */


#ifndef __Profiles_INTERFACE_DEFINED__
#define __Profiles_INTERFACE_DEFINED__

/* interface Profiles */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Profiles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b8488afb-0e95-409d-ad01-ca1410e5ea50")
    Profiles : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ Profile **profile) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Profile **profile) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProfilesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Profiles * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Profiles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Profiles * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Profiles * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Profiles * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Profiles * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Profiles * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Profiles * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Profiles * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Profiles * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Profiles * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            Profiles * This,
            /* [retval][out] */ Profile **profile);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Profiles * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Profile **profile);
        
        END_INTERFACE
    } ProfilesVtbl;

    interface Profiles
    {
        CONST_VTBL struct ProfilesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Profiles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Profiles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Profiles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Profiles_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Profiles_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Profiles_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Profiles_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Profiles_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define Profiles_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Profiles_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Profiles_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define Profiles_get_Active(This,profile)	\
    ( (This)->lpVtbl -> get_Active(This,profile) ) 

#define Profiles_Item(This,Index,profile)	\
    ( (This)->lpVtbl -> Item(This,Index,profile) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Profiles_INTERFACE_DEFINED__ */


#ifndef __Profile_INTERFACE_DEFINED__
#define __Profile_INTERFACE_DEFINED__

/* interface Profile */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Profile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2f930915-3d94-47a1-b55e-d00c92bcc7e1")
    Profile : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Folder( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ ProfileType *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProfileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Profile * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Profile * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Profile * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Profile * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Profile * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Profile * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Profile * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Profile * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Profile * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Profile * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Folder )( 
            Profile * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            Profile * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Profile * This,
            /* [retval][out] */ ProfileType *prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            Profile * This);
        
        END_INTERFACE
    } ProfileVtbl;

    interface Profile
    {
        CONST_VTBL struct ProfileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Profile_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Profile_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Profile_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Profile_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Profile_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Profile_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Profile_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Profile_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Profile_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Profile_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define Profile_get_Folder(This,prop)	\
    ( (This)->lpVtbl -> get_Folder(This,prop) ) 

#define Profile_get_Path(This,prop)	\
    ( (This)->lpVtbl -> get_Path(This,prop) ) 

#define Profile_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Profile_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Profile_INTERFACE_DEFINED__ */


#ifndef __TreeView_INTERFACE_DEFINED__
#define __TreeView_INTERFACE_DEFINED__

/* interface TreeView */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_TreeView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6ea73b9f-a405-4cc4-a1b2-a5ff7ca0d65b")
    TreeView : public _Control
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Checkboxes( 
            /* [retval][out] */ VARIANT_BOOL *checkboxes) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indent( 
            /* [retval][out] */ long *indent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indent( 
            /* [in] */ long indent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selected( 
            /* [retval][out] */ TreeViewItem **selectedItem) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Root( 
            /* [retval][out] */ TreeViewItem **rootItem) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TopLevel( 
            /* [retval][out] */ TreeViewItems **toplevel) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewItem( 
            /* [retval][out] */ TreeViewItem **treeViewItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TreeViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TreeView * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TreeView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TreeView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TreeView * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TreeView * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TreeView * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TreeView * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            TreeView * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            TreeView * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TreeView * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TreeView * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            TreeView * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            TreeView * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            TreeView * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            TreeView * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            TreeView * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            TreeView * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            TreeView * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            TreeView * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            TreeView * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            TreeView * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            TreeView * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            TreeView * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            TreeView * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            TreeView * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            TreeView * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            TreeView * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            TreeView * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            TreeView * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            TreeView * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            TreeView * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            TreeView * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            TreeView * This);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            TreeView * This,
            /* [in] */ long id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Checkboxes )( 
            TreeView * This,
            /* [retval][out] */ VARIANT_BOOL *checkboxes);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indent )( 
            TreeView * This,
            /* [retval][out] */ long *indent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indent )( 
            TreeView * This,
            /* [in] */ long indent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selected )( 
            TreeView * This,
            /* [retval][out] */ TreeViewItem **selectedItem);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Root )( 
            TreeView * This,
            /* [retval][out] */ TreeViewItem **rootItem);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TopLevel )( 
            TreeView * This,
            /* [retval][out] */ TreeViewItems **toplevel);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            TreeView * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewItem )( 
            TreeView * This,
            /* [retval][out] */ TreeViewItem **treeViewItem);
        
        END_INTERFACE
    } TreeViewVtbl;

    interface TreeView
    {
        CONST_VTBL struct TreeViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TreeView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TreeView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TreeView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TreeView_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TreeView_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TreeView_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TreeView_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TreeView_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define TreeView_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define TreeView_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define TreeView_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define TreeView_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define TreeView_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define TreeView_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define TreeView_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define TreeView_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define TreeView_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define TreeView_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define TreeView_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define TreeView_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define TreeView_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define TreeView_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define TreeView_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define TreeView_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define TreeView_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define TreeView_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define TreeView_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define TreeView_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define TreeView_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define TreeView_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define TreeView_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define TreeView_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define TreeView_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define TreeView_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 


#define TreeView_get_Checkboxes(This,checkboxes)	\
    ( (This)->lpVtbl -> get_Checkboxes(This,checkboxes) ) 

#define TreeView_get_Indent(This,indent)	\
    ( (This)->lpVtbl -> get_Indent(This,indent) ) 

#define TreeView_put_Indent(This,indent)	\
    ( (This)->lpVtbl -> put_Indent(This,indent) ) 

#define TreeView_get_Selected(This,selectedItem)	\
    ( (This)->lpVtbl -> get_Selected(This,selectedItem) ) 

#define TreeView_get_Root(This,rootItem)	\
    ( (This)->lpVtbl -> get_Root(This,rootItem) ) 

#define TreeView_get_TopLevel(This,toplevel)	\
    ( (This)->lpVtbl -> get_TopLevel(This,toplevel) ) 

#define TreeView_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define TreeView_NewItem(This,treeViewItem)	\
    ( (This)->lpVtbl -> NewItem(This,treeViewItem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TreeView_INTERFACE_DEFINED__ */


#ifndef __TreeViewItems_INTERFACE_DEFINED__
#define __TreeViewItems_INTERFACE_DEFINED__

/* interface TreeViewItems */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_TreeViewItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0f706d22-6b84-4701-99b7-2234a864e317")
    TreeViewItems : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ TreeViewItem **item) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ TreeViewItem *item,
            /* [in] */ VARIANT InsertAfter) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TreeViewItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TreeViewItems * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TreeViewItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TreeViewItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TreeViewItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TreeViewItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TreeViewItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TreeViewItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TreeViewItems * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TreeViewItems * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TreeViewItems * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TreeViewItems * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TreeViewItems * This,
            /* [in] */ long index,
            /* [retval][out] */ TreeViewItem **item);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            TreeViewItems * This,
            /* [in] */ TreeViewItem *item,
            /* [in] */ VARIANT InsertAfter);
        
        END_INTERFACE
    } TreeViewItemsVtbl;

    interface TreeViewItems
    {
        CONST_VTBL struct TreeViewItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TreeViewItems_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TreeViewItems_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TreeViewItems_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TreeViewItems_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TreeViewItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TreeViewItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TreeViewItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TreeViewItems_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define TreeViewItems_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define TreeViewItems_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define TreeViewItems_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define TreeViewItems_Item(This,index,item)	\
    ( (This)->lpVtbl -> Item(This,index,item) ) 

#define TreeViewItems_Insert(This,item,InsertAfter)	\
    ( (This)->lpVtbl -> Insert(This,item,InsertAfter) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TreeViewItems_INTERFACE_DEFINED__ */


#ifndef __TreeViewItem_INTERFACE_DEFINED__
#define __TreeViewItem_INTERFACE_DEFINED__

/* interface TreeViewItem */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_TreeViewItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37f7bc02-68c6-4085-a728-24c2759cc6b1")
    TreeViewItem : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selected( 
            /* [retval][out] */ VARIANT_BOOL *selected) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Selected( 
            /* [in] */ VARIANT_BOOL selected) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Expanded( 
            /* [retval][out] */ VARIANT_BOOL *expanded) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Expanded( 
            /* [in] */ VARIANT_BOOL expanded) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParentItem( 
            /* [retval][out] */ TreeViewItem **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ TreeViewItems **children) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Siblings( 
            /* [retval][out] */ TreeViewItems **siblings) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UnknownChildren( 
            /* [retval][out] */ VARIANT_BOOL *unknownChildren) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Checked( 
            /* [retval][out] */ treeviewCheck *checked) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Checked( 
            /* [in] */ treeviewCheck checked) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Image( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StateImage( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StateImage( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OverlayImage( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OverlayImage( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Data( 
            /* [retval][out] */ long *data) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Data( 
            /* [in] */ long data) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ long *handle) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Handle( 
            /* [in] */ long handle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScrollTo( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TreeViewItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TreeViewItem * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TreeViewItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TreeViewItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TreeViewItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TreeViewItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TreeViewItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TreeViewItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            TreeViewItem * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            TreeViewItem * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TreeViewItem * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TreeViewItem * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selected )( 
            TreeViewItem * This,
            /* [retval][out] */ VARIANT_BOOL *selected);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Selected )( 
            TreeViewItem * This,
            /* [in] */ VARIANT_BOOL selected);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Expanded )( 
            TreeViewItem * This,
            /* [retval][out] */ VARIANT_BOOL *expanded);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Expanded )( 
            TreeViewItem * This,
            /* [in] */ VARIANT_BOOL expanded);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParentItem )( 
            TreeViewItem * This,
            /* [retval][out] */ TreeViewItem **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            TreeViewItem * This,
            /* [retval][out] */ TreeViewItems **children);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Siblings )( 
            TreeViewItem * This,
            /* [retval][out] */ TreeViewItems **siblings);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UnknownChildren )( 
            TreeViewItem * This,
            /* [retval][out] */ VARIANT_BOOL *unknownChildren);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Checked )( 
            TreeViewItem * This,
            /* [retval][out] */ treeviewCheck *checked);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Checked )( 
            TreeViewItem * This,
            /* [in] */ treeviewCheck checked);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            TreeViewItem * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            TreeViewItem * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StateImage )( 
            TreeViewItem * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StateImage )( 
            TreeViewItem * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OverlayImage )( 
            TreeViewItem * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OverlayImage )( 
            TreeViewItem * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Data )( 
            TreeViewItem * This,
            /* [retval][out] */ long *data);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Data )( 
            TreeViewItem * This,
            /* [in] */ long data);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            TreeViewItem * This,
            /* [retval][out] */ long *handle);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Handle )( 
            TreeViewItem * This,
            /* [in] */ long handle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TreeViewItem * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScrollTo )( 
            TreeViewItem * This);
        
        END_INTERFACE
    } TreeViewItemVtbl;

    interface TreeViewItem
    {
        CONST_VTBL struct TreeViewItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TreeViewItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TreeViewItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TreeViewItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TreeViewItem_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TreeViewItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TreeViewItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TreeViewItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TreeViewItem_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define TreeViewItem_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define TreeViewItem_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define TreeViewItem_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define TreeViewItem_get_Selected(This,selected)	\
    ( (This)->lpVtbl -> get_Selected(This,selected) ) 

#define TreeViewItem_put_Selected(This,selected)	\
    ( (This)->lpVtbl -> put_Selected(This,selected) ) 

#define TreeViewItem_get_Expanded(This,expanded)	\
    ( (This)->lpVtbl -> get_Expanded(This,expanded) ) 

#define TreeViewItem_put_Expanded(This,expanded)	\
    ( (This)->lpVtbl -> put_Expanded(This,expanded) ) 

#define TreeViewItem_get_ParentItem(This,parent)	\
    ( (This)->lpVtbl -> get_ParentItem(This,parent) ) 

#define TreeViewItem_get_Children(This,children)	\
    ( (This)->lpVtbl -> get_Children(This,children) ) 

#define TreeViewItem_get_Siblings(This,siblings)	\
    ( (This)->lpVtbl -> get_Siblings(This,siblings) ) 

#define TreeViewItem_get_UnknownChildren(This,unknownChildren)	\
    ( (This)->lpVtbl -> get_UnknownChildren(This,unknownChildren) ) 

#define TreeViewItem_get_Checked(This,checked)	\
    ( (This)->lpVtbl -> get_Checked(This,checked) ) 

#define TreeViewItem_put_Checked(This,checked)	\
    ( (This)->lpVtbl -> put_Checked(This,checked) ) 

#define TreeViewItem_get_Image(This,index)	\
    ( (This)->lpVtbl -> get_Image(This,index) ) 

#define TreeViewItem_put_Image(This,index)	\
    ( (This)->lpVtbl -> put_Image(This,index) ) 

#define TreeViewItem_get_StateImage(This,index)	\
    ( (This)->lpVtbl -> get_StateImage(This,index) ) 

#define TreeViewItem_put_StateImage(This,index)	\
    ( (This)->lpVtbl -> put_StateImage(This,index) ) 

#define TreeViewItem_get_OverlayImage(This,index)	\
    ( (This)->lpVtbl -> get_OverlayImage(This,index) ) 

#define TreeViewItem_put_OverlayImage(This,index)	\
    ( (This)->lpVtbl -> put_OverlayImage(This,index) ) 

#define TreeViewItem_get_Data(This,data)	\
    ( (This)->lpVtbl -> get_Data(This,data) ) 

#define TreeViewItem_put_Data(This,data)	\
    ( (This)->lpVtbl -> put_Data(This,data) ) 

#define TreeViewItem_get_Handle(This,handle)	\
    ( (This)->lpVtbl -> get_Handle(This,handle) ) 

#define TreeViewItem_put_Handle(This,handle)	\
    ( (This)->lpVtbl -> put_Handle(This,handle) ) 

#define TreeViewItem_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define TreeViewItem_ScrollTo(This)	\
    ( (This)->lpVtbl -> ScrollTo(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TreeViewItem_INTERFACE_DEFINED__ */


#ifndef __Utilities_INTERFACE_DEFINED__
#define __Utilities_INTERFACE_DEFINED__

/* interface Utilities */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Utilities;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9e254d3e-8463-40ad-9f09-fc9571053b66")
    Utilities : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LocaleInfo( 
            /* [in] */ VARIANT LocaleID,
            /* [optional][in] */ VARIANT LCID_SORT,
            /* [retval][out] */ LocaleInformation **localeInfo) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadedScripts( 
            /* [retval][out] */ LoadedScripts **loadedScripts) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertLanguageIDToString( 
            /* [in] */ long __MIDL__Utilities0000,
            /* [retval][out] */ BSTR *String) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertStringToLanguageID( 
            /* [in] */ BSTR String,
            /* [retval][out] */ long *ID) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TypeName( 
            /* [in] */ IDispatch *Object,
            /* [retval][out] */ BSTR *TypeName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UtilitiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Utilities * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Utilities * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Utilities * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Utilities * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Utilities * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Utilities * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Utilities * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Utilities * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Utilities * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LocaleInfo )( 
            Utilities * This,
            /* [in] */ VARIANT LocaleID,
            /* [optional][in] */ VARIANT LCID_SORT,
            /* [retval][out] */ LocaleInformation **localeInfo);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadedScripts )( 
            Utilities * This,
            /* [retval][out] */ LoadedScripts **loadedScripts);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertLanguageIDToString )( 
            Utilities * This,
            /* [in] */ long __MIDL__Utilities0000,
            /* [retval][out] */ BSTR *String);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertStringToLanguageID )( 
            Utilities * This,
            /* [in] */ BSTR String,
            /* [retval][out] */ long *ID);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TypeName )( 
            Utilities * This,
            /* [in] */ IDispatch *Object,
            /* [retval][out] */ BSTR *TypeName);
        
        END_INTERFACE
    } UtilitiesVtbl;

    interface Utilities
    {
        CONST_VTBL struct UtilitiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Utilities_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Utilities_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Utilities_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Utilities_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Utilities_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Utilities_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Utilities_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Utilities_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Utilities_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Utilities_LocaleInfo(This,LocaleID,LCID_SORT,localeInfo)	\
    ( (This)->lpVtbl -> LocaleInfo(This,LocaleID,LCID_SORT,localeInfo) ) 

#define Utilities_LoadedScripts(This,loadedScripts)	\
    ( (This)->lpVtbl -> LoadedScripts(This,loadedScripts) ) 

#define Utilities_ConvertLanguageIDToString(This,__MIDL__Utilities0000,String)	\
    ( (This)->lpVtbl -> ConvertLanguageIDToString(This,__MIDL__Utilities0000,String) ) 

#define Utilities_ConvertStringToLanguageID(This,String,ID)	\
    ( (This)->lpVtbl -> ConvertStringToLanguageID(This,String,ID) ) 

#define Utilities_TypeName(This,Object,TypeName)	\
    ( (This)->lpVtbl -> TypeName(This,Object,TypeName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Utilities_INTERFACE_DEFINED__ */


#ifndef __LocaleInformation_INTERFACE_DEFINED__
#define __LocaleInformation_INTERFACE_DEFINED__

/* interface LocaleInformation */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_LocaleInformation;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d0638e9f-6409-4d32-addd-2ca5e0a07f56")
    LocaleInformation : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LanguageName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LocaleName( 
            /* [retval][out] */ BSTR *Country) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RegionName( 
            /* [retval][out] */ BSTR *Name) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LocaleInformationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LocaleInformation * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LocaleInformation * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LocaleInformation * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LocaleInformation * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LocaleInformation * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LocaleInformation * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LocaleInformation * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            LocaleInformation * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LocaleInformation * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageName )( 
            LocaleInformation * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocaleName )( 
            LocaleInformation * This,
            /* [retval][out] */ BSTR *Country);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RegionName )( 
            LocaleInformation * This,
            /* [retval][out] */ BSTR *Name);
        
        END_INTERFACE
    } LocaleInformationVtbl;

    interface LocaleInformation
    {
        CONST_VTBL struct LocaleInformationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LocaleInformation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LocaleInformation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LocaleInformation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LocaleInformation_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LocaleInformation_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LocaleInformation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LocaleInformation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LocaleInformation_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define LocaleInformation_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define LocaleInformation_get_LanguageName(This,Name)	\
    ( (This)->lpVtbl -> get_LanguageName(This,Name) ) 

#define LocaleInformation_get_LocaleName(This,Country)	\
    ( (This)->lpVtbl -> get_LocaleName(This,Country) ) 

#define LocaleInformation_get_RegionName(This,Name)	\
    ( (This)->lpVtbl -> get_RegionName(This,Name) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LocaleInformation_INTERFACE_DEFINED__ */


#ifndef __LoadedScripts_INTERFACE_DEFINED__
#define __LoadedScripts_INTERFACE_DEFINED__

/* interface LoadedScripts */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_LoadedScripts;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7fb8c7bb-7424-440d-b48f-07eda20ef2b9")
    LoadedScripts : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ LoadedScript **loadedScript) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FilterByName( 
            /* [in] */ BSTR ScriptName,
            /* [optional][in] */ VARIANT FilterMatch,
            /* [retval][out] */ LoadedScripts **loadedScripts) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LoadedScriptsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LoadedScripts * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LoadedScripts * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LoadedScripts * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LoadedScripts * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LoadedScripts * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LoadedScripts * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LoadedScripts * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            LoadedScripts * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            LoadedScripts * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LoadedScripts * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            LoadedScripts * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            LoadedScripts * This,
            /* [in] */ long index,
            /* [retval][out] */ LoadedScript **loadedScript);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FilterByName )( 
            LoadedScripts * This,
            /* [in] */ BSTR ScriptName,
            /* [optional][in] */ VARIANT FilterMatch,
            /* [retval][out] */ LoadedScripts **loadedScripts);
        
        END_INTERFACE
    } LoadedScriptsVtbl;

    interface LoadedScripts
    {
        CONST_VTBL struct LoadedScriptsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LoadedScripts_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LoadedScripts_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LoadedScripts_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LoadedScripts_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LoadedScripts_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LoadedScripts_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LoadedScripts_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LoadedScripts_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define LoadedScripts_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define LoadedScripts_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define LoadedScripts_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define LoadedScripts_Item(This,index,loadedScript)	\
    ( (This)->lpVtbl -> Item(This,index,loadedScript) ) 

#define LoadedScripts_FilterByName(This,ScriptName,FilterMatch,loadedScripts)	\
    ( (This)->lpVtbl -> FilterByName(This,ScriptName,FilterMatch,loadedScripts) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LoadedScripts_INTERFACE_DEFINED__ */


#ifndef __LoadedScript_INTERFACE_DEFINED__
#define __LoadedScript_INTERFACE_DEFINED__

/* interface LoadedScript */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_LoadedScript;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("61358c41-8fc6-41af-95e9-1627fdce2779")
    LoadedScript : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ LoadedScriptStatus *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Association( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LoadedScriptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LoadedScript * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LoadedScript * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LoadedScript * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LoadedScript * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LoadedScript * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LoadedScript * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LoadedScript * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            LoadedScript * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LoadedScript * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            LoadedScript * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            LoadedScript * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            LoadedScript * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            LoadedScript * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            LoadedScript * This,
            /* [retval][out] */ LoadedScriptStatus *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Association )( 
            LoadedScript * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } LoadedScriptVtbl;

    interface LoadedScript
    {
        CONST_VTBL struct LoadedScriptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LoadedScript_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LoadedScript_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LoadedScript_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LoadedScript_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LoadedScript_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LoadedScript_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LoadedScript_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LoadedScript_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define LoadedScript_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define LoadedScript_get_FileName(This,prop)	\
    ( (This)->lpVtbl -> get_FileName(This,prop) ) 

#define LoadedScript_get_Version(This,prop)	\
    ( (This)->lpVtbl -> get_Version(This,prop) ) 

#define LoadedScript_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define LoadedScript_get_Description(This,prop)	\
    ( (This)->lpVtbl -> get_Description(This,prop) ) 

#define LoadedScript_get_Status(This,prop)	\
    ( (This)->lpVtbl -> get_Status(This,prop) ) 

#define LoadedScript_get_Association(This,prop)	\
    ( (This)->lpVtbl -> get_Association(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LoadedScript_INTERFACE_DEFINED__ */


#ifndef __Menu_INTERFACE_DEFINED__
#define __Menu_INTERFACE_DEFINED__

/* interface Menu */
/* [object][version][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Menu;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("76e1a66a-8a64-4a49-8327-8c8f6334e44f")
    Menu : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Checked( 
            /* [in] */ BSTR Item,
            /* [retval][out] */ VARIANT_BOOL *Checked) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Checked( 
            /* [in] */ BSTR Item,
            /* [in] */ VARIANT_BOOL Checked) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [in] */ BSTR Item,
            /* [retval][out] */ VARIANT_BOOL *Enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ BSTR Item,
            /* [in] */ VARIANT_BOOL Enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Grayed( 
            /* [in] */ BSTR Item,
            /* [retval][out] */ VARIANT_BOOL *Grayed) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Grayed( 
            /* [in] */ BSTR Item,
            /* [in] */ VARIANT_BOOL Grayed) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [in] */ BSTR Item,
            /* [retval][out] */ BSTR *Text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR Item,
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertItem( 
            /* [in] */ BSTR ItemText,
            /* [in] */ MenuItemFlags Flags,
            /* [in] */ BSTR ItemID,
            /* [optional][in] */ VARIANT Position,
            /* [optional][in] */ VARIANT Accelerator) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertMenu( 
            /* [in] */ BSTR ItemText,
            /* [in] */ BSTR ItemID,
            /* [optional][in] */ VARIANT Position,
            /* [retval][out] */ Menu **SubMenu) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ BSTR Item) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetSubMenu( 
            /* [in] */ BSTR subMenuID,
            /* [retval][out] */ Menu **SubMenu) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MenuVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Menu * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Menu * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Menu * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Menu * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Menu * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Menu * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Menu * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Menu * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Menu * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Checked )( 
            Menu * This,
            /* [in] */ BSTR Item,
            /* [retval][out] */ VARIANT_BOOL *Checked);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Checked )( 
            Menu * This,
            /* [in] */ BSTR Item,
            /* [in] */ VARIANT_BOOL Checked);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            Menu * This,
            /* [in] */ BSTR Item,
            /* [retval][out] */ VARIANT_BOOL *Enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            Menu * This,
            /* [in] */ BSTR Item,
            /* [in] */ VARIANT_BOOL Enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Grayed )( 
            Menu * This,
            /* [in] */ BSTR Item,
            /* [retval][out] */ VARIANT_BOOL *Grayed);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Grayed )( 
            Menu * This,
            /* [in] */ BSTR Item,
            /* [in] */ VARIANT_BOOL Grayed);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            Menu * This,
            /* [in] */ BSTR Item,
            /* [retval][out] */ BSTR *Text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            Menu * This,
            /* [in] */ BSTR Item,
            /* [in] */ BSTR Text);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertItem )( 
            Menu * This,
            /* [in] */ BSTR ItemText,
            /* [in] */ MenuItemFlags Flags,
            /* [in] */ BSTR ItemID,
            /* [optional][in] */ VARIANT Position,
            /* [optional][in] */ VARIANT Accelerator);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertMenu )( 
            Menu * This,
            /* [in] */ BSTR ItemText,
            /* [in] */ BSTR ItemID,
            /* [optional][in] */ VARIANT Position,
            /* [retval][out] */ Menu **SubMenu);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Menu * This,
            /* [in] */ BSTR Item);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetSubMenu )( 
            Menu * This,
            /* [in] */ BSTR subMenuID,
            /* [retval][out] */ Menu **SubMenu);
        
        END_INTERFACE
    } MenuVtbl;

    interface Menu
    {
        CONST_VTBL struct MenuVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Menu_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Menu_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Menu_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Menu_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Menu_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Menu_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Menu_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Menu_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Menu_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Menu_get_Checked(This,Item,Checked)	\
    ( (This)->lpVtbl -> get_Checked(This,Item,Checked) ) 

#define Menu_put_Checked(This,Item,Checked)	\
    ( (This)->lpVtbl -> put_Checked(This,Item,Checked) ) 

#define Menu_get_Enabled(This,Item,Enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,Item,Enabled) ) 

#define Menu_put_Enabled(This,Item,Enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,Item,Enabled) ) 

#define Menu_get_Grayed(This,Item,Grayed)	\
    ( (This)->lpVtbl -> get_Grayed(This,Item,Grayed) ) 

#define Menu_put_Grayed(This,Item,Grayed)	\
    ( (This)->lpVtbl -> put_Grayed(This,Item,Grayed) ) 

#define Menu_get_Text(This,Item,Text)	\
    ( (This)->lpVtbl -> get_Text(This,Item,Text) ) 

#define Menu_put_Text(This,Item,Text)	\
    ( (This)->lpVtbl -> put_Text(This,Item,Text) ) 

#define Menu_InsertItem(This,ItemText,Flags,ItemID,Position,Accelerator)	\
    ( (This)->lpVtbl -> InsertItem(This,ItemText,Flags,ItemID,Position,Accelerator) ) 

#define Menu_InsertMenu(This,ItemText,ItemID,Position,SubMenu)	\
    ( (This)->lpVtbl -> InsertMenu(This,ItemText,ItemID,Position,SubMenu) ) 

#define Menu_Delete(This,Item)	\
    ( (This)->lpVtbl -> Delete(This,Item) ) 

#define Menu_GetSubMenu(This,subMenuID,SubMenu)	\
    ( (This)->lpVtbl -> GetSubMenu(This,subMenuID,SubMenu) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Menu_INTERFACE_DEFINED__ */


#ifndef __RegisteredHotkeys_INTERFACE_DEFINED__
#define __RegisteredHotkeys_INTERFACE_DEFINED__

/* interface RegisteredHotkeys */
/* [object][version][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_RegisteredHotkeys;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("07c2e45e-8c6d-4980-ad88-a1a930c9bf5c")
    RegisteredHotkeys : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ RegisteredHotkey **RegisteredHotkey) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RegisteredHotkeysVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            RegisteredHotkeys * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            RegisteredHotkeys * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            RegisteredHotkeys * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            RegisteredHotkeys * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            RegisteredHotkeys * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            RegisteredHotkeys * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            RegisteredHotkeys * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            RegisteredHotkeys * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            RegisteredHotkeys * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            RegisteredHotkeys * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            RegisteredHotkeys * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            RegisteredHotkeys * This,
            /* [in] */ long index,
            /* [retval][out] */ RegisteredHotkey **RegisteredHotkey);
        
        END_INTERFACE
    } RegisteredHotkeysVtbl;

    interface RegisteredHotkeys
    {
        CONST_VTBL struct RegisteredHotkeysVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define RegisteredHotkeys_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define RegisteredHotkeys_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define RegisteredHotkeys_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define RegisteredHotkeys_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define RegisteredHotkeys_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define RegisteredHotkeys_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define RegisteredHotkeys_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define RegisteredHotkeys_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define RegisteredHotkeys_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define RegisteredHotkeys_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define RegisteredHotkeys_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define RegisteredHotkeys_Item(This,index,RegisteredHotkey)	\
    ( (This)->lpVtbl -> Item(This,index,RegisteredHotkey) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __RegisteredHotkeys_INTERFACE_DEFINED__ */


#ifndef __RegisteredHotkey_INTERFACE_DEFINED__
#define __RegisteredHotkey_INTERFACE_DEFINED__

/* interface RegisteredHotkey */
/* [object][version][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_RegisteredHotkey;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23587edb-e616-486a-8510-d1fd46da24b2")
    RegisteredHotkey : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Key( 
            /* [retval][out] */ _Key **Key) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterBy( 
            /* [retval][out] */ VARIANT *FilterByObject) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Script( 
            /* [retval][out] */ LoadedScript **loadedScript) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RegisteredHotkeyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            RegisteredHotkey * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            RegisteredHotkey * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            RegisteredHotkey * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            RegisteredHotkey * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            RegisteredHotkey * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            RegisteredHotkey * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            RegisteredHotkey * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            RegisteredHotkey * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            RegisteredHotkey * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )( 
            RegisteredHotkey * This,
            /* [retval][out] */ _Key **Key);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterBy )( 
            RegisteredHotkey * This,
            /* [retval][out] */ VARIANT *FilterByObject);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Script )( 
            RegisteredHotkey * This,
            /* [retval][out] */ LoadedScript **loadedScript);
        
        END_INTERFACE
    } RegisteredHotkeyVtbl;

    interface RegisteredHotkey
    {
        CONST_VTBL struct RegisteredHotkeyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define RegisteredHotkey_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define RegisteredHotkey_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define RegisteredHotkey_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define RegisteredHotkey_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define RegisteredHotkey_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define RegisteredHotkey_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define RegisteredHotkey_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define RegisteredHotkey_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define RegisteredHotkey_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define RegisteredHotkey_get_Key(This,Key)	\
    ( (This)->lpVtbl -> get_Key(This,Key) ) 

#define RegisteredHotkey_get_FilterBy(This,FilterByObject)	\
    ( (This)->lpVtbl -> get_FilterBy(This,FilterByObject) ) 

#define RegisteredHotkey_get_Script(This,loadedScript)	\
    ( (This)->lpVtbl -> get_Script(This,loadedScript) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __RegisteredHotkey_INTERFACE_DEFINED__ */


#ifndef __WindowMessage_INTERFACE_DEFINED__
#define __WindowMessage_INTERFACE_DEFINED__

/* interface WindowMessage */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_WindowMessage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C8D9D673-EE50-481d-A83B-2D7B9A39C40C")
    WindowMessage : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Detach( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowMessageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WindowMessage * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WindowMessage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WindowMessage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WindowMessage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WindowMessage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WindowMessage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WindowMessage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WindowMessage * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WindowMessage * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Detach )( 
            WindowMessage * This);
        
        END_INTERFACE
    } WindowMessageVtbl;

    interface WindowMessage
    {
        CONST_VTBL struct WindowMessageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WindowMessage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WindowMessage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WindowMessage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WindowMessage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WindowMessage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WindowMessage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WindowMessage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WindowMessage_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define WindowMessage_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define WindowMessage_Detach(This)	\
    ( (This)->lpVtbl -> Detach(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WindowMessage_INTERFACE_DEFINED__ */


#ifndef __Settings2_INTERFACE_DEFINED__
#define __Settings2_INTERFACE_DEFINED__

/* interface Settings2 */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Settings2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("589e2bbb-ad90-4dd2-91ea-a80bc31372b1")
    Settings2 : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Effective( 
            /* [retval][out] */ SetFile **settings) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Global( 
            /* [retval][out] */ SetFile **settings) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct Settings2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Settings2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Settings2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Settings2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Settings2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Settings2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Settings2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Settings2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Settings2 * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Settings2 * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Effective )( 
            Settings2 * This,
            /* [retval][out] */ SetFile **settings);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Global )( 
            Settings2 * This,
            /* [retval][out] */ SetFile **settings);
        
        END_INTERFACE
    } Settings2Vtbl;

    interface Settings2
    {
        CONST_VTBL struct Settings2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Settings2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Settings2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Settings2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Settings2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Settings2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Settings2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Settings2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Settings2_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Settings2_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Settings2_get_Effective(This,settings)	\
    ( (This)->lpVtbl -> get_Effective(This,settings) ) 

#define Settings2_get_Global(This,settings)	\
    ( (This)->lpVtbl -> get_Global(This,settings) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Settings2_INTERFACE_DEFINED__ */


#ifndef __SetFileScope_INTERFACE_DEFINED__
#define __SetFileScope_INTERFACE_DEFINED__

/* interface SetFileScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_SetFileScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("201a7966-e51c-48fd-be98-e6f92f1d1116")
    SetFileScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Screen( 
            /* [retval][out] */ ScreenSettingsScope **screen) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Keyboard( 
            /* [retval][out] */ KeyboardSettingsScope **keyboard) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Mouse( 
            /* [retval][out] */ MouseSettingsScope **mouse) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_General( 
            /* [retval][out] */ GeneralSettingsScope **general) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Braille( 
            /* [retval][out] */ BrailleSettingsScope **braille) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Hotkeys( 
            /* [retval][out] */ HotkeysScope **hotKeys) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Verbosity( 
            /* [retval][out] */ VerbosityScope **verbosity) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SetFileScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SetFileScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SetFileScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SetFileScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SetFileScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SetFileScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SetFileScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SetFileScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SetFileScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SetFileScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Screen )( 
            SetFileScope * This,
            /* [retval][out] */ ScreenSettingsScope **screen);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Keyboard )( 
            SetFileScope * This,
            /* [retval][out] */ KeyboardSettingsScope **keyboard);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mouse )( 
            SetFileScope * This,
            /* [retval][out] */ MouseSettingsScope **mouse);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_General )( 
            SetFileScope * This,
            /* [retval][out] */ GeneralSettingsScope **general);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Braille )( 
            SetFileScope * This,
            /* [retval][out] */ BrailleSettingsScope **braille);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Hotkeys )( 
            SetFileScope * This,
            /* [retval][out] */ HotkeysScope **hotKeys);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Verbosity )( 
            SetFileScope * This,
            /* [retval][out] */ VerbosityScope **verbosity);
        
        END_INTERFACE
    } SetFileScopeVtbl;

    interface SetFileScope
    {
        CONST_VTBL struct SetFileScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SetFileScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SetFileScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SetFileScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SetFileScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SetFileScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SetFileScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SetFileScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SetFileScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define SetFileScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define SetFileScope_get_Screen(This,screen)	\
    ( (This)->lpVtbl -> get_Screen(This,screen) ) 

#define SetFileScope_get_Keyboard(This,keyboard)	\
    ( (This)->lpVtbl -> get_Keyboard(This,keyboard) ) 

#define SetFileScope_get_Mouse(This,mouse)	\
    ( (This)->lpVtbl -> get_Mouse(This,mouse) ) 

#define SetFileScope_get_General(This,general)	\
    ( (This)->lpVtbl -> get_General(This,general) ) 

#define SetFileScope_get_Braille(This,braille)	\
    ( (This)->lpVtbl -> get_Braille(This,braille) ) 

#define SetFileScope_get_Hotkeys(This,hotKeys)	\
    ( (This)->lpVtbl -> get_Hotkeys(This,hotKeys) ) 

#define SetFileScope_get_Verbosity(This,verbosity)	\
    ( (This)->lpVtbl -> get_Verbosity(This,verbosity) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SetFileScope_INTERFACE_DEFINED__ */


#ifndef __ScreenSettingsScope_INTERFACE_DEFINED__
#define __ScreenSettingsScope_INTERFACE_DEFINED__

/* interface ScreenSettingsScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_ScreenSettingsScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e5ef0f40-35d1-4581-b5b9-f178ca9abf5d")
    ScreenSettingsScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Voice( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Voice( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Pitch( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Pitch( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Tone( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Tone( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Volume( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Volume( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Punctuation( 
            /* [retval][out] */ PunctuationSettingsScope **punc) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Numbers( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Numbers( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CapitalizationAlert( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CapitalizationAlert( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FormatAlert( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_FormatAlert( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpellAlphaNumeric( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpellAlphaNumeric( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SplitMixedCaseWords( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SplitMixedCaseWords( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RepeatFilter( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_RepeatFilter( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BlankLines( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_BlankLines( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SignalCursorPosition( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SignalCursorPosition( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AttributeChanges( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AttributeChanges( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadParagraphStyle( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadParagraphStyle( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineFilter( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_LineFilter( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ScreenSettingsScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ScreenSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ScreenSettingsScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ScreenSettingsScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ScreenSettingsScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ScreenSettingsScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ScreenSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ScreenSettingsScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Voice )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Voice )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pitch )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Pitch )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tone )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tone )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Volume )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Volume )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Punctuation )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ PunctuationSettingsScope **punc);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Numbers )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Numbers )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CapitalizationAlert )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CapitalizationAlert )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FormatAlert )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FormatAlert )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpellAlphaNumeric )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpellAlphaNumeric )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SplitMixedCaseWords )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SplitMixedCaseWords )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RepeatFilter )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RepeatFilter )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BlankLines )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BlankLines )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SignalCursorPosition )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SignalCursorPosition )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AttributeChanges )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AttributeChanges )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadParagraphStyle )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadParagraphStyle )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineFilter )( 
            ScreenSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineFilter )( 
            ScreenSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } ScreenSettingsScopeVtbl;

    interface ScreenSettingsScope
    {
        CONST_VTBL struct ScreenSettingsScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ScreenSettingsScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ScreenSettingsScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ScreenSettingsScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ScreenSettingsScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ScreenSettingsScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ScreenSettingsScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ScreenSettingsScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ScreenSettingsScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ScreenSettingsScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ScreenSettingsScope_get_Voice(This,prop)	\
    ( (This)->lpVtbl -> get_Voice(This,prop) ) 

#define ScreenSettingsScope_put_Voice(This,prop)	\
    ( (This)->lpVtbl -> put_Voice(This,prop) ) 

#define ScreenSettingsScope_get_Rate(This,prop)	\
    ( (This)->lpVtbl -> get_Rate(This,prop) ) 

#define ScreenSettingsScope_put_Rate(This,prop)	\
    ( (This)->lpVtbl -> put_Rate(This,prop) ) 

#define ScreenSettingsScope_get_Pitch(This,prop)	\
    ( (This)->lpVtbl -> get_Pitch(This,prop) ) 

#define ScreenSettingsScope_put_Pitch(This,prop)	\
    ( (This)->lpVtbl -> put_Pitch(This,prop) ) 

#define ScreenSettingsScope_get_Tone(This,prop)	\
    ( (This)->lpVtbl -> get_Tone(This,prop) ) 

#define ScreenSettingsScope_put_Tone(This,prop)	\
    ( (This)->lpVtbl -> put_Tone(This,prop) ) 

#define ScreenSettingsScope_get_Volume(This,prop)	\
    ( (This)->lpVtbl -> get_Volume(This,prop) ) 

#define ScreenSettingsScope_put_Volume(This,prop)	\
    ( (This)->lpVtbl -> put_Volume(This,prop) ) 

#define ScreenSettingsScope_get_Punctuation(This,punc)	\
    ( (This)->lpVtbl -> get_Punctuation(This,punc) ) 

#define ScreenSettingsScope_get_Numbers(This,prop)	\
    ( (This)->lpVtbl -> get_Numbers(This,prop) ) 

#define ScreenSettingsScope_put_Numbers(This,prop)	\
    ( (This)->lpVtbl -> put_Numbers(This,prop) ) 

#define ScreenSettingsScope_get_CapitalizationAlert(This,prop)	\
    ( (This)->lpVtbl -> get_CapitalizationAlert(This,prop) ) 

#define ScreenSettingsScope_put_CapitalizationAlert(This,prop)	\
    ( (This)->lpVtbl -> put_CapitalizationAlert(This,prop) ) 

#define ScreenSettingsScope_get_FormatAlert(This,prop)	\
    ( (This)->lpVtbl -> get_FormatAlert(This,prop) ) 

#define ScreenSettingsScope_put_FormatAlert(This,prop)	\
    ( (This)->lpVtbl -> put_FormatAlert(This,prop) ) 

#define ScreenSettingsScope_get_SpellAlphaNumeric(This,prop)	\
    ( (This)->lpVtbl -> get_SpellAlphaNumeric(This,prop) ) 

#define ScreenSettingsScope_put_SpellAlphaNumeric(This,prop)	\
    ( (This)->lpVtbl -> put_SpellAlphaNumeric(This,prop) ) 

#define ScreenSettingsScope_get_SplitMixedCaseWords(This,prop)	\
    ( (This)->lpVtbl -> get_SplitMixedCaseWords(This,prop) ) 

#define ScreenSettingsScope_put_SplitMixedCaseWords(This,prop)	\
    ( (This)->lpVtbl -> put_SplitMixedCaseWords(This,prop) ) 

#define ScreenSettingsScope_get_RepeatFilter(This,prop)	\
    ( (This)->lpVtbl -> get_RepeatFilter(This,prop) ) 

#define ScreenSettingsScope_put_RepeatFilter(This,prop)	\
    ( (This)->lpVtbl -> put_RepeatFilter(This,prop) ) 

#define ScreenSettingsScope_get_BlankLines(This,prop)	\
    ( (This)->lpVtbl -> get_BlankLines(This,prop) ) 

#define ScreenSettingsScope_put_BlankLines(This,prop)	\
    ( (This)->lpVtbl -> put_BlankLines(This,prop) ) 

#define ScreenSettingsScope_get_SignalCursorPosition(This,prop)	\
    ( (This)->lpVtbl -> get_SignalCursorPosition(This,prop) ) 

#define ScreenSettingsScope_put_SignalCursorPosition(This,prop)	\
    ( (This)->lpVtbl -> put_SignalCursorPosition(This,prop) ) 

#define ScreenSettingsScope_get_AttributeChanges(This,prop)	\
    ( (This)->lpVtbl -> get_AttributeChanges(This,prop) ) 

#define ScreenSettingsScope_put_AttributeChanges(This,prop)	\
    ( (This)->lpVtbl -> put_AttributeChanges(This,prop) ) 

#define ScreenSettingsScope_get_ReadParagraphStyle(This,prop)	\
    ( (This)->lpVtbl -> get_ReadParagraphStyle(This,prop) ) 

#define ScreenSettingsScope_put_ReadParagraphStyle(This,prop)	\
    ( (This)->lpVtbl -> put_ReadParagraphStyle(This,prop) ) 

#define ScreenSettingsScope_get_LineFilter(This,prop)	\
    ( (This)->lpVtbl -> get_LineFilter(This,prop) ) 

#define ScreenSettingsScope_put_LineFilter(This,prop)	\
    ( (This)->lpVtbl -> put_LineFilter(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ScreenSettingsScope_INTERFACE_DEFINED__ */


#ifndef __KeyboardSettingsScope_INTERFACE_DEFINED__
#define __KeyboardSettingsScope_INTERFACE_DEFINED__

/* interface KeyboardSettingsScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_KeyboardSettingsScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b3509cbf-064f-4796-84d1-904d315abafb")
    KeyboardSettingsScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Voice( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Voice( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Pitch( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Pitch( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Tone( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Tone( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Volume( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Volume( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Punctuation( 
            /* [retval][out] */ PunctuationSettingsScope **punc) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpecialKeys( 
            /* [retval][out] */ SpecialKeySettingsScope **specialKeys) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CapitalMode( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CapitalMode( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Interruptability( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Interruptability( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct KeyboardSettingsScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            KeyboardSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            KeyboardSettingsScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            KeyboardSettingsScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            KeyboardSettingsScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            KeyboardSettingsScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            KeyboardSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            KeyboardSettingsScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            KeyboardSettingsScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            KeyboardSettingsScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Voice )( 
            KeyboardSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Voice )( 
            KeyboardSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            KeyboardSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            KeyboardSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pitch )( 
            KeyboardSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Pitch )( 
            KeyboardSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tone )( 
            KeyboardSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tone )( 
            KeyboardSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Volume )( 
            KeyboardSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Volume )( 
            KeyboardSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Punctuation )( 
            KeyboardSettingsScope * This,
            /* [retval][out] */ PunctuationSettingsScope **punc);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpecialKeys )( 
            KeyboardSettingsScope * This,
            /* [retval][out] */ SpecialKeySettingsScope **specialKeys);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CapitalMode )( 
            KeyboardSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CapitalMode )( 
            KeyboardSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Interruptability )( 
            KeyboardSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Interruptability )( 
            KeyboardSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } KeyboardSettingsScopeVtbl;

    interface KeyboardSettingsScope
    {
        CONST_VTBL struct KeyboardSettingsScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define KeyboardSettingsScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define KeyboardSettingsScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define KeyboardSettingsScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define KeyboardSettingsScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define KeyboardSettingsScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define KeyboardSettingsScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define KeyboardSettingsScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define KeyboardSettingsScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define KeyboardSettingsScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define KeyboardSettingsScope_get_Voice(This,prop)	\
    ( (This)->lpVtbl -> get_Voice(This,prop) ) 

#define KeyboardSettingsScope_put_Voice(This,prop)	\
    ( (This)->lpVtbl -> put_Voice(This,prop) ) 

#define KeyboardSettingsScope_get_Rate(This,prop)	\
    ( (This)->lpVtbl -> get_Rate(This,prop) ) 

#define KeyboardSettingsScope_put_Rate(This,prop)	\
    ( (This)->lpVtbl -> put_Rate(This,prop) ) 

#define KeyboardSettingsScope_get_Pitch(This,prop)	\
    ( (This)->lpVtbl -> get_Pitch(This,prop) ) 

#define KeyboardSettingsScope_put_Pitch(This,prop)	\
    ( (This)->lpVtbl -> put_Pitch(This,prop) ) 

#define KeyboardSettingsScope_get_Tone(This,prop)	\
    ( (This)->lpVtbl -> get_Tone(This,prop) ) 

#define KeyboardSettingsScope_put_Tone(This,prop)	\
    ( (This)->lpVtbl -> put_Tone(This,prop) ) 

#define KeyboardSettingsScope_get_Volume(This,prop)	\
    ( (This)->lpVtbl -> get_Volume(This,prop) ) 

#define KeyboardSettingsScope_put_Volume(This,prop)	\
    ( (This)->lpVtbl -> put_Volume(This,prop) ) 

#define KeyboardSettingsScope_get_Punctuation(This,punc)	\
    ( (This)->lpVtbl -> get_Punctuation(This,punc) ) 

#define KeyboardSettingsScope_get_SpecialKeys(This,specialKeys)	\
    ( (This)->lpVtbl -> get_SpecialKeys(This,specialKeys) ) 

#define KeyboardSettingsScope_get_CapitalMode(This,prop)	\
    ( (This)->lpVtbl -> get_CapitalMode(This,prop) ) 

#define KeyboardSettingsScope_put_CapitalMode(This,prop)	\
    ( (This)->lpVtbl -> put_CapitalMode(This,prop) ) 

#define KeyboardSettingsScope_get_Interruptability(This,prop)	\
    ( (This)->lpVtbl -> get_Interruptability(This,prop) ) 

#define KeyboardSettingsScope_put_Interruptability(This,prop)	\
    ( (This)->lpVtbl -> put_Interruptability(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __KeyboardSettingsScope_INTERFACE_DEFINED__ */


#ifndef __MouseSettingsScope_INTERFACE_DEFINED__
#define __MouseSettingsScope_INTERFACE_DEFINED__

/* interface MouseSettingsScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_MouseSettingsScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("340b121b-9d18-4149-9088-f125be7bc19d")
    MouseSettingsScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Voice( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Voice( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Rate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Pitch( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Pitch( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Tone( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Tone( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Volume( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Volume( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Boundary( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Boundary( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Buttons( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Buttons( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Movement( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Movement( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Interruptability( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Interruptability( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TrackFocus( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_TrackFocus( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_UpDownSpeak( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_UpDownSpeak( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SearchAttributes( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SearchAttributes( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MouseSettingsScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MouseSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MouseSettingsScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MouseSettingsScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MouseSettingsScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MouseSettingsScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MouseSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MouseSettingsScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MouseSettingsScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MouseSettingsScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Voice )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Voice )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rate )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Rate )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pitch )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Pitch )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tone )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tone )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Volume )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Volume )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Boundary )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Boundary )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Buttons )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Buttons )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Movement )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Movement )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Interruptability )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Interruptability )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TrackFocus )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TrackFocus )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpDownSpeak )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UpDownSpeak )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SearchAttributes )( 
            MouseSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SearchAttributes )( 
            MouseSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } MouseSettingsScopeVtbl;

    interface MouseSettingsScope
    {
        CONST_VTBL struct MouseSettingsScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MouseSettingsScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MouseSettingsScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MouseSettingsScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MouseSettingsScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MouseSettingsScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MouseSettingsScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MouseSettingsScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MouseSettingsScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define MouseSettingsScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define MouseSettingsScope_get_Voice(This,prop)	\
    ( (This)->lpVtbl -> get_Voice(This,prop) ) 

#define MouseSettingsScope_put_Voice(This,prop)	\
    ( (This)->lpVtbl -> put_Voice(This,prop) ) 

#define MouseSettingsScope_get_Rate(This,prop)	\
    ( (This)->lpVtbl -> get_Rate(This,prop) ) 

#define MouseSettingsScope_put_Rate(This,prop)	\
    ( (This)->lpVtbl -> put_Rate(This,prop) ) 

#define MouseSettingsScope_get_Pitch(This,prop)	\
    ( (This)->lpVtbl -> get_Pitch(This,prop) ) 

#define MouseSettingsScope_put_Pitch(This,prop)	\
    ( (This)->lpVtbl -> put_Pitch(This,prop) ) 

#define MouseSettingsScope_get_Tone(This,prop)	\
    ( (This)->lpVtbl -> get_Tone(This,prop) ) 

#define MouseSettingsScope_put_Tone(This,prop)	\
    ( (This)->lpVtbl -> put_Tone(This,prop) ) 

#define MouseSettingsScope_get_Volume(This,prop)	\
    ( (This)->lpVtbl -> get_Volume(This,prop) ) 

#define MouseSettingsScope_put_Volume(This,prop)	\
    ( (This)->lpVtbl -> put_Volume(This,prop) ) 

#define MouseSettingsScope_get_Boundary(This,prop)	\
    ( (This)->lpVtbl -> get_Boundary(This,prop) ) 

#define MouseSettingsScope_put_Boundary(This,prop)	\
    ( (This)->lpVtbl -> put_Boundary(This,prop) ) 

#define MouseSettingsScope_get_Buttons(This,prop)	\
    ( (This)->lpVtbl -> get_Buttons(This,prop) ) 

#define MouseSettingsScope_put_Buttons(This,prop)	\
    ( (This)->lpVtbl -> put_Buttons(This,prop) ) 

#define MouseSettingsScope_get_Movement(This,prop)	\
    ( (This)->lpVtbl -> get_Movement(This,prop) ) 

#define MouseSettingsScope_put_Movement(This,prop)	\
    ( (This)->lpVtbl -> put_Movement(This,prop) ) 

#define MouseSettingsScope_get_Interruptability(This,prop)	\
    ( (This)->lpVtbl -> get_Interruptability(This,prop) ) 

#define MouseSettingsScope_put_Interruptability(This,prop)	\
    ( (This)->lpVtbl -> put_Interruptability(This,prop) ) 

#define MouseSettingsScope_get_TrackFocus(This,prop)	\
    ( (This)->lpVtbl -> get_TrackFocus(This,prop) ) 

#define MouseSettingsScope_put_TrackFocus(This,prop)	\
    ( (This)->lpVtbl -> put_TrackFocus(This,prop) ) 

#define MouseSettingsScope_get_UpDownSpeak(This,prop)	\
    ( (This)->lpVtbl -> get_UpDownSpeak(This,prop) ) 

#define MouseSettingsScope_put_UpDownSpeak(This,prop)	\
    ( (This)->lpVtbl -> put_UpDownSpeak(This,prop) ) 

#define MouseSettingsScope_get_SearchAttributes(This,prop)	\
    ( (This)->lpVtbl -> get_SearchAttributes(This,prop) ) 

#define MouseSettingsScope_put_SearchAttributes(This,prop)	\
    ( (This)->lpVtbl -> put_SearchAttributes(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MouseSettingsScope_INTERFACE_DEFINED__ */


#ifndef __GeneralSettingsScope_INTERFACE_DEFINED__
#define __GeneralSettingsScope_INTERFACE_DEFINED__

/* interface GeneralSettingsScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_GeneralSettingsScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("652a6567-793b-4502-ad03-6a989d6e7c45")
    GeneralSettingsScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Voice( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Braille( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_HotKeys( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorKeys( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_HighlightTrack( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CharacterDictionary( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CharacterDictionary( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeyLabelDictionary( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeyLabelDictionary( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExceptionDictionary( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExceptionDictionary( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_GraphicDictionary( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_GraphicDictionary( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColorDictionary( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ColorDictionary( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowSpeakWindowsInEditBoxes( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AllowSpeakWindowsInEditBoxes( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorDelay( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CursorDelay( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TriggerDelay( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_TriggerDelay( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpaceThreshold( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpaceThreshold( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AllowAutoRedraw( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeakTooltips( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeakTooltips( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrowseMode( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_BrowseMode( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeBoxInHighlight( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeBoxInHighlight( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_HighlightedText( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_HighlightedText( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeUserWindowWithBox( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeUserWindowWithBox( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GeneralSettingsScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            GeneralSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            GeneralSettingsScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            GeneralSettingsScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            GeneralSettingsScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            GeneralSettingsScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            GeneralSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            GeneralSettingsScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Voice )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Braille )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HotKeys )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorKeys )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HighlightTrack )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterDictionary )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterDictionary )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeyLabelDictionary )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeyLabelDictionary )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExceptionDictionary )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExceptionDictionary )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_GraphicDictionary )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_GraphicDictionary )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColorDictionary )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ColorDictionary )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowSpeakWindowsInEditBoxes )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AllowSpeakWindowsInEditBoxes )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorDelay )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CursorDelay )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TriggerDelay )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TriggerDelay )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceThreshold )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceThreshold )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AllowAutoRedraw )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeakTooltips )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeakTooltips )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseMode )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BrowseMode )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeBoxInHighlight )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeBoxInHighlight )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HighlightedText )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HighlightedText )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeUserWindowWithBox )( 
            GeneralSettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeUserWindowWithBox )( 
            GeneralSettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } GeneralSettingsScopeVtbl;

    interface GeneralSettingsScope
    {
        CONST_VTBL struct GeneralSettingsScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define GeneralSettingsScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define GeneralSettingsScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define GeneralSettingsScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define GeneralSettingsScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define GeneralSettingsScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define GeneralSettingsScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define GeneralSettingsScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define GeneralSettingsScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define GeneralSettingsScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define GeneralSettingsScope_get_Voice(This,prop)	\
    ( (This)->lpVtbl -> get_Voice(This,prop) ) 

#define GeneralSettingsScope_get_Braille(This,prop)	\
    ( (This)->lpVtbl -> get_Braille(This,prop) ) 

#define GeneralSettingsScope_get_HotKeys(This,prop)	\
    ( (This)->lpVtbl -> get_HotKeys(This,prop) ) 

#define GeneralSettingsScope_get_CursorKeys(This,prop)	\
    ( (This)->lpVtbl -> get_CursorKeys(This,prop) ) 

#define GeneralSettingsScope_get_HighlightTrack(This,prop)	\
    ( (This)->lpVtbl -> get_HighlightTrack(This,prop) ) 

#define GeneralSettingsScope_get_CharacterDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterDictionary(This,prop) ) 

#define GeneralSettingsScope_put_CharacterDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterDictionary(This,prop) ) 

#define GeneralSettingsScope_get_KeyLabelDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_KeyLabelDictionary(This,prop) ) 

#define GeneralSettingsScope_put_KeyLabelDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_KeyLabelDictionary(This,prop) ) 

#define GeneralSettingsScope_get_ExceptionDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_ExceptionDictionary(This,prop) ) 

#define GeneralSettingsScope_put_ExceptionDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_ExceptionDictionary(This,prop) ) 

#define GeneralSettingsScope_get_GraphicDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_GraphicDictionary(This,prop) ) 

#define GeneralSettingsScope_put_GraphicDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_GraphicDictionary(This,prop) ) 

#define GeneralSettingsScope_get_ColorDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_ColorDictionary(This,prop) ) 

#define GeneralSettingsScope_put_ColorDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_ColorDictionary(This,prop) ) 

#define GeneralSettingsScope_get_AllowSpeakWindowsInEditBoxes(This,prop)	\
    ( (This)->lpVtbl -> get_AllowSpeakWindowsInEditBoxes(This,prop) ) 

#define GeneralSettingsScope_put_AllowSpeakWindowsInEditBoxes(This,prop)	\
    ( (This)->lpVtbl -> put_AllowSpeakWindowsInEditBoxes(This,prop) ) 

#define GeneralSettingsScope_get_CursorDelay(This,prop)	\
    ( (This)->lpVtbl -> get_CursorDelay(This,prop) ) 

#define GeneralSettingsScope_put_CursorDelay(This,prop)	\
    ( (This)->lpVtbl -> put_CursorDelay(This,prop) ) 

#define GeneralSettingsScope_get_TriggerDelay(This,prop)	\
    ( (This)->lpVtbl -> get_TriggerDelay(This,prop) ) 

#define GeneralSettingsScope_put_TriggerDelay(This,prop)	\
    ( (This)->lpVtbl -> put_TriggerDelay(This,prop) ) 

#define GeneralSettingsScope_get_SpaceThreshold(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceThreshold(This,prop) ) 

#define GeneralSettingsScope_put_SpaceThreshold(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceThreshold(This,prop) ) 

#define GeneralSettingsScope_get_AllowAutoRedraw(This,prop)	\
    ( (This)->lpVtbl -> get_AllowAutoRedraw(This,prop) ) 

#define GeneralSettingsScope_get_SpeakTooltips(This,prop)	\
    ( (This)->lpVtbl -> get_SpeakTooltips(This,prop) ) 

#define GeneralSettingsScope_put_SpeakTooltips(This,prop)	\
    ( (This)->lpVtbl -> put_SpeakTooltips(This,prop) ) 

#define GeneralSettingsScope_get_BrowseMode(This,prop)	\
    ( (This)->lpVtbl -> get_BrowseMode(This,prop) ) 

#define GeneralSettingsScope_put_BrowseMode(This,prop)	\
    ( (This)->lpVtbl -> put_BrowseMode(This,prop) ) 

#define GeneralSettingsScope_get_IncludeBoxInHighlight(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeBoxInHighlight(This,prop) ) 

#define GeneralSettingsScope_put_IncludeBoxInHighlight(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeBoxInHighlight(This,prop) ) 

#define GeneralSettingsScope_get_HighlightedText(This,prop)	\
    ( (This)->lpVtbl -> get_HighlightedText(This,prop) ) 

#define GeneralSettingsScope_put_HighlightedText(This,prop)	\
    ( (This)->lpVtbl -> put_HighlightedText(This,prop) ) 

#define GeneralSettingsScope_get_IncludeUserWindowWithBox(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeUserWindowWithBox(This,prop) ) 

#define GeneralSettingsScope_put_IncludeUserWindowWithBox(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeUserWindowWithBox(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __GeneralSettingsScope_INTERFACE_DEFINED__ */


#ifndef __HotkeysScope_INTERFACE_DEFINED__
#define __HotkeysScope_INTERFACE_DEFINED__

/* interface HotkeysScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_HotkeysScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("944f4e76-6622-4ce3-a310-b98881b94c9f")
    HotkeysScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ HotkeyScope **HotKey) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HotkeysScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HotkeysScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HotkeysScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HotkeysScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HotkeysScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HotkeysScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HotkeysScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HotkeysScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HotkeysScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HotkeysScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            HotkeysScope * This,
            /* [retval][out] */ long *count);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            HotkeysScope * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            HotkeysScope * This,
            /* [in] */ long index,
            /* [retval][out] */ HotkeyScope **HotKey);
        
        END_INTERFACE
    } HotkeysScopeVtbl;

    interface HotkeysScope
    {
        CONST_VTBL struct HotkeysScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HotkeysScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HotkeysScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HotkeysScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HotkeysScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HotkeysScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HotkeysScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HotkeysScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HotkeysScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define HotkeysScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define HotkeysScope_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define HotkeysScope_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define HotkeysScope_Item(This,index,HotKey)	\
    ( (This)->lpVtbl -> Item(This,index,HotKey) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HotkeysScope_INTERFACE_DEFINED__ */


#ifndef __HotkeyScope_INTERFACE_DEFINED__
#define __HotkeyScope_INTERFACE_DEFINED__

/* interface HotkeyScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_HotkeyScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6b44a13f-c36f-4586-86db-8de768ac7125")
    HotkeyScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Scope( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Scope( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HotkeyScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HotkeyScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HotkeyScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HotkeyScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HotkeyScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HotkeyScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HotkeyScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HotkeyScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HotkeyScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HotkeyScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scope )( 
            HotkeyScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Scope )( 
            HotkeyScope * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } HotkeyScopeVtbl;

    interface HotkeyScope
    {
        CONST_VTBL struct HotkeyScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HotkeyScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HotkeyScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HotkeyScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HotkeyScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HotkeyScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HotkeyScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HotkeyScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HotkeyScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define HotkeyScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define HotkeyScope_get_Scope(This,prop)	\
    ( (This)->lpVtbl -> get_Scope(This,prop) ) 

#define HotkeyScope_put_Scope(This,prop)	\
    ( (This)->lpVtbl -> put_Scope(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HotkeyScope_INTERFACE_DEFINED__ */


#ifndef __VerbosityScope_INTERFACE_DEFINED__
#define __VerbosityScope_INTERFACE_DEFINED__

/* interface VerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_VerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("db786d7d-e09a-4255-a202-da801fa0f0cb")
    VerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Menu( 
            /* [retval][out] */ MenuVerbosityScope **menu) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Activated( 
            /* [retval][out] */ ActivatedVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ FocusedVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Attribute( 
            /* [retval][out] */ AttributeChangeVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Miscellaneous( 
            /* [retval][out] */ MiscVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrowseMode( 
            /* [retval][out] */ BrowseModeVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Mouse( 
            /* [retval][out] */ MouseVerbosityScope **mouse) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct VerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            VerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            VerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            VerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            VerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            VerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            VerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            VerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            VerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            VerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Menu )( 
            VerbosityScope * This,
            /* [retval][out] */ MenuVerbosityScope **menu);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Activated )( 
            VerbosityScope * This,
            /* [retval][out] */ ActivatedVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            VerbosityScope * This,
            /* [retval][out] */ FocusedVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Attribute )( 
            VerbosityScope * This,
            /* [retval][out] */ AttributeChangeVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Miscellaneous )( 
            VerbosityScope * This,
            /* [retval][out] */ MiscVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseMode )( 
            VerbosityScope * This,
            /* [retval][out] */ BrowseModeVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Mouse )( 
            VerbosityScope * This,
            /* [retval][out] */ MouseVerbosityScope **mouse);
        
        END_INTERFACE
    } VerbosityScopeVtbl;

    interface VerbosityScope
    {
        CONST_VTBL struct VerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define VerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define VerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define VerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define VerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define VerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define VerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define VerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define VerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define VerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define VerbosityScope_get_Menu(This,menu)	\
    ( (This)->lpVtbl -> get_Menu(This,menu) ) 

#define VerbosityScope_get_Activated(This,obj)	\
    ( (This)->lpVtbl -> get_Activated(This,obj) ) 

#define VerbosityScope_get_Focused(This,obj)	\
    ( (This)->lpVtbl -> get_Focused(This,obj) ) 

#define VerbosityScope_get_Attribute(This,obj)	\
    ( (This)->lpVtbl -> get_Attribute(This,obj) ) 

#define VerbosityScope_get_Miscellaneous(This,obj)	\
    ( (This)->lpVtbl -> get_Miscellaneous(This,obj) ) 

#define VerbosityScope_get_BrowseMode(This,obj)	\
    ( (This)->lpVtbl -> get_BrowseMode(This,obj) ) 

#define VerbosityScope_get_Mouse(This,mouse)	\
    ( (This)->lpVtbl -> get_Mouse(This,mouse) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __VerbosityScope_INTERFACE_DEFINED__ */


#ifndef __PunctuationSettingsScope_INTERFACE_DEFINED__
#define __PunctuationSettingsScope_INTERFACE_DEFINED__

/* interface PunctuationSettingsScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_PunctuationSettingsScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9fbab55b-0436-4157-b22f-ee7f2ed9b6cd")
    PunctuationSettingsScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Textual( 
            /* [retval][out] */ SetFileScopes *scope) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Textual( 
            /* [in] */ SetFileScopes scope) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Math( 
            /* [retval][out] */ SetFileScopes *scope) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Math( 
            /* [in] */ SetFileScopes scope) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Miscellaneous( 
            /* [retval][out] */ SetFileScopes *scope) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Miscellaneous( 
            /* [in] */ SetFileScopes scope) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Space( 
            /* [retval][out] */ SetFileScopes *scope) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Space( 
            /* [in] */ SetFileScopes scope) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PunctuationSettingsScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PunctuationSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PunctuationSettingsScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PunctuationSettingsScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PunctuationSettingsScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PunctuationSettingsScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PunctuationSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PunctuationSettingsScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            PunctuationSettingsScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PunctuationSettingsScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Textual )( 
            PunctuationSettingsScope * This,
            /* [retval][out] */ SetFileScopes *scope);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Textual )( 
            PunctuationSettingsScope * This,
            /* [in] */ SetFileScopes scope);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Math )( 
            PunctuationSettingsScope * This,
            /* [retval][out] */ SetFileScopes *scope);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Math )( 
            PunctuationSettingsScope * This,
            /* [in] */ SetFileScopes scope);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Miscellaneous )( 
            PunctuationSettingsScope * This,
            /* [retval][out] */ SetFileScopes *scope);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Miscellaneous )( 
            PunctuationSettingsScope * This,
            /* [in] */ SetFileScopes scope);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Space )( 
            PunctuationSettingsScope * This,
            /* [retval][out] */ SetFileScopes *scope);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Space )( 
            PunctuationSettingsScope * This,
            /* [in] */ SetFileScopes scope);
        
        END_INTERFACE
    } PunctuationSettingsScopeVtbl;

    interface PunctuationSettingsScope
    {
        CONST_VTBL struct PunctuationSettingsScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PunctuationSettingsScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PunctuationSettingsScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PunctuationSettingsScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PunctuationSettingsScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PunctuationSettingsScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PunctuationSettingsScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PunctuationSettingsScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PunctuationSettingsScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define PunctuationSettingsScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define PunctuationSettingsScope_get_Textual(This,scope)	\
    ( (This)->lpVtbl -> get_Textual(This,scope) ) 

#define PunctuationSettingsScope_put_Textual(This,scope)	\
    ( (This)->lpVtbl -> put_Textual(This,scope) ) 

#define PunctuationSettingsScope_get_Math(This,scope)	\
    ( (This)->lpVtbl -> get_Math(This,scope) ) 

#define PunctuationSettingsScope_put_Math(This,scope)	\
    ( (This)->lpVtbl -> put_Math(This,scope) ) 

#define PunctuationSettingsScope_get_Miscellaneous(This,scope)	\
    ( (This)->lpVtbl -> get_Miscellaneous(This,scope) ) 

#define PunctuationSettingsScope_put_Miscellaneous(This,scope)	\
    ( (This)->lpVtbl -> put_Miscellaneous(This,scope) ) 

#define PunctuationSettingsScope_get_Space(This,scope)	\
    ( (This)->lpVtbl -> get_Space(This,scope) ) 

#define PunctuationSettingsScope_put_Space(This,scope)	\
    ( (This)->lpVtbl -> put_Space(This,scope) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PunctuationSettingsScope_INTERFACE_DEFINED__ */


#ifndef __SpecialKeySettingsScope_INTERFACE_DEFINED__
#define __SpecialKeySettingsScope_INTERFACE_DEFINED__

/* interface SpecialKeySettingsScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_SpecialKeySettingsScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3e143270-1e9d-4f20-86a5-c305c1fc37c0")
    SpecialKeySettingsScope : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FunctionKeys( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FunctionKeys( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ToggleKeys( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ToggleKeys( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_KeyEnhancements( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_KeyEnhancements( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EscapeKey( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EscapeKey( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnterKey( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnterKey( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EnableBothInsertsAsModifier( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EnableBothInsertsAsModifier( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorMovement( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_CursorMovement( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SpecialKeySettingsScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SpecialKeySettingsScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SpecialKeySettingsScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SpecialKeySettingsScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SpecialKeySettingsScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SpecialKeySettingsScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SpecialKeySettingsScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SpecialKeySettingsScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SpecialKeySettingsScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SpecialKeySettingsScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionKeys )( 
            SpecialKeySettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FunctionKeys )( 
            SpecialKeySettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ToggleKeys )( 
            SpecialKeySettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ToggleKeys )( 
            SpecialKeySettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_KeyEnhancements )( 
            SpecialKeySettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_KeyEnhancements )( 
            SpecialKeySettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EscapeKey )( 
            SpecialKeySettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EscapeKey )( 
            SpecialKeySettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnterKey )( 
            SpecialKeySettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnterKey )( 
            SpecialKeySettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EnableBothInsertsAsModifier )( 
            SpecialKeySettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EnableBothInsertsAsModifier )( 
            SpecialKeySettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorMovement )( 
            SpecialKeySettingsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CursorMovement )( 
            SpecialKeySettingsScope * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } SpecialKeySettingsScopeVtbl;

    interface SpecialKeySettingsScope
    {
        CONST_VTBL struct SpecialKeySettingsScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SpecialKeySettingsScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SpecialKeySettingsScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SpecialKeySettingsScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SpecialKeySettingsScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SpecialKeySettingsScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SpecialKeySettingsScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SpecialKeySettingsScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SpecialKeySettingsScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define SpecialKeySettingsScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define SpecialKeySettingsScope_get_FunctionKeys(This,prop)	\
    ( (This)->lpVtbl -> get_FunctionKeys(This,prop) ) 

#define SpecialKeySettingsScope_put_FunctionKeys(This,prop)	\
    ( (This)->lpVtbl -> put_FunctionKeys(This,prop) ) 

#define SpecialKeySettingsScope_get_ToggleKeys(This,prop)	\
    ( (This)->lpVtbl -> get_ToggleKeys(This,prop) ) 

#define SpecialKeySettingsScope_put_ToggleKeys(This,prop)	\
    ( (This)->lpVtbl -> put_ToggleKeys(This,prop) ) 

#define SpecialKeySettingsScope_get_KeyEnhancements(This,prop)	\
    ( (This)->lpVtbl -> get_KeyEnhancements(This,prop) ) 

#define SpecialKeySettingsScope_put_KeyEnhancements(This,prop)	\
    ( (This)->lpVtbl -> put_KeyEnhancements(This,prop) ) 

#define SpecialKeySettingsScope_get_EscapeKey(This,prop)	\
    ( (This)->lpVtbl -> get_EscapeKey(This,prop) ) 

#define SpecialKeySettingsScope_put_EscapeKey(This,prop)	\
    ( (This)->lpVtbl -> put_EscapeKey(This,prop) ) 

#define SpecialKeySettingsScope_get_EnterKey(This,prop)	\
    ( (This)->lpVtbl -> get_EnterKey(This,prop) ) 

#define SpecialKeySettingsScope_put_EnterKey(This,prop)	\
    ( (This)->lpVtbl -> put_EnterKey(This,prop) ) 

#define SpecialKeySettingsScope_get_EnableBothInsertsAsModifier(This,prop)	\
    ( (This)->lpVtbl -> get_EnableBothInsertsAsModifier(This,prop) ) 

#define SpecialKeySettingsScope_put_EnableBothInsertsAsModifier(This,prop)	\
    ( (This)->lpVtbl -> put_EnableBothInsertsAsModifier(This,prop) ) 

#define SpecialKeySettingsScope_get_CursorMovement(This,prop)	\
    ( (This)->lpVtbl -> get_CursorMovement(This,prop) ) 

#define SpecialKeySettingsScope_put_CursorMovement(This,prop)	\
    ( (This)->lpVtbl -> put_CursorMovement(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SpecialKeySettingsScope_INTERFACE_DEFINED__ */


#ifndef __BrailleSettingsScope_INTERFACE_DEFINED__
#define __BrailleSettingsScope_INTERFACE_DEFINED__

/* interface BrailleSettingsScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleSettingsScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bc7fcc1d-28aa-437d-8b73-b896b6f8b74c")
    BrailleSettingsScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Scrolling( 
            /* [retval][out] */ BrailleScrollingOptionsScope **scrolling) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ControlInformation( 
            /* [retval][out] */ BrailleControlInformationScope **controlInfo) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Options( 
            /* [retval][out] */ BrailleOptionsScope **options) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Graphics( 
            /* [retval][out] */ BrailleGraphicsScope **graphics) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleSettingsScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleSettingsScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleSettingsScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleSettingsScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleSettingsScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleSettingsScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleSettingsScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleSettingsScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleSettingsScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Scrolling )( 
            BrailleSettingsScope * This,
            /* [retval][out] */ BrailleScrollingOptionsScope **scrolling);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ControlInformation )( 
            BrailleSettingsScope * This,
            /* [retval][out] */ BrailleControlInformationScope **controlInfo);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Options )( 
            BrailleSettingsScope * This,
            /* [retval][out] */ BrailleOptionsScope **options);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Graphics )( 
            BrailleSettingsScope * This,
            /* [retval][out] */ BrailleGraphicsScope **graphics);
        
        END_INTERFACE
    } BrailleSettingsScopeVtbl;

    interface BrailleSettingsScope
    {
        CONST_VTBL struct BrailleSettingsScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleSettingsScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleSettingsScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleSettingsScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleSettingsScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleSettingsScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleSettingsScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleSettingsScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleSettingsScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleSettingsScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleSettingsScope_get_Scrolling(This,scrolling)	\
    ( (This)->lpVtbl -> get_Scrolling(This,scrolling) ) 

#define BrailleSettingsScope_get_ControlInformation(This,controlInfo)	\
    ( (This)->lpVtbl -> get_ControlInformation(This,controlInfo) ) 

#define BrailleSettingsScope_get_Options(This,options)	\
    ( (This)->lpVtbl -> get_Options(This,options) ) 

#define BrailleSettingsScope_get_Graphics(This,graphics)	\
    ( (This)->lpVtbl -> get_Graphics(This,graphics) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleSettingsScope_INTERFACE_DEFINED__ */


#ifndef __BrailleScrollingOptionsScope_INTERFACE_DEFINED__
#define __BrailleScrollingOptionsScope_INTERFACE_DEFINED__

/* interface BrailleScrollingOptionsScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleScrollingOptionsScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("dcc11043-4d97-4b4f-b51d-4c02736e60e8")
    BrailleScrollingOptionsScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoRouteCursor( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoRouteCursor( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WholeWordMode( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_WholeWordMode( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScrollingWidth( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScrollingWidth( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateLineChange( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateLineChange( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleScrollingOptionsScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleScrollingOptionsScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleScrollingOptionsScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleScrollingOptionsScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleScrollingOptionsScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleScrollingOptionsScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleScrollingOptionsScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleScrollingOptionsScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleScrollingOptionsScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleScrollingOptionsScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoRouteCursor )( 
            BrailleScrollingOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoRouteCursor )( 
            BrailleScrollingOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WholeWordMode )( 
            BrailleScrollingOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WholeWordMode )( 
            BrailleScrollingOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScrollingWidth )( 
            BrailleScrollingOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ScrollingWidth )( 
            BrailleScrollingOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateLineChange )( 
            BrailleScrollingOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateLineChange )( 
            BrailleScrollingOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } BrailleScrollingOptionsScopeVtbl;

    interface BrailleScrollingOptionsScope
    {
        CONST_VTBL struct BrailleScrollingOptionsScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleScrollingOptionsScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleScrollingOptionsScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleScrollingOptionsScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleScrollingOptionsScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleScrollingOptionsScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleScrollingOptionsScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleScrollingOptionsScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleScrollingOptionsScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleScrollingOptionsScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleScrollingOptionsScope_get_AutoRouteCursor(This,prop)	\
    ( (This)->lpVtbl -> get_AutoRouteCursor(This,prop) ) 

#define BrailleScrollingOptionsScope_put_AutoRouteCursor(This,prop)	\
    ( (This)->lpVtbl -> put_AutoRouteCursor(This,prop) ) 

#define BrailleScrollingOptionsScope_get_WholeWordMode(This,prop)	\
    ( (This)->lpVtbl -> get_WholeWordMode(This,prop) ) 

#define BrailleScrollingOptionsScope_put_WholeWordMode(This,prop)	\
    ( (This)->lpVtbl -> put_WholeWordMode(This,prop) ) 

#define BrailleScrollingOptionsScope_get_ScrollingWidth(This,prop)	\
    ( (This)->lpVtbl -> get_ScrollingWidth(This,prop) ) 

#define BrailleScrollingOptionsScope_put_ScrollingWidth(This,prop)	\
    ( (This)->lpVtbl -> put_ScrollingWidth(This,prop) ) 

#define BrailleScrollingOptionsScope_get_IndicateLineChange(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateLineChange(This,prop) ) 

#define BrailleScrollingOptionsScope_put_IndicateLineChange(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateLineChange(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleScrollingOptionsScope_INTERFACE_DEFINED__ */


#ifndef __BrailleControlInformationScope_INTERFACE_DEFINED__
#define __BrailleControlInformationScope_INTERFACE_DEFINED__

/* interface BrailleControlInformationScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleControlInformationScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("db1a0515-ef94-410f-8aa5-aeaac18d9069")
    BrailleControlInformationScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_InformationOrder( 
            /* [retval][out] */ SetFileScopes *order) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_InformationOrder( 
            /* [in] */ SetFileScopes order) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeName( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeName( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeType( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeType( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeIndex( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeIndex( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleControlInformationScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleControlInformationScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleControlInformationScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleControlInformationScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleControlInformationScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleControlInformationScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleControlInformationScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleControlInformationScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleControlInformationScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleControlInformationScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_InformationOrder )( 
            BrailleControlInformationScope * This,
            /* [retval][out] */ SetFileScopes *order);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_InformationOrder )( 
            BrailleControlInformationScope * This,
            /* [in] */ SetFileScopes order);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeName )( 
            BrailleControlInformationScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeName )( 
            BrailleControlInformationScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeType )( 
            BrailleControlInformationScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeType )( 
            BrailleControlInformationScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeIndex )( 
            BrailleControlInformationScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeIndex )( 
            BrailleControlInformationScope * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } BrailleControlInformationScopeVtbl;

    interface BrailleControlInformationScope
    {
        CONST_VTBL struct BrailleControlInformationScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleControlInformationScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleControlInformationScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleControlInformationScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleControlInformationScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleControlInformationScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleControlInformationScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleControlInformationScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleControlInformationScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleControlInformationScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleControlInformationScope_get_InformationOrder(This,order)	\
    ( (This)->lpVtbl -> get_InformationOrder(This,order) ) 

#define BrailleControlInformationScope_put_InformationOrder(This,order)	\
    ( (This)->lpVtbl -> put_InformationOrder(This,order) ) 

#define BrailleControlInformationScope_get_IncludeName(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeName(This,prop) ) 

#define BrailleControlInformationScope_put_IncludeName(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeName(This,prop) ) 

#define BrailleControlInformationScope_get_IncludeType(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeType(This,prop) ) 

#define BrailleControlInformationScope_put_IncludeType(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeType(This,prop) ) 

#define BrailleControlInformationScope_get_IncludeIndex(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeIndex(This,prop) ) 

#define BrailleControlInformationScope_put_IncludeIndex(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeIndex(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleControlInformationScope_INTERFACE_DEFINED__ */


#ifndef __BrailleOptionsScope_INTERFACE_DEFINED__
#define __BrailleOptionsScope_INTERFACE_DEFINED__

/* interface BrailleOptionsScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleOptionsScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ae632bb5-d26f-4db3-abca-575a6b5f3c37")
    BrailleOptionsScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Grade2Enabled( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Grade2Enabled( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Grade2AutoUntranslate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Grade2AutoUntranslate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Grade2TranslateSymbols( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Grade2TranslateSymbols( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EightDot( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EightDot( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoUpdateTimeout( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoUpdateTimeout( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AttributeMarking( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AttributeMarking( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_QuickMessageMode( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_QuickMessageMode( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_QuickMessageModeTimeout( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_QuickMessageModeTimeout( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ShowIndents( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ShowIndents( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExtraSpacing( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExtraSpacing( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleOptionsScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleOptionsScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleOptionsScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleOptionsScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleOptionsScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleOptionsScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleOptionsScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleOptionsScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Grade2Enabled )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Grade2Enabled )( 
            BrailleOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Grade2AutoUntranslate )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Grade2AutoUntranslate )( 
            BrailleOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Grade2TranslateSymbols )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Grade2TranslateSymbols )( 
            BrailleOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EightDot )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EightDot )( 
            BrailleOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdateTimeout )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdateTimeout )( 
            BrailleOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AttributeMarking )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AttributeMarking )( 
            BrailleOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuickMessageMode )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuickMessageMode )( 
            BrailleOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuickMessageModeTimeout )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuickMessageModeTimeout )( 
            BrailleOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ShowIndents )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ShowIndents )( 
            BrailleOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtraSpacing )( 
            BrailleOptionsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExtraSpacing )( 
            BrailleOptionsScope * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } BrailleOptionsScopeVtbl;

    interface BrailleOptionsScope
    {
        CONST_VTBL struct BrailleOptionsScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleOptionsScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleOptionsScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleOptionsScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleOptionsScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleOptionsScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleOptionsScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleOptionsScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleOptionsScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleOptionsScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleOptionsScope_get_Grade2Enabled(This,prop)	\
    ( (This)->lpVtbl -> get_Grade2Enabled(This,prop) ) 

#define BrailleOptionsScope_put_Grade2Enabled(This,prop)	\
    ( (This)->lpVtbl -> put_Grade2Enabled(This,prop) ) 

#define BrailleOptionsScope_get_Grade2AutoUntranslate(This,prop)	\
    ( (This)->lpVtbl -> get_Grade2AutoUntranslate(This,prop) ) 

#define BrailleOptionsScope_put_Grade2AutoUntranslate(This,prop)	\
    ( (This)->lpVtbl -> put_Grade2AutoUntranslate(This,prop) ) 

#define BrailleOptionsScope_get_Grade2TranslateSymbols(This,prop)	\
    ( (This)->lpVtbl -> get_Grade2TranslateSymbols(This,prop) ) 

#define BrailleOptionsScope_put_Grade2TranslateSymbols(This,prop)	\
    ( (This)->lpVtbl -> put_Grade2TranslateSymbols(This,prop) ) 

#define BrailleOptionsScope_get_EightDot(This,prop)	\
    ( (This)->lpVtbl -> get_EightDot(This,prop) ) 

#define BrailleOptionsScope_put_EightDot(This,prop)	\
    ( (This)->lpVtbl -> put_EightDot(This,prop) ) 

#define BrailleOptionsScope_get_AutoUpdateTimeout(This,prop)	\
    ( (This)->lpVtbl -> get_AutoUpdateTimeout(This,prop) ) 

#define BrailleOptionsScope_put_AutoUpdateTimeout(This,prop)	\
    ( (This)->lpVtbl -> put_AutoUpdateTimeout(This,prop) ) 

#define BrailleOptionsScope_get_AttributeMarking(This,prop)	\
    ( (This)->lpVtbl -> get_AttributeMarking(This,prop) ) 

#define BrailleOptionsScope_put_AttributeMarking(This,prop)	\
    ( (This)->lpVtbl -> put_AttributeMarking(This,prop) ) 

#define BrailleOptionsScope_get_QuickMessageMode(This,prop)	\
    ( (This)->lpVtbl -> get_QuickMessageMode(This,prop) ) 

#define BrailleOptionsScope_put_QuickMessageMode(This,prop)	\
    ( (This)->lpVtbl -> put_QuickMessageMode(This,prop) ) 

#define BrailleOptionsScope_get_QuickMessageModeTimeout(This,prop)	\
    ( (This)->lpVtbl -> get_QuickMessageModeTimeout(This,prop) ) 

#define BrailleOptionsScope_put_QuickMessageModeTimeout(This,prop)	\
    ( (This)->lpVtbl -> put_QuickMessageModeTimeout(This,prop) ) 

#define BrailleOptionsScope_get_ShowIndents(This,prop)	\
    ( (This)->lpVtbl -> get_ShowIndents(This,prop) ) 

#define BrailleOptionsScope_put_ShowIndents(This,prop)	\
    ( (This)->lpVtbl -> put_ShowIndents(This,prop) ) 

#define BrailleOptionsScope_get_ExtraSpacing(This,prop)	\
    ( (This)->lpVtbl -> get_ExtraSpacing(This,prop) ) 

#define BrailleOptionsScope_put_ExtraSpacing(This,prop)	\
    ( (This)->lpVtbl -> put_ExtraSpacing(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleOptionsScope_INTERFACE_DEFINED__ */


#ifndef __BrailleGraphicsScope_INTERFACE_DEFINED__
#define __BrailleGraphicsScope_INTERFACE_DEFINED__

/* interface BrailleGraphicsScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleGraphicsScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1a8caead-0fa1-42bd-a1ef-21d188eaa7d0")
    BrailleGraphicsScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Verbosity( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Verbosity( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Symbol( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Symbol( 
            /* [in] */ SetFileScopes prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleGraphicsScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleGraphicsScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleGraphicsScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleGraphicsScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleGraphicsScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleGraphicsScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleGraphicsScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleGraphicsScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleGraphicsScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleGraphicsScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Verbosity )( 
            BrailleGraphicsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Verbosity )( 
            BrailleGraphicsScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Symbol )( 
            BrailleGraphicsScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Symbol )( 
            BrailleGraphicsScope * This,
            /* [in] */ SetFileScopes prop);
        
        END_INTERFACE
    } BrailleGraphicsScopeVtbl;

    interface BrailleGraphicsScope
    {
        CONST_VTBL struct BrailleGraphicsScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleGraphicsScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleGraphicsScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleGraphicsScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleGraphicsScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleGraphicsScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleGraphicsScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleGraphicsScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleGraphicsScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleGraphicsScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleGraphicsScope_get_Verbosity(This,prop)	\
    ( (This)->lpVtbl -> get_Verbosity(This,prop) ) 

#define BrailleGraphicsScope_put_Verbosity(This,prop)	\
    ( (This)->lpVtbl -> put_Verbosity(This,prop) ) 

#define BrailleGraphicsScope_get_Symbol(This,prop)	\
    ( (This)->lpVtbl -> get_Symbol(This,prop) ) 

#define BrailleGraphicsScope_put_Symbol(This,prop)	\
    ( (This)->lpVtbl -> put_Symbol(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleGraphicsScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeAccessKeyVerbosity_INTERFACE_DEFINED__
#define __BrowseModeAccessKeyVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeAccessKeyVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeAccessKeyVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70afc45c-6452-46a2-a921-5634b2610ac4")
    BrowseModeAccessKeyVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeAccessKeyVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeAccessKeyVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeAccessKeyVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeAccessKeyVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeAccessKeyVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeAccessKeyVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeAccessKeyVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeAccessKeyVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeAccessKeyVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeAccessKeyVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeAccessKeyVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeAccessKeyVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeAccessKeyVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeAccessKeyVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } BrowseModeAccessKeyVerbosityVtbl;

    interface BrowseModeAccessKeyVerbosity
    {
        CONST_VTBL struct BrowseModeAccessKeyVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeAccessKeyVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeAccessKeyVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeAccessKeyVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeAccessKeyVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeAccessKeyVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeAccessKeyVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeAccessKeyVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeAccessKeyVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeAccessKeyVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeAccessKeyVerbosity_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeAccessKeyVerbosity_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeAccessKeyVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeAccessKeyVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeAccessKeyVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeAcronymVerbosity_INTERFACE_DEFINED__
#define __BrowseModeAcronymVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeAcronymVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeAcronymVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7200cd64-3e31-4758-8f1e-69ac82efadcc")
    BrowseModeAcronymVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indication( 
            /* [in] */ BrowseModeAcronymIndication prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indication( 
            /* [retval][out] */ BrowseModeAcronymIndication *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeAcronymVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeAcronymVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeAcronymVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeAcronymVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeAcronymVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeAcronymVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeAcronymVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeAcronymVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeAcronymVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeAcronymVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeAcronymVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeAcronymVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indication )( 
            BrowseModeAcronymVerbosity * This,
            /* [in] */ BrowseModeAcronymIndication prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indication )( 
            BrowseModeAcronymVerbosity * This,
            /* [retval][out] */ BrowseModeAcronymIndication *prop);
        
        END_INTERFACE
    } BrowseModeAcronymVerbosityVtbl;

    interface BrowseModeAcronymVerbosity
    {
        CONST_VTBL struct BrowseModeAcronymVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeAcronymVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeAcronymVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeAcronymVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeAcronymVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeAcronymVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeAcronymVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeAcronymVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeAcronymVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeAcronymVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeAcronymVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeAcronymVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeAcronymVerbosity_put_Indication(This,prop)	\
    ( (This)->lpVtbl -> put_Indication(This,prop) ) 

#define BrowseModeAcronymVerbosity_get_Indication(This,prop)	\
    ( (This)->lpVtbl -> get_Indication(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeAcronymVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeFlashVerbosity_INTERFACE_DEFINED__
#define __BrowseModeFlashVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeFlashVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeFlashVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a387c9d1-d42e-4976-aca0-d1720c3d3a79")
    BrowseModeFlashVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeFlashVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeFlashVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeFlashVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeFlashVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeFlashVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeFlashVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeFlashVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeFlashVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeFlashVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeFlashVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeFlashVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeFlashVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeFlashVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeFlashVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } BrowseModeFlashVerbosityVtbl;

    interface BrowseModeFlashVerbosity
    {
        CONST_VTBL struct BrowseModeFlashVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeFlashVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeFlashVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeFlashVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeFlashVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeFlashVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeFlashVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeFlashVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeFlashVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeFlashVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeFlashVerbosity_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeFlashVerbosity_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeFlashVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeFlashVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeFlashVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeFormVerbosity_INTERFACE_DEFINED__
#define __BrowseModeFormVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeFormVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeFormVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9420d69a-3034-4284-9baa-96b90e75b405")
    BrowseModeFormVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateForms( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateForms( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEndForms( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEndForms( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateFieldsets( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateFieldsets( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEndFieldsets( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEndFieldsets( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeFormVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeFormVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeFormVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeFormVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeFormVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeFormVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeFormVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeFormVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeFormVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeFormVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateForms )( 
            BrowseModeFormVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateForms )( 
            BrowseModeFormVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEndForms )( 
            BrowseModeFormVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEndForms )( 
            BrowseModeFormVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateFieldsets )( 
            BrowseModeFormVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateFieldsets )( 
            BrowseModeFormVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEndFieldsets )( 
            BrowseModeFormVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEndFieldsets )( 
            BrowseModeFormVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } BrowseModeFormVerbosityVtbl;

    interface BrowseModeFormVerbosity
    {
        CONST_VTBL struct BrowseModeFormVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeFormVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeFormVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeFormVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeFormVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeFormVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeFormVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeFormVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeFormVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeFormVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeFormVerbosity_put_IndicateForms(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateForms(This,prop) ) 

#define BrowseModeFormVerbosity_get_IndicateForms(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateForms(This,prop) ) 

#define BrowseModeFormVerbosity_put_ReadToEndForms(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEndForms(This,prop) ) 

#define BrowseModeFormVerbosity_get_ReadToEndForms(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEndForms(This,prop) ) 

#define BrowseModeFormVerbosity_put_IndicateFieldsets(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateFieldsets(This,prop) ) 

#define BrowseModeFormVerbosity_get_IndicateFieldsets(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateFieldsets(This,prop) ) 

#define BrowseModeFormVerbosity_put_ReadToEndFieldsets(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEndFieldsets(This,prop) ) 

#define BrowseModeFormVerbosity_get_ReadToEndFieldsets(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEndFieldsets(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeFormVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeHeadingVerbosity_INTERFACE_DEFINED__
#define __BrowseModeHeadingVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeHeadingVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeHeadingVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ed926ac6-d32d-44ec-8e2c-9d9dc33584cb")
    BrowseModeHeadingVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeHeadingVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeHeadingVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeHeadingVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeHeadingVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeHeadingVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeHeadingVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeHeadingVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeHeadingVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeHeadingVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeHeadingVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeHeadingVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeHeadingVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeHeadingVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeHeadingVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } BrowseModeHeadingVerbosityVtbl;

    interface BrowseModeHeadingVerbosity
    {
        CONST_VTBL struct BrowseModeHeadingVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeHeadingVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeHeadingVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeHeadingVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeHeadingVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeHeadingVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeHeadingVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeHeadingVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeHeadingVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeHeadingVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeHeadingVerbosity_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeHeadingVerbosity_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeHeadingVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeHeadingVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeHeadingVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeLanguageVerbosity_INTERFACE_DEFINED__
#define __BrowseModeLanguageVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeLanguageVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeLanguageVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bbc0faf7-050e-44a3-a1d1-1f107f857e1d")
    BrowseModeLanguageVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoSwitchSynthesizer( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoSwitchSynthesizer( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeLanguageVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeLanguageVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeLanguageVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeLanguageVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeLanguageVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeLanguageVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeLanguageVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeLanguageVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeLanguageVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeLanguageVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeLanguageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeLanguageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeLanguageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeLanguageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoSwitchSynthesizer )( 
            BrowseModeLanguageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSwitchSynthesizer )( 
            BrowseModeLanguageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } BrowseModeLanguageVerbosityVtbl;

    interface BrowseModeLanguageVerbosity
    {
        CONST_VTBL struct BrowseModeLanguageVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeLanguageVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeLanguageVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeLanguageVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeLanguageVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeLanguageVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeLanguageVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeLanguageVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeLanguageVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeLanguageVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeLanguageVerbosity_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeLanguageVerbosity_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeLanguageVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeLanguageVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeLanguageVerbosity_put_AutoSwitchSynthesizer(This,prop)	\
    ( (This)->lpVtbl -> put_AutoSwitchSynthesizer(This,prop) ) 

#define BrowseModeLanguageVerbosity_get_AutoSwitchSynthesizer(This,prop)	\
    ( (This)->lpVtbl -> get_AutoSwitchSynthesizer(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeLanguageVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeLinkVerbosity_INTERFACE_DEFINED__
#define __BrowseModeLinkVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeLinkVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeLinkVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("46b44eca-2291-48dc-b79e-676cb12b5456")
    BrowseModeLinkVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyVisitedLinks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyVisitedLinks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifySamePageLinks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifySamePageLinks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indication( 
            /* [in] */ BrowseModeLinkIndication prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indication( 
            /* [retval][out] */ BrowseModeLinkIndication *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeLinkVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeLinkVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeLinkVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeLinkVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeLinkVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeLinkVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeLinkVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeLinkVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeLinkVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeLinkVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeLinkVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeLinkVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyVisitedLinks )( 
            BrowseModeLinkVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyVisitedLinks )( 
            BrowseModeLinkVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifySamePageLinks )( 
            BrowseModeLinkVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifySamePageLinks )( 
            BrowseModeLinkVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indication )( 
            BrowseModeLinkVerbosity * This,
            /* [in] */ BrowseModeLinkIndication prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indication )( 
            BrowseModeLinkVerbosity * This,
            /* [retval][out] */ BrowseModeLinkIndication *prop);
        
        END_INTERFACE
    } BrowseModeLinkVerbosityVtbl;

    interface BrowseModeLinkVerbosity
    {
        CONST_VTBL struct BrowseModeLinkVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeLinkVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeLinkVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeLinkVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeLinkVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeLinkVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeLinkVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeLinkVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeLinkVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeLinkVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeLinkVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeLinkVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeLinkVerbosity_put_IdentifyVisitedLinks(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyVisitedLinks(This,prop) ) 

#define BrowseModeLinkVerbosity_get_IdentifyVisitedLinks(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyVisitedLinks(This,prop) ) 

#define BrowseModeLinkVerbosity_put_IdentifySamePageLinks(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifySamePageLinks(This,prop) ) 

#define BrowseModeLinkVerbosity_get_IdentifySamePageLinks(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifySamePageLinks(This,prop) ) 

#define BrowseModeLinkVerbosity_put_Indication(This,prop)	\
    ( (This)->lpVtbl -> put_Indication(This,prop) ) 

#define BrowseModeLinkVerbosity_get_Indication(This,prop)	\
    ( (This)->lpVtbl -> get_Indication(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeLinkVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeListVerbosity_INTERFACE_DEFINED__
#define __BrowseModeListVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeListVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeListVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a9d9c347-ed99-4e1d-8dd6-77f86fca48a3")
    BrowseModeListVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateBullets( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateBullets( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEndBullets( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEndBullets( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeListVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeListVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeListVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeListVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeListVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeListVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeListVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeListVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeListVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeListVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeListVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeListVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeListVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeListVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateBullets )( 
            BrowseModeListVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateBullets )( 
            BrowseModeListVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEndBullets )( 
            BrowseModeListVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEndBullets )( 
            BrowseModeListVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } BrowseModeListVerbosityVtbl;

    interface BrowseModeListVerbosity
    {
        CONST_VTBL struct BrowseModeListVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeListVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeListVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeListVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeListVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeListVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeListVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeListVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeListVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeListVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeListVerbosity_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeListVerbosity_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeListVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeListVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeListVerbosity_put_IndicateBullets(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateBullets(This,prop) ) 

#define BrowseModeListVerbosity_get_IndicateBullets(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateBullets(This,prop) ) 

#define BrowseModeListVerbosity_put_ReadToEndBullets(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEndBullets(This,prop) ) 

#define BrowseModeListVerbosity_get_ReadToEndBullets(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEndBullets(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeListVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeLongDescVerbosity_INTERFACE_DEFINED__
#define __BrowseModeLongDescVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeLongDescVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeLongDescVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b53306e3-72bb-48c3-87f2-db1fb5ef1dd8")
    BrowseModeLongDescVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeLongDescVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeLongDescVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeLongDescVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeLongDescVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeLongDescVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeLongDescVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeLongDescVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeLongDescVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeLongDescVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeLongDescVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeLongDescVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeLongDescVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeLongDescVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeLongDescVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } BrowseModeLongDescVerbosityVtbl;

    interface BrowseModeLongDescVerbosity
    {
        CONST_VTBL struct BrowseModeLongDescVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeLongDescVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeLongDescVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeLongDescVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeLongDescVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeLongDescVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeLongDescVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeLongDescVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeLongDescVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeLongDescVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeLongDescVerbosity_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeLongDescVerbosity_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeLongDescVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeLongDescVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeLongDescVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeMiscVerbosity_INTERFACE_DEFINED__
#define __BrowseModeMiscVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeMiscVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeMiscVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("46d8e757-b12b-4ec4-8f5c-0bb48a70807e")
    BrowseModeMiscVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateNewPopups( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateNewPopups( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeGraphicWithNoDescription( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeGraphicWithNoDescription( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_VerbosityHotKeyToSpecificElement( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VerbosityHotKeyToSpecificElement( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoLoad( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoLoad( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NextTextMinimumLineLength( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NextTextMinimumLineLength( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NextTextConsecutiveLines( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NextTextConsecutiveLines( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SuspendRefresh( 
            /* [in] */ BrowseModeSuspendRefresh prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SuspendRefresh( 
            /* [retval][out] */ BrowseModeSuspendRefresh *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeMiscVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeMiscVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeMiscVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeMiscVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeMiscVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeMiscVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeMiscVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeMiscVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeMiscVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeMiscVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateNewPopups )( 
            BrowseModeMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateNewPopups )( 
            BrowseModeMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeGraphicWithNoDescription )( 
            BrowseModeMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeGraphicWithNoDescription )( 
            BrowseModeMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_VerbosityHotKeyToSpecificElement )( 
            BrowseModeMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerbosityHotKeyToSpecificElement )( 
            BrowseModeMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoLoad )( 
            BrowseModeMiscVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoLoad )( 
            BrowseModeMiscVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NextTextMinimumLineLength )( 
            BrowseModeMiscVerbosity * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NextTextMinimumLineLength )( 
            BrowseModeMiscVerbosity * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NextTextConsecutiveLines )( 
            BrowseModeMiscVerbosity * This,
            /* [in] */ short prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NextTextConsecutiveLines )( 
            BrowseModeMiscVerbosity * This,
            /* [retval][out] */ short *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SuspendRefresh )( 
            BrowseModeMiscVerbosity * This,
            /* [in] */ BrowseModeSuspendRefresh prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuspendRefresh )( 
            BrowseModeMiscVerbosity * This,
            /* [retval][out] */ BrowseModeSuspendRefresh *prop);
        
        END_INTERFACE
    } BrowseModeMiscVerbosityVtbl;

    interface BrowseModeMiscVerbosity
    {
        CONST_VTBL struct BrowseModeMiscVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeMiscVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeMiscVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeMiscVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeMiscVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeMiscVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeMiscVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeMiscVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeMiscVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeMiscVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeMiscVerbosity_put_IndicateNewPopups(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateNewPopups(This,prop) ) 

#define BrowseModeMiscVerbosity_get_IndicateNewPopups(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateNewPopups(This,prop) ) 

#define BrowseModeMiscVerbosity_put_IncludeGraphicWithNoDescription(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeGraphicWithNoDescription(This,prop) ) 

#define BrowseModeMiscVerbosity_get_IncludeGraphicWithNoDescription(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeGraphicWithNoDescription(This,prop) ) 

#define BrowseModeMiscVerbosity_put_VerbosityHotKeyToSpecificElement(This,prop)	\
    ( (This)->lpVtbl -> put_VerbosityHotKeyToSpecificElement(This,prop) ) 

#define BrowseModeMiscVerbosity_get_VerbosityHotKeyToSpecificElement(This,prop)	\
    ( (This)->lpVtbl -> get_VerbosityHotKeyToSpecificElement(This,prop) ) 

#define BrowseModeMiscVerbosity_put_AutoLoad(This,prop)	\
    ( (This)->lpVtbl -> put_AutoLoad(This,prop) ) 

#define BrowseModeMiscVerbosity_get_AutoLoad(This,prop)	\
    ( (This)->lpVtbl -> get_AutoLoad(This,prop) ) 

#define BrowseModeMiscVerbosity_put_NextTextMinimumLineLength(This,prop)	\
    ( (This)->lpVtbl -> put_NextTextMinimumLineLength(This,prop) ) 

#define BrowseModeMiscVerbosity_get_NextTextMinimumLineLength(This,prop)	\
    ( (This)->lpVtbl -> get_NextTextMinimumLineLength(This,prop) ) 

#define BrowseModeMiscVerbosity_put_NextTextConsecutiveLines(This,prop)	\
    ( (This)->lpVtbl -> put_NextTextConsecutiveLines(This,prop) ) 

#define BrowseModeMiscVerbosity_get_NextTextConsecutiveLines(This,prop)	\
    ( (This)->lpVtbl -> get_NextTextConsecutiveLines(This,prop) ) 

#define BrowseModeMiscVerbosity_put_SuspendRefresh(This,prop)	\
    ( (This)->lpVtbl -> put_SuspendRefresh(This,prop) ) 

#define BrowseModeMiscVerbosity_get_SuspendRefresh(This,prop)	\
    ( (This)->lpVtbl -> get_SuspendRefresh(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeMiscVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeNewPageVerbosity_INTERFACE_DEFINED__
#define __BrowseModeNewPageVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeNewPageVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeNewPageVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0ad0ec69-44f3-4df9-9956-7383f62101f8")
    BrowseModeNewPageVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StatusMessage( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StatusMessage( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfLines( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfLines( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfLinks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfLinks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfFrames( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfFrames( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfTables( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfTables( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfLists( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfLists( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfParagraphs( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfParagraphs( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfHeadings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfHeadings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfForms( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfForms( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfAcronymsAbbreviations( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfAcronymsAbbreviations( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfBlockQuotes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfBlockQuotes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfLanguages( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfLanguages( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfLongDesc( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfLongDesc( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfAnchors( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfAnchors( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfAccessKeys( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfAccessKeys( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfFlashObjects( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfFlashObjects( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfObjects( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfObjects( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RefreshRate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RefreshRate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadEntirePage( 
            /* [in] */ BrowseModeNewPageRead prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadEntirePage( 
            /* [retval][out] */ BrowseModeNewPageRead *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeNewPageVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeNewPageVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeNewPageVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeNewPageVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StatusMessage )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StatusMessage )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfLines )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfLines )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfLinks )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfLinks )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfFrames )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfFrames )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfTables )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfTables )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfLists )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfLists )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfParagraphs )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfParagraphs )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfHeadings )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfHeadings )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfForms )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfForms )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfAcronymsAbbreviations )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfAcronymsAbbreviations )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfBlockQuotes )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfBlockQuotes )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfLanguages )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfLanguages )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfLongDesc )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfLongDesc )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfAnchors )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfAnchors )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfAccessKeys )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfAccessKeys )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfFlashObjects )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfFlashObjects )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfObjects )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfObjects )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RefreshRate )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RefreshRate )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadEntirePage )( 
            BrowseModeNewPageVerbosity * This,
            /* [in] */ BrowseModeNewPageRead prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadEntirePage )( 
            BrowseModeNewPageVerbosity * This,
            /* [retval][out] */ BrowseModeNewPageRead *prop);
        
        END_INTERFACE
    } BrowseModeNewPageVerbosityVtbl;

    interface BrowseModeNewPageVerbosity
    {
        CONST_VTBL struct BrowseModeNewPageVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeNewPageVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeNewPageVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeNewPageVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeNewPageVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeNewPageVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeNewPageVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeNewPageVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeNewPageVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeNewPageVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeNewPageVerbosity_put_StatusMessage(This,prop)	\
    ( (This)->lpVtbl -> put_StatusMessage(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_StatusMessage(This,prop)	\
    ( (This)->lpVtbl -> get_StatusMessage(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfLines(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfLines(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfLines(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfLines(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfLinks(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfLinks(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfLinks(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfLinks(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfFrames(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfFrames(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfFrames(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfFrames(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfTables(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfTables(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfTables(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfTables(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfLists(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfLists(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfLists(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfLists(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfParagraphs(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfParagraphs(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfParagraphs(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfParagraphs(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfHeadings(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfHeadings(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfHeadings(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfHeadings(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfForms(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfForms(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfForms(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfForms(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfAcronymsAbbreviations(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfAcronymsAbbreviations(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfAcronymsAbbreviations(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfAcronymsAbbreviations(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfBlockQuotes(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfBlockQuotes(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfBlockQuotes(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfBlockQuotes(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfLanguages(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfLanguages(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfLanguages(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfLanguages(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfLongDesc(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfLongDesc(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfLongDesc(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfLongDesc(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfAnchors(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfAnchors(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfAnchors(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfAnchors(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfAccessKeys(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfAccessKeys(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfAccessKeys(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfAccessKeys(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfFlashObjects(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfFlashObjects(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfFlashObjects(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfFlashObjects(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_NumberOfObjects(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfObjects(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_NumberOfObjects(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfObjects(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_RefreshRate(This,prop)	\
    ( (This)->lpVtbl -> put_RefreshRate(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_RefreshRate(This,prop)	\
    ( (This)->lpVtbl -> get_RefreshRate(This,prop) ) 

#define BrowseModeNewPageVerbosity_put_ReadEntirePage(This,prop)	\
    ( (This)->lpVtbl -> put_ReadEntirePage(This,prop) ) 

#define BrowseModeNewPageVerbosity_get_ReadEntirePage(This,prop)	\
    ( (This)->lpVtbl -> get_ReadEntirePage(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeNewPageVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeObjectVerbosity_INTERFACE_DEFINED__
#define __BrowseModeObjectVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeObjectVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeObjectVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("057fec88-70fe-448a-b3c0-9b3ffccb3cb6")
    BrowseModeObjectVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeType( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeType( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExposeAlternateText( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExposeAlternateText( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeObjectVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeObjectVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeObjectVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeObjectVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeObjectVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeObjectVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeObjectVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeObjectVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeObjectVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeObjectVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeType )( 
            BrowseModeObjectVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeType )( 
            BrowseModeObjectVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExposeAlternateText )( 
            BrowseModeObjectVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExposeAlternateText )( 
            BrowseModeObjectVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeObjectVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeObjectVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } BrowseModeObjectVerbosityVtbl;

    interface BrowseModeObjectVerbosity
    {
        CONST_VTBL struct BrowseModeObjectVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeObjectVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeObjectVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeObjectVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeObjectVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeObjectVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeObjectVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeObjectVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeObjectVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeObjectVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeObjectVerbosity_put_IncludeType(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeType(This,prop) ) 

#define BrowseModeObjectVerbosity_get_IncludeType(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeType(This,prop) ) 

#define BrowseModeObjectVerbosity_put_ExposeAlternateText(This,prop)	\
    ( (This)->lpVtbl -> put_ExposeAlternateText(This,prop) ) 

#define BrowseModeObjectVerbosity_get_ExposeAlternateText(This,prop)	\
    ( (This)->lpVtbl -> get_ExposeAlternateText(This,prop) ) 

#define BrowseModeObjectVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeObjectVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeObjectVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeParagraphVerbosity_INTERFACE_DEFINED__
#define __BrowseModeParagraphVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeParagraphVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeParagraphVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("83d4752a-5745-4aa9-85f7-d7074dccdabd")
    BrowseModeParagraphVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SmartParagraphMode( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SmartParagraphMode( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ShowBlankLines( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ShowBlankLines( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeParagraphVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeParagraphVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeParagraphVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeParagraphVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeParagraphVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeParagraphVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeParagraphVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeParagraphVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeParagraphVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeParagraphVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeParagraphVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeParagraphVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeParagraphVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeParagraphVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SmartParagraphMode )( 
            BrowseModeParagraphVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SmartParagraphMode )( 
            BrowseModeParagraphVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ShowBlankLines )( 
            BrowseModeParagraphVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ShowBlankLines )( 
            BrowseModeParagraphVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } BrowseModeParagraphVerbosityVtbl;

    interface BrowseModeParagraphVerbosity
    {
        CONST_VTBL struct BrowseModeParagraphVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeParagraphVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeParagraphVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeParagraphVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeParagraphVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeParagraphVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeParagraphVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeParagraphVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeParagraphVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeParagraphVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeParagraphVerbosity_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeParagraphVerbosity_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeParagraphVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeParagraphVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeParagraphVerbosity_put_SmartParagraphMode(This,prop)	\
    ( (This)->lpVtbl -> put_SmartParagraphMode(This,prop) ) 

#define BrowseModeParagraphVerbosity_get_SmartParagraphMode(This,prop)	\
    ( (This)->lpVtbl -> get_SmartParagraphMode(This,prop) ) 

#define BrowseModeParagraphVerbosity_put_ShowBlankLines(This,prop)	\
    ( (This)->lpVtbl -> put_ShowBlankLines(This,prop) ) 

#define BrowseModeParagraphVerbosity_get_ShowBlankLines(This,prop)	\
    ( (This)->lpVtbl -> get_ShowBlankLines(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeParagraphVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeQuoteVerbosity_INTERFACE_DEFINED__
#define __BrowseModeQuoteVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeQuoteVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeQuoteVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5353cf70-8fff-4db8-bf73-5ae56610a183")
    BrowseModeQuoteVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeQuoteVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeQuoteVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeQuoteVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeQuoteVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeQuoteVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeQuoteVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeQuoteVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeQuoteVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeQuoteVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeQuoteVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeQuoteVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeQuoteVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeQuoteVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeQuoteVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } BrowseModeQuoteVerbosityVtbl;

    interface BrowseModeQuoteVerbosity
    {
        CONST_VTBL struct BrowseModeQuoteVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeQuoteVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeQuoteVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeQuoteVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeQuoteVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeQuoteVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeQuoteVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeQuoteVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeQuoteVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeQuoteVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeQuoteVerbosity_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeQuoteVerbosity_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeQuoteVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeQuoteVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeQuoteVerbosity_INTERFACE_DEFINED__ */


#ifndef __BrowseModeTableVerbosity_INTERFACE_DEFINED__
#define __BrowseModeTableVerbosity_INTERFACE_DEFINED__

/* interface BrowseModeTableVerbosity */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeTableVerbosity;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("37931477-81c0-473c-b5c6-d1a0bf565f1a")
    BrowseModeTableVerbosity : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeSummary( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeSummary( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeSize( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeSize( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeRowGrouping( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeRowGrouping( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeMergedCells( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeMergedCells( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_HeaderAttributeOverride( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HeaderAttributeOverride( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indication( 
            /* [in] */ BrowseModeTableIndication prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indication( 
            /* [retval][out] */ BrowseModeTableIndication *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DefaultHeaderTo( 
            /* [in] */ BrowseModeTableHeaders prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultHeaderTo( 
            /* [retval][out] */ BrowseModeTableHeaders *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeTableVerbosityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeTableVerbosity * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeTableVerbosity * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeTableVerbosity * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeTableVerbosity * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeTableVerbosity * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeTableVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeSummary )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeSummary )( 
            BrowseModeTableVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeSize )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeSize )( 
            BrowseModeTableVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeRowGrouping )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeRowGrouping )( 
            BrowseModeTableVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeMergedCells )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeMergedCells )( 
            BrowseModeTableVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeaderAttributeOverride )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeaderAttributeOverride )( 
            BrowseModeTableVerbosity * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indication )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ BrowseModeTableIndication prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indication )( 
            BrowseModeTableVerbosity * This,
            /* [retval][out] */ BrowseModeTableIndication *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultHeaderTo )( 
            BrowseModeTableVerbosity * This,
            /* [in] */ BrowseModeTableHeaders prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultHeaderTo )( 
            BrowseModeTableVerbosity * This,
            /* [retval][out] */ BrowseModeTableHeaders *prop);
        
        END_INTERFACE
    } BrowseModeTableVerbosityVtbl;

    interface BrowseModeTableVerbosity
    {
        CONST_VTBL struct BrowseModeTableVerbosityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeTableVerbosity_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeTableVerbosity_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeTableVerbosity_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeTableVerbosity_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeTableVerbosity_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeTableVerbosity_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeTableVerbosity_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeTableVerbosity_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeTableVerbosity_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeTableVerbosity_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeTableVerbosity_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeTableVerbosity_put_IncludeSummary(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeSummary(This,prop) ) 

#define BrowseModeTableVerbosity_get_IncludeSummary(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeSummary(This,prop) ) 

#define BrowseModeTableVerbosity_put_IncludeSize(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeSize(This,prop) ) 

#define BrowseModeTableVerbosity_get_IncludeSize(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeSize(This,prop) ) 

#define BrowseModeTableVerbosity_put_IncludeRowGrouping(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeRowGrouping(This,prop) ) 

#define BrowseModeTableVerbosity_get_IncludeRowGrouping(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeRowGrouping(This,prop) ) 

#define BrowseModeTableVerbosity_put_IncludeMergedCells(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeMergedCells(This,prop) ) 

#define BrowseModeTableVerbosity_get_IncludeMergedCells(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeMergedCells(This,prop) ) 

#define BrowseModeTableVerbosity_put_HeaderAttributeOverride(This,prop)	\
    ( (This)->lpVtbl -> put_HeaderAttributeOverride(This,prop) ) 

#define BrowseModeTableVerbosity_get_HeaderAttributeOverride(This,prop)	\
    ( (This)->lpVtbl -> get_HeaderAttributeOverride(This,prop) ) 

#define BrowseModeTableVerbosity_put_Indication(This,prop)	\
    ( (This)->lpVtbl -> put_Indication(This,prop) ) 

#define BrowseModeTableVerbosity_get_Indication(This,prop)	\
    ( (This)->lpVtbl -> get_Indication(This,prop) ) 

#define BrowseModeTableVerbosity_put_DefaultHeaderTo(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultHeaderTo(This,prop) ) 

#define BrowseModeTableVerbosity_get_DefaultHeaderTo(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultHeaderTo(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeTableVerbosity_INTERFACE_DEFINED__ */


#ifndef __ActivatedVerbosityScope_INTERFACE_DEFINED__
#define __ActivatedVerbosityScope_INTERFACE_DEFINED__

/* interface ActivatedVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_ActivatedVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("dc114da2-23b9-4f7e-80d4-ef20d59a5254")
    ActivatedVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Activated( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Activated( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowType( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowType( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowTitle( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowTitle( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EntireMessageBox( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EntireMessageBox( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_EntireDialog( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_EntireDialog( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ActivatedVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ActivatedVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ActivatedVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ActivatedVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ActivatedVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ActivatedVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ActivatedVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ActivatedVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ActivatedVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ActivatedVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Activated )( 
            ActivatedVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Activated )( 
            ActivatedVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowType )( 
            ActivatedVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowType )( 
            ActivatedVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowTitle )( 
            ActivatedVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowTitle )( 
            ActivatedVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EntireMessageBox )( 
            ActivatedVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EntireMessageBox )( 
            ActivatedVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EntireDialog )( 
            ActivatedVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EntireDialog )( 
            ActivatedVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } ActivatedVerbosityScopeVtbl;

    interface ActivatedVerbosityScope
    {
        CONST_VTBL struct ActivatedVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ActivatedVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ActivatedVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ActivatedVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ActivatedVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ActivatedVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ActivatedVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ActivatedVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ActivatedVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ActivatedVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ActivatedVerbosityScope_put_Activated(This,prop)	\
    ( (This)->lpVtbl -> put_Activated(This,prop) ) 

#define ActivatedVerbosityScope_get_Activated(This,prop)	\
    ( (This)->lpVtbl -> get_Activated(This,prop) ) 

#define ActivatedVerbosityScope_put_WindowType(This,prop)	\
    ( (This)->lpVtbl -> put_WindowType(This,prop) ) 

#define ActivatedVerbosityScope_get_WindowType(This,prop)	\
    ( (This)->lpVtbl -> get_WindowType(This,prop) ) 

#define ActivatedVerbosityScope_put_WindowTitle(This,prop)	\
    ( (This)->lpVtbl -> put_WindowTitle(This,prop) ) 

#define ActivatedVerbosityScope_get_WindowTitle(This,prop)	\
    ( (This)->lpVtbl -> get_WindowTitle(This,prop) ) 

#define ActivatedVerbosityScope_put_EntireMessageBox(This,prop)	\
    ( (This)->lpVtbl -> put_EntireMessageBox(This,prop) ) 

#define ActivatedVerbosityScope_get_EntireMessageBox(This,prop)	\
    ( (This)->lpVtbl -> get_EntireMessageBox(This,prop) ) 

#define ActivatedVerbosityScope_put_EntireDialog(This,prop)	\
    ( (This)->lpVtbl -> put_EntireDialog(This,prop) ) 

#define ActivatedVerbosityScope_get_EntireDialog(This,prop)	\
    ( (This)->lpVtbl -> get_EntireDialog(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ActivatedVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __FocusedVerbosityScope_INTERFACE_DEFINED__
#define __FocusedVerbosityScope_INTERFACE_DEFINED__

/* interface FocusedVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_FocusedVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("43b5f04f-0ed8-47a7-a3ea-cdbca2954bb2")
    FocusedVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Focused( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowType( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowType( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_FieldName( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FieldName( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_FieldData( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FieldData( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CustomControl( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CustomControl( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyMSAAControls( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyMSAAControls( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FocusedVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FocusedVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FocusedVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FocusedVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FocusedVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FocusedVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FocusedVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FocusedVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            FocusedVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FocusedVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Focused )( 
            FocusedVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            FocusedVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowType )( 
            FocusedVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowType )( 
            FocusedVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FieldName )( 
            FocusedVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FieldName )( 
            FocusedVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FieldData )( 
            FocusedVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FieldData )( 
            FocusedVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CustomControl )( 
            FocusedVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CustomControl )( 
            FocusedVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyMSAAControls )( 
            FocusedVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyMSAAControls )( 
            FocusedVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } FocusedVerbosityScopeVtbl;

    interface FocusedVerbosityScope
    {
        CONST_VTBL struct FocusedVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FocusedVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FocusedVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FocusedVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FocusedVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FocusedVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FocusedVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FocusedVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FocusedVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define FocusedVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define FocusedVerbosityScope_put_Focused(This,prop)	\
    ( (This)->lpVtbl -> put_Focused(This,prop) ) 

#define FocusedVerbosityScope_get_Focused(This,prop)	\
    ( (This)->lpVtbl -> get_Focused(This,prop) ) 

#define FocusedVerbosityScope_put_WindowType(This,prop)	\
    ( (This)->lpVtbl -> put_WindowType(This,prop) ) 

#define FocusedVerbosityScope_get_WindowType(This,prop)	\
    ( (This)->lpVtbl -> get_WindowType(This,prop) ) 

#define FocusedVerbosityScope_put_FieldName(This,prop)	\
    ( (This)->lpVtbl -> put_FieldName(This,prop) ) 

#define FocusedVerbosityScope_get_FieldName(This,prop)	\
    ( (This)->lpVtbl -> get_FieldName(This,prop) ) 

#define FocusedVerbosityScope_put_FieldData(This,prop)	\
    ( (This)->lpVtbl -> put_FieldData(This,prop) ) 

#define FocusedVerbosityScope_get_FieldData(This,prop)	\
    ( (This)->lpVtbl -> get_FieldData(This,prop) ) 

#define FocusedVerbosityScope_put_CustomControl(This,prop)	\
    ( (This)->lpVtbl -> put_CustomControl(This,prop) ) 

#define FocusedVerbosityScope_get_CustomControl(This,prop)	\
    ( (This)->lpVtbl -> get_CustomControl(This,prop) ) 

#define FocusedVerbosityScope_put_IdentifyMSAAControls(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyMSAAControls(This,prop) ) 

#define FocusedVerbosityScope_get_IdentifyMSAAControls(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyMSAAControls(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FocusedVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __MenuVerbosityScope_INTERFACE_DEFINED__
#define __MenuVerbosityScope_INTERFACE_DEFINED__

/* interface MenuVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_MenuVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7b87a15f-1b6a-4083-aee8-16a07e2707d1")
    MenuVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Opened( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Opened( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Closed( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Closed( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Option( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Option( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Accelerators( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Accelerators( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Descriptions( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Descriptions( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Shortcut( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Shortcut( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MenuVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MenuVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MenuVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MenuVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MenuVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MenuVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MenuVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MenuVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MenuVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MenuVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Opened )( 
            MenuVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Opened )( 
            MenuVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Closed )( 
            MenuVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Closed )( 
            MenuVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Option )( 
            MenuVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Option )( 
            MenuVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Accelerators )( 
            MenuVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Accelerators )( 
            MenuVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Descriptions )( 
            MenuVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Descriptions )( 
            MenuVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Shortcut )( 
            MenuVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Shortcut )( 
            MenuVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } MenuVerbosityScopeVtbl;

    interface MenuVerbosityScope
    {
        CONST_VTBL struct MenuVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MenuVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MenuVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MenuVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MenuVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MenuVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MenuVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MenuVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MenuVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define MenuVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define MenuVerbosityScope_put_Opened(This,prop)	\
    ( (This)->lpVtbl -> put_Opened(This,prop) ) 

#define MenuVerbosityScope_get_Opened(This,prop)	\
    ( (This)->lpVtbl -> get_Opened(This,prop) ) 

#define MenuVerbosityScope_put_Closed(This,prop)	\
    ( (This)->lpVtbl -> put_Closed(This,prop) ) 

#define MenuVerbosityScope_get_Closed(This,prop)	\
    ( (This)->lpVtbl -> get_Closed(This,prop) ) 

#define MenuVerbosityScope_put_Option(This,prop)	\
    ( (This)->lpVtbl -> put_Option(This,prop) ) 

#define MenuVerbosityScope_get_Option(This,prop)	\
    ( (This)->lpVtbl -> get_Option(This,prop) ) 

#define MenuVerbosityScope_put_Accelerators(This,prop)	\
    ( (This)->lpVtbl -> put_Accelerators(This,prop) ) 

#define MenuVerbosityScope_get_Accelerators(This,prop)	\
    ( (This)->lpVtbl -> get_Accelerators(This,prop) ) 

#define MenuVerbosityScope_put_Descriptions(This,prop)	\
    ( (This)->lpVtbl -> put_Descriptions(This,prop) ) 

#define MenuVerbosityScope_get_Descriptions(This,prop)	\
    ( (This)->lpVtbl -> get_Descriptions(This,prop) ) 

#define MenuVerbosityScope_put_Shortcut(This,prop)	\
    ( (This)->lpVtbl -> put_Shortcut(This,prop) ) 

#define MenuVerbosityScope_get_Shortcut(This,prop)	\
    ( (This)->lpVtbl -> get_Shortcut(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MenuVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __AttributeChangeVerbosityScope_INTERFACE_DEFINED__
#define __AttributeChangeVerbosityScope_INTERFACE_DEFINED__

/* interface AttributeChangeVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_AttributeChangeVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ab2625db-32a2-4779-aca6-fc9caf5b02b1")
    AttributeChangeVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Color( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Font( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Size( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AttributeChangeVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AttributeChangeVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AttributeChangeVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AttributeChangeVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AttributeChangeVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AttributeChangeVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AttributeChangeVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AttributeChangeVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            AttributeChangeVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AttributeChangeVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            AttributeChangeVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            AttributeChangeVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Font )( 
            AttributeChangeVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            AttributeChangeVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Size )( 
            AttributeChangeVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            AttributeChangeVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            AttributeChangeVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            AttributeChangeVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } AttributeChangeVerbosityScopeVtbl;

    interface AttributeChangeVerbosityScope
    {
        CONST_VTBL struct AttributeChangeVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AttributeChangeVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AttributeChangeVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AttributeChangeVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AttributeChangeVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AttributeChangeVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AttributeChangeVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AttributeChangeVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AttributeChangeVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define AttributeChangeVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define AttributeChangeVerbosityScope_put_Color(This,prop)	\
    ( (This)->lpVtbl -> put_Color(This,prop) ) 

#define AttributeChangeVerbosityScope_get_Color(This,prop)	\
    ( (This)->lpVtbl -> get_Color(This,prop) ) 

#define AttributeChangeVerbosityScope_put_Font(This,prop)	\
    ( (This)->lpVtbl -> put_Font(This,prop) ) 

#define AttributeChangeVerbosityScope_get_Font(This,prop)	\
    ( (This)->lpVtbl -> get_Font(This,prop) ) 

#define AttributeChangeVerbosityScope_put_Size(This,prop)	\
    ( (This)->lpVtbl -> put_Size(This,prop) ) 

#define AttributeChangeVerbosityScope_get_Size(This,prop)	\
    ( (This)->lpVtbl -> get_Size(This,prop) ) 

#define AttributeChangeVerbosityScope_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define AttributeChangeVerbosityScope_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AttributeChangeVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __MouseVerbosityScope_INTERFACE_DEFINED__
#define __MouseVerbosityScope_INTERFACE_DEFINED__

/* interface MouseVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_MouseVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("462ec9ef-4ec6-458c-8797-036428907a27")
    MouseVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_In( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_In( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Out( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Out( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ClipChange( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClipChange( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_LineChange( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineChange( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_WindowChange( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WindowChange( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MouseVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MouseVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MouseVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MouseVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MouseVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MouseVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MouseVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MouseVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MouseVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MouseVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_In )( 
            MouseVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_In )( 
            MouseVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Out )( 
            MouseVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Out )( 
            MouseVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClipChange )( 
            MouseVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClipChange )( 
            MouseVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineChange )( 
            MouseVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineChange )( 
            MouseVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WindowChange )( 
            MouseVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowChange )( 
            MouseVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } MouseVerbosityScopeVtbl;

    interface MouseVerbosityScope
    {
        CONST_VTBL struct MouseVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MouseVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MouseVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MouseVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MouseVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MouseVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MouseVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MouseVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MouseVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define MouseVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define MouseVerbosityScope_put_In(This,prop)	\
    ( (This)->lpVtbl -> put_In(This,prop) ) 

#define MouseVerbosityScope_get_In(This,prop)	\
    ( (This)->lpVtbl -> get_In(This,prop) ) 

#define MouseVerbosityScope_put_Out(This,prop)	\
    ( (This)->lpVtbl -> put_Out(This,prop) ) 

#define MouseVerbosityScope_get_Out(This,prop)	\
    ( (This)->lpVtbl -> get_Out(This,prop) ) 

#define MouseVerbosityScope_put_ClipChange(This,prop)	\
    ( (This)->lpVtbl -> put_ClipChange(This,prop) ) 

#define MouseVerbosityScope_get_ClipChange(This,prop)	\
    ( (This)->lpVtbl -> get_ClipChange(This,prop) ) 

#define MouseVerbosityScope_put_LineChange(This,prop)	\
    ( (This)->lpVtbl -> put_LineChange(This,prop) ) 

#define MouseVerbosityScope_get_LineChange(This,prop)	\
    ( (This)->lpVtbl -> get_LineChange(This,prop) ) 

#define MouseVerbosityScope_put_WindowChange(This,prop)	\
    ( (This)->lpVtbl -> put_WindowChange(This,prop) ) 

#define MouseVerbosityScope_get_WindowChange(This,prop)	\
    ( (This)->lpVtbl -> get_WindowChange(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MouseVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __MiscVerbosityScope_INTERFACE_DEFINED__
#define __MiscVerbosityScope_INTERFACE_DEFINED__

/* interface MiscVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_MiscVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ed5f090d-9c93-4653-8aeb-a522e07bf7f5")
    MiscVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Shortcut( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Shortcut( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_TopBottomIndex( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TopBottomIndex( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CurrentIndex( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentIndex( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SilencePasswordEdits( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SilencePasswordEdits( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ListviewHeaders( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ListviewHeaders( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MiscVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MiscVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MiscVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MiscVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MiscVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MiscVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MiscVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MiscVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MiscVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MiscVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Shortcut )( 
            MiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Shortcut )( 
            MiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TopBottomIndex )( 
            MiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TopBottomIndex )( 
            MiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentIndex )( 
            MiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentIndex )( 
            MiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SilencePasswordEdits )( 
            MiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SilencePasswordEdits )( 
            MiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ListviewHeaders )( 
            MiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ListviewHeaders )( 
            MiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } MiscVerbosityScopeVtbl;

    interface MiscVerbosityScope
    {
        CONST_VTBL struct MiscVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MiscVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MiscVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MiscVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MiscVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MiscVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MiscVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MiscVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MiscVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define MiscVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define MiscVerbosityScope_put_Shortcut(This,prop)	\
    ( (This)->lpVtbl -> put_Shortcut(This,prop) ) 

#define MiscVerbosityScope_get_Shortcut(This,prop)	\
    ( (This)->lpVtbl -> get_Shortcut(This,prop) ) 

#define MiscVerbosityScope_put_TopBottomIndex(This,prop)	\
    ( (This)->lpVtbl -> put_TopBottomIndex(This,prop) ) 

#define MiscVerbosityScope_get_TopBottomIndex(This,prop)	\
    ( (This)->lpVtbl -> get_TopBottomIndex(This,prop) ) 

#define MiscVerbosityScope_put_CurrentIndex(This,prop)	\
    ( (This)->lpVtbl -> put_CurrentIndex(This,prop) ) 

#define MiscVerbosityScope_get_CurrentIndex(This,prop)	\
    ( (This)->lpVtbl -> get_CurrentIndex(This,prop) ) 

#define MiscVerbosityScope_put_SilencePasswordEdits(This,prop)	\
    ( (This)->lpVtbl -> put_SilencePasswordEdits(This,prop) ) 

#define MiscVerbosityScope_get_SilencePasswordEdits(This,prop)	\
    ( (This)->lpVtbl -> get_SilencePasswordEdits(This,prop) ) 

#define MiscVerbosityScope_put_ListviewHeaders(This,prop)	\
    ( (This)->lpVtbl -> put_ListviewHeaders(This,prop) ) 

#define MiscVerbosityScope_get_ListviewHeaders(This,prop)	\
    ( (This)->lpVtbl -> get_ListviewHeaders(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MiscVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ac4b0d0e-7984-4150-ab27-b7691133dffa")
    BrowseModeVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AccessKeys( 
            /* [retval][out] */ BrowseModeAccessKeyVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AcronymsAbbreviations( 
            /* [retval][out] */ BrowseModeAcronymVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Flash( 
            /* [retval][out] */ BrowseModeFlashVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Forms( 
            /* [retval][out] */ BrowseModeFormVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Headings( 
            /* [retval][out] */ BrowseModeHeadingVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Languages( 
            /* [retval][out] */ BrowseModeLanguageVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Links( 
            /* [retval][out] */ BrowseModeLinkVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Lists( 
            /* [retval][out] */ BrowseModeListVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_LongDesc( 
            /* [retval][out] */ BrowseModeLongDescVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Miscellaneous( 
            /* [retval][out] */ BrowseModeMiscVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NewPageInformation( 
            /* [retval][out] */ BrowseModeNewPageVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Objects( 
            /* [retval][out] */ BrowseModeObjectVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Paragraphs( 
            /* [retval][out] */ BrowseModeParagraphVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_QuotesBlockQuotes( 
            /* [retval][out] */ BrowseModeQuoteVerbosityScope **obj) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Tables( 
            /* [retval][out] */ BrowseModeTableVerbosityScope **obj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AccessKeys )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeAccessKeyVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AcronymsAbbreviations )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeAcronymVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flash )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeFlashVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Forms )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeFormVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Headings )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeHeadingVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeLanguageVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Links )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeLinkVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lists )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeListVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LongDesc )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeLongDescVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Miscellaneous )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeMiscVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NewPageInformation )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeNewPageVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Objects )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeObjectVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Paragraphs )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeParagraphVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuotesBlockQuotes )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeQuoteVerbosityScope **obj);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tables )( 
            BrowseModeVerbosityScope * This,
            /* [retval][out] */ BrowseModeTableVerbosityScope **obj);
        
        END_INTERFACE
    } BrowseModeVerbosityScopeVtbl;

    interface BrowseModeVerbosityScope
    {
        CONST_VTBL struct BrowseModeVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeVerbosityScope_get_AccessKeys(This,obj)	\
    ( (This)->lpVtbl -> get_AccessKeys(This,obj) ) 

#define BrowseModeVerbosityScope_get_AcronymsAbbreviations(This,obj)	\
    ( (This)->lpVtbl -> get_AcronymsAbbreviations(This,obj) ) 

#define BrowseModeVerbosityScope_get_Flash(This,obj)	\
    ( (This)->lpVtbl -> get_Flash(This,obj) ) 

#define BrowseModeVerbosityScope_get_Forms(This,obj)	\
    ( (This)->lpVtbl -> get_Forms(This,obj) ) 

#define BrowseModeVerbosityScope_get_Headings(This,obj)	\
    ( (This)->lpVtbl -> get_Headings(This,obj) ) 

#define BrowseModeVerbosityScope_get_Languages(This,obj)	\
    ( (This)->lpVtbl -> get_Languages(This,obj) ) 

#define BrowseModeVerbosityScope_get_Links(This,obj)	\
    ( (This)->lpVtbl -> get_Links(This,obj) ) 

#define BrowseModeVerbosityScope_get_Lists(This,obj)	\
    ( (This)->lpVtbl -> get_Lists(This,obj) ) 

#define BrowseModeVerbosityScope_get_LongDesc(This,obj)	\
    ( (This)->lpVtbl -> get_LongDesc(This,obj) ) 

#define BrowseModeVerbosityScope_get_Miscellaneous(This,obj)	\
    ( (This)->lpVtbl -> get_Miscellaneous(This,obj) ) 

#define BrowseModeVerbosityScope_get_NewPageInformation(This,obj)	\
    ( (This)->lpVtbl -> get_NewPageInformation(This,obj) ) 

#define BrowseModeVerbosityScope_get_Objects(This,obj)	\
    ( (This)->lpVtbl -> get_Objects(This,obj) ) 

#define BrowseModeVerbosityScope_get_Paragraphs(This,obj)	\
    ( (This)->lpVtbl -> get_Paragraphs(This,obj) ) 

#define BrowseModeVerbosityScope_get_QuotesBlockQuotes(This,obj)	\
    ( (This)->lpVtbl -> get_QuotesBlockQuotes(This,obj) ) 

#define BrowseModeVerbosityScope_get_Tables(This,obj)	\
    ( (This)->lpVtbl -> get_Tables(This,obj) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeAccessKeyVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeAccessKeyVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeAccessKeyVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeAccessKeyVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b3b06c36-650e-4f33-a94c-807fb4ccb4f5")
    BrowseModeAccessKeyVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeAccessKeyVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeAccessKeyVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeAccessKeyVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeAccessKeyVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeAccessKeyVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeAccessKeyVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeAccessKeyVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeAccessKeyVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeAccessKeyVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeAccessKeyVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeAccessKeyVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeAccessKeyVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeAccessKeyVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeAccessKeyVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeAccessKeyVerbosityScopeVtbl;

    interface BrowseModeAccessKeyVerbosityScope
    {
        CONST_VTBL struct BrowseModeAccessKeyVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeAccessKeyVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeAccessKeyVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeAccessKeyVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeAccessKeyVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeAccessKeyVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeAccessKeyVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeAccessKeyVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeAccessKeyVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeAccessKeyVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeAccessKeyVerbosityScope_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeAccessKeyVerbosityScope_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeAccessKeyVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeAccessKeyVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeAccessKeyVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeAcronymVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeAcronymVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeAcronymVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeAcronymVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("44e8c463-f909-44fe-b36c-d7cfcf36979c")
    BrowseModeAcronymVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indication( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indication( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeAcronymVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeAcronymVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeAcronymVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeAcronymVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeAcronymVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeAcronymVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeAcronymVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeAcronymVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeAcronymVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeAcronymVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeAcronymVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeAcronymVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indication )( 
            BrowseModeAcronymVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indication )( 
            BrowseModeAcronymVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeAcronymVerbosityScopeVtbl;

    interface BrowseModeAcronymVerbosityScope
    {
        CONST_VTBL struct BrowseModeAcronymVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeAcronymVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeAcronymVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeAcronymVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeAcronymVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeAcronymVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeAcronymVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeAcronymVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeAcronymVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeAcronymVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeAcronymVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeAcronymVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeAcronymVerbosityScope_put_Indication(This,prop)	\
    ( (This)->lpVtbl -> put_Indication(This,prop) ) 

#define BrowseModeAcronymVerbosityScope_get_Indication(This,prop)	\
    ( (This)->lpVtbl -> get_Indication(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeAcronymVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeFlashVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeFlashVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeFlashVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeFlashVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b46e1de9-2fed-4ffc-a71f-aa01e1f8c169")
    BrowseModeFlashVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeFlashVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeFlashVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeFlashVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeFlashVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeFlashVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeFlashVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeFlashVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeFlashVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeFlashVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeFlashVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeFlashVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeFlashVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeFlashVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeFlashVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeFlashVerbosityScopeVtbl;

    interface BrowseModeFlashVerbosityScope
    {
        CONST_VTBL struct BrowseModeFlashVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeFlashVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeFlashVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeFlashVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeFlashVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeFlashVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeFlashVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeFlashVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeFlashVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeFlashVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeFlashVerbosityScope_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeFlashVerbosityScope_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeFlashVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeFlashVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeFlashVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeFormVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeFormVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeFormVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeFormVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("95e8595f-b6e7-468c-9eee-ee44600ef3f0")
    BrowseModeFormVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateForms( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateForms( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEndForms( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEndForms( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateFieldsets( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateFieldsets( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEndFieldsets( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEndFieldsets( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeFormVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeFormVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeFormVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeFormVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeFormVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeFormVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeFormVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeFormVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeFormVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeFormVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateForms )( 
            BrowseModeFormVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateForms )( 
            BrowseModeFormVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEndForms )( 
            BrowseModeFormVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEndForms )( 
            BrowseModeFormVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateFieldsets )( 
            BrowseModeFormVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateFieldsets )( 
            BrowseModeFormVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEndFieldsets )( 
            BrowseModeFormVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEndFieldsets )( 
            BrowseModeFormVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeFormVerbosityScopeVtbl;

    interface BrowseModeFormVerbosityScope
    {
        CONST_VTBL struct BrowseModeFormVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeFormVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeFormVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeFormVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeFormVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeFormVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeFormVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeFormVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeFormVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeFormVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeFormVerbosityScope_put_IndicateForms(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateForms(This,prop) ) 

#define BrowseModeFormVerbosityScope_get_IndicateForms(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateForms(This,prop) ) 

#define BrowseModeFormVerbosityScope_put_ReadToEndForms(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEndForms(This,prop) ) 

#define BrowseModeFormVerbosityScope_get_ReadToEndForms(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEndForms(This,prop) ) 

#define BrowseModeFormVerbosityScope_put_IndicateFieldsets(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateFieldsets(This,prop) ) 

#define BrowseModeFormVerbosityScope_get_IndicateFieldsets(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateFieldsets(This,prop) ) 

#define BrowseModeFormVerbosityScope_put_ReadToEndFieldsets(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEndFieldsets(This,prop) ) 

#define BrowseModeFormVerbosityScope_get_ReadToEndFieldsets(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEndFieldsets(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeFormVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeHeadingVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeHeadingVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeHeadingVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeHeadingVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("64a65943-a1cc-4096-a9d3-119ecc57c080")
    BrowseModeHeadingVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeHeadingVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeHeadingVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeHeadingVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeHeadingVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeHeadingVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeHeadingVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeHeadingVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeHeadingVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeHeadingVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeHeadingVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeHeadingVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeHeadingVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeHeadingVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeHeadingVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeHeadingVerbosityScopeVtbl;

    interface BrowseModeHeadingVerbosityScope
    {
        CONST_VTBL struct BrowseModeHeadingVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeHeadingVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeHeadingVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeHeadingVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeHeadingVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeHeadingVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeHeadingVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeHeadingVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeHeadingVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeHeadingVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeHeadingVerbosityScope_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeHeadingVerbosityScope_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeHeadingVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeHeadingVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeHeadingVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeLanguageVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeLanguageVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeLanguageVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeLanguageVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9617234b-c55a-40ea-b30c-58d9114810b7")
    BrowseModeLanguageVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoSwitchSynthesizer( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoSwitchSynthesizer( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeLanguageVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeLanguageVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeLanguageVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoSwitchSynthesizer )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSwitchSynthesizer )( 
            BrowseModeLanguageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeLanguageVerbosityScopeVtbl;

    interface BrowseModeLanguageVerbosityScope
    {
        CONST_VTBL struct BrowseModeLanguageVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeLanguageVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeLanguageVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeLanguageVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeLanguageVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeLanguageVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeLanguageVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeLanguageVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeLanguageVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeLanguageVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeLanguageVerbosityScope_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeLanguageVerbosityScope_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeLanguageVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeLanguageVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeLanguageVerbosityScope_put_AutoSwitchSynthesizer(This,prop)	\
    ( (This)->lpVtbl -> put_AutoSwitchSynthesizer(This,prop) ) 

#define BrowseModeLanguageVerbosityScope_get_AutoSwitchSynthesizer(This,prop)	\
    ( (This)->lpVtbl -> get_AutoSwitchSynthesizer(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeLanguageVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeLinkVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeLinkVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeLinkVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeLinkVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0696ab43-3979-44b1-aa09-7379b4e9e5a4")
    BrowseModeLinkVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifyVisitedLinks( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifyVisitedLinks( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IdentifySamePageLinks( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IdentifySamePageLinks( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indication( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indication( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeLinkVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeLinkVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeLinkVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeLinkVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeLinkVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeLinkVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeLinkVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeLinkVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeLinkVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeLinkVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeLinkVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeLinkVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifyVisitedLinks )( 
            BrowseModeLinkVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifyVisitedLinks )( 
            BrowseModeLinkVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IdentifySamePageLinks )( 
            BrowseModeLinkVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentifySamePageLinks )( 
            BrowseModeLinkVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indication )( 
            BrowseModeLinkVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indication )( 
            BrowseModeLinkVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeLinkVerbosityScopeVtbl;

    interface BrowseModeLinkVerbosityScope
    {
        CONST_VTBL struct BrowseModeLinkVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeLinkVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeLinkVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeLinkVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeLinkVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeLinkVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeLinkVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeLinkVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeLinkVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeLinkVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeLinkVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeLinkVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeLinkVerbosityScope_put_IdentifyVisitedLinks(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifyVisitedLinks(This,prop) ) 

#define BrowseModeLinkVerbosityScope_get_IdentifyVisitedLinks(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifyVisitedLinks(This,prop) ) 

#define BrowseModeLinkVerbosityScope_put_IdentifySamePageLinks(This,prop)	\
    ( (This)->lpVtbl -> put_IdentifySamePageLinks(This,prop) ) 

#define BrowseModeLinkVerbosityScope_get_IdentifySamePageLinks(This,prop)	\
    ( (This)->lpVtbl -> get_IdentifySamePageLinks(This,prop) ) 

#define BrowseModeLinkVerbosityScope_put_Indication(This,prop)	\
    ( (This)->lpVtbl -> put_Indication(This,prop) ) 

#define BrowseModeLinkVerbosityScope_get_Indication(This,prop)	\
    ( (This)->lpVtbl -> get_Indication(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeLinkVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeListVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeListVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeListVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeListVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ddf6295a-63cc-4a94-a8e3-1f29b771fd34")
    BrowseModeListVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateBullets( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateBullets( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEndBullets( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEndBullets( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeListVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeListVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeListVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeListVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeListVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeListVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeListVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeListVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeListVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeListVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeListVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeListVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeListVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeListVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateBullets )( 
            BrowseModeListVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateBullets )( 
            BrowseModeListVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEndBullets )( 
            BrowseModeListVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEndBullets )( 
            BrowseModeListVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeListVerbosityScopeVtbl;

    interface BrowseModeListVerbosityScope
    {
        CONST_VTBL struct BrowseModeListVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeListVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeListVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeListVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeListVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeListVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeListVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeListVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeListVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeListVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeListVerbosityScope_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeListVerbosityScope_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeListVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeListVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeListVerbosityScope_put_IndicateBullets(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateBullets(This,prop) ) 

#define BrowseModeListVerbosityScope_get_IndicateBullets(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateBullets(This,prop) ) 

#define BrowseModeListVerbosityScope_put_ReadToEndBullets(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEndBullets(This,prop) ) 

#define BrowseModeListVerbosityScope_get_ReadToEndBullets(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEndBullets(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeListVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeLongDescVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeLongDescVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeLongDescVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeLongDescVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a29dca3d-496b-40c9-a72c-7aace04fc8a9")
    BrowseModeLongDescVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeLongDescVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeLongDescVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeLongDescVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeLongDescVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeLongDescVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeLongDescVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeLongDescVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeLongDescVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeLongDescVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeLongDescVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeLongDescVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeLongDescVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeLongDescVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeLongDescVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeLongDescVerbosityScopeVtbl;

    interface BrowseModeLongDescVerbosityScope
    {
        CONST_VTBL struct BrowseModeLongDescVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeLongDescVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeLongDescVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeLongDescVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeLongDescVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeLongDescVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeLongDescVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeLongDescVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeLongDescVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeLongDescVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeLongDescVerbosityScope_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeLongDescVerbosityScope_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeLongDescVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeLongDescVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeLongDescVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeMiscVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeMiscVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeMiscVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeMiscVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("51e2b4a8-060a-4fa6-94c5-e2f7b47a3d21")
    BrowseModeMiscVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IndicateNewPopups( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IndicateNewPopups( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeGraphicWithNoDescription( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeGraphicWithNoDescription( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_VerbosityHotKeyToSpecificElement( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_VerbosityHotKeyToSpecificElement( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoLoad( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoLoad( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NextTextMinimumLineLength( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NextTextMinimumLineLength( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NextTextConsecutiveLines( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NextTextConsecutiveLines( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SuspendRefresh( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SuspendRefresh( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeMiscVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeMiscVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeMiscVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeMiscVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeMiscVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeMiscVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeMiscVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeMiscVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeMiscVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeMiscVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IndicateNewPopups )( 
            BrowseModeMiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IndicateNewPopups )( 
            BrowseModeMiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeGraphicWithNoDescription )( 
            BrowseModeMiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeGraphicWithNoDescription )( 
            BrowseModeMiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_VerbosityHotKeyToSpecificElement )( 
            BrowseModeMiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerbosityHotKeyToSpecificElement )( 
            BrowseModeMiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AutoLoad )( 
            BrowseModeMiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutoLoad )( 
            BrowseModeMiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NextTextMinimumLineLength )( 
            BrowseModeMiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NextTextMinimumLineLength )( 
            BrowseModeMiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NextTextConsecutiveLines )( 
            BrowseModeMiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NextTextConsecutiveLines )( 
            BrowseModeMiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SuspendRefresh )( 
            BrowseModeMiscVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SuspendRefresh )( 
            BrowseModeMiscVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeMiscVerbosityScopeVtbl;

    interface BrowseModeMiscVerbosityScope
    {
        CONST_VTBL struct BrowseModeMiscVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeMiscVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeMiscVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeMiscVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeMiscVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeMiscVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeMiscVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeMiscVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeMiscVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeMiscVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeMiscVerbosityScope_put_IndicateNewPopups(This,prop)	\
    ( (This)->lpVtbl -> put_IndicateNewPopups(This,prop) ) 

#define BrowseModeMiscVerbosityScope_get_IndicateNewPopups(This,prop)	\
    ( (This)->lpVtbl -> get_IndicateNewPopups(This,prop) ) 

#define BrowseModeMiscVerbosityScope_put_IncludeGraphicWithNoDescription(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeGraphicWithNoDescription(This,prop) ) 

#define BrowseModeMiscVerbosityScope_get_IncludeGraphicWithNoDescription(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeGraphicWithNoDescription(This,prop) ) 

#define BrowseModeMiscVerbosityScope_put_VerbosityHotKeyToSpecificElement(This,prop)	\
    ( (This)->lpVtbl -> put_VerbosityHotKeyToSpecificElement(This,prop) ) 

#define BrowseModeMiscVerbosityScope_get_VerbosityHotKeyToSpecificElement(This,prop)	\
    ( (This)->lpVtbl -> get_VerbosityHotKeyToSpecificElement(This,prop) ) 

#define BrowseModeMiscVerbosityScope_put_AutoLoad(This,prop)	\
    ( (This)->lpVtbl -> put_AutoLoad(This,prop) ) 

#define BrowseModeMiscVerbosityScope_get_AutoLoad(This,prop)	\
    ( (This)->lpVtbl -> get_AutoLoad(This,prop) ) 

#define BrowseModeMiscVerbosityScope_put_NextTextMinimumLineLength(This,prop)	\
    ( (This)->lpVtbl -> put_NextTextMinimumLineLength(This,prop) ) 

#define BrowseModeMiscVerbosityScope_get_NextTextMinimumLineLength(This,prop)	\
    ( (This)->lpVtbl -> get_NextTextMinimumLineLength(This,prop) ) 

#define BrowseModeMiscVerbosityScope_put_NextTextConsecutiveLines(This,prop)	\
    ( (This)->lpVtbl -> put_NextTextConsecutiveLines(This,prop) ) 

#define BrowseModeMiscVerbosityScope_get_NextTextConsecutiveLines(This,prop)	\
    ( (This)->lpVtbl -> get_NextTextConsecutiveLines(This,prop) ) 

#define BrowseModeMiscVerbosityScope_put_SuspendRefresh(This,prop)	\
    ( (This)->lpVtbl -> put_SuspendRefresh(This,prop) ) 

#define BrowseModeMiscVerbosityScope_get_SuspendRefresh(This,prop)	\
    ( (This)->lpVtbl -> get_SuspendRefresh(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeMiscVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeNewPageVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeNewPageVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeNewPageVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeNewPageVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6e71a7d0-6353-411f-9382-a259dad28256")
    BrowseModeNewPageVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_StatusMessage( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_StatusMessage( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfLines( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfLines( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfLinks( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfLinks( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfFrames( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfFrames( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfTables( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfTables( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfLists( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfLists( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfParagraphs( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfParagraphs( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfHeadings( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfHeadings( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfForms( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfForms( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfAcronymsAbbreviations( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfAcronymsAbbreviations( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfBlockQuotes( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfBlockQuotes( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfLanguages( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfLanguages( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfLongDesc( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfLongDesc( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfAnchors( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfAnchors( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfAccessKeys( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfAccessKeys( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfFlashObjects( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfFlashObjects( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_NumberOfObjects( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NumberOfObjects( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_RefreshRate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RefreshRate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadEntirePage( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadEntirePage( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeNewPageVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeNewPageVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeNewPageVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StatusMessage )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StatusMessage )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfLines )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfLines )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfLinks )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfLinks )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfFrames )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfFrames )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfTables )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfTables )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfLists )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfLists )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfParagraphs )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfParagraphs )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfHeadings )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfHeadings )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfForms )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfForms )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfAcronymsAbbreviations )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfAcronymsAbbreviations )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfBlockQuotes )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfBlockQuotes )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfLanguages )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfLanguages )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfLongDesc )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfLongDesc )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfAnchors )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfAnchors )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfAccessKeys )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfAccessKeys )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfFlashObjects )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfFlashObjects )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfObjects )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfObjects )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RefreshRate )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RefreshRate )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadEntirePage )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadEntirePage )( 
            BrowseModeNewPageVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeNewPageVerbosityScopeVtbl;

    interface BrowseModeNewPageVerbosityScope
    {
        CONST_VTBL struct BrowseModeNewPageVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeNewPageVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeNewPageVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeNewPageVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeNewPageVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeNewPageVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeNewPageVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeNewPageVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeNewPageVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeNewPageVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeNewPageVerbosityScope_put_StatusMessage(This,prop)	\
    ( (This)->lpVtbl -> put_StatusMessage(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_StatusMessage(This,prop)	\
    ( (This)->lpVtbl -> get_StatusMessage(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfLines(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfLines(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfLines(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfLines(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfLinks(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfLinks(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfLinks(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfLinks(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfFrames(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfFrames(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfFrames(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfFrames(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfTables(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfTables(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfTables(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfTables(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfLists(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfLists(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfLists(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfLists(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfParagraphs(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfParagraphs(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfParagraphs(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfParagraphs(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfHeadings(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfHeadings(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfHeadings(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfHeadings(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfForms(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfForms(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfForms(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfForms(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfAcronymsAbbreviations(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfAcronymsAbbreviations(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfAcronymsAbbreviations(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfAcronymsAbbreviations(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfBlockQuotes(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfBlockQuotes(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfBlockQuotes(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfBlockQuotes(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfLanguages(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfLanguages(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfLanguages(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfLanguages(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfLongDesc(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfLongDesc(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfLongDesc(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfLongDesc(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfAnchors(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfAnchors(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfAnchors(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfAnchors(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfAccessKeys(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfAccessKeys(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfAccessKeys(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfAccessKeys(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfFlashObjects(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfFlashObjects(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfFlashObjects(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfFlashObjects(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_NumberOfObjects(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfObjects(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_NumberOfObjects(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfObjects(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_RefreshRate(This,prop)	\
    ( (This)->lpVtbl -> put_RefreshRate(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_RefreshRate(This,prop)	\
    ( (This)->lpVtbl -> get_RefreshRate(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_put_ReadEntirePage(This,prop)	\
    ( (This)->lpVtbl -> put_ReadEntirePage(This,prop) ) 

#define BrowseModeNewPageVerbosityScope_get_ReadEntirePage(This,prop)	\
    ( (This)->lpVtbl -> get_ReadEntirePage(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeNewPageVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeObjectVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeObjectVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeObjectVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeObjectVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b3a95367-3f11-4f5f-8396-dd04f9af54f6")
    BrowseModeObjectVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeType( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeType( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ExposeAlternateText( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ExposeAlternateText( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeObjectVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeObjectVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeObjectVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeObjectVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeObjectVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeObjectVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeObjectVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeObjectVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeObjectVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeObjectVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeType )( 
            BrowseModeObjectVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeType )( 
            BrowseModeObjectVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ExposeAlternateText )( 
            BrowseModeObjectVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExposeAlternateText )( 
            BrowseModeObjectVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeObjectVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeObjectVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeObjectVerbosityScopeVtbl;

    interface BrowseModeObjectVerbosityScope
    {
        CONST_VTBL struct BrowseModeObjectVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeObjectVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeObjectVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeObjectVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeObjectVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeObjectVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeObjectVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeObjectVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeObjectVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeObjectVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeObjectVerbosityScope_put_IncludeType(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeType(This,prop) ) 

#define BrowseModeObjectVerbosityScope_get_IncludeType(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeType(This,prop) ) 

#define BrowseModeObjectVerbosityScope_put_ExposeAlternateText(This,prop)	\
    ( (This)->lpVtbl -> put_ExposeAlternateText(This,prop) ) 

#define BrowseModeObjectVerbosityScope_get_ExposeAlternateText(This,prop)	\
    ( (This)->lpVtbl -> get_ExposeAlternateText(This,prop) ) 

#define BrowseModeObjectVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeObjectVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeObjectVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeParagraphVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeParagraphVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeParagraphVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeParagraphVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c9f99e65-5a95-431e-aa11-2fe3140f9fed")
    BrowseModeParagraphVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_SmartParagraphMode( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SmartParagraphMode( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ShowBlankLines( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ShowBlankLines( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeParagraphVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeParagraphVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeParagraphVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SmartParagraphMode )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SmartParagraphMode )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ShowBlankLines )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ShowBlankLines )( 
            BrowseModeParagraphVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeParagraphVerbosityScopeVtbl;

    interface BrowseModeParagraphVerbosityScope
    {
        CONST_VTBL struct BrowseModeParagraphVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeParagraphVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeParagraphVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeParagraphVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeParagraphVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeParagraphVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeParagraphVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeParagraphVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeParagraphVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeParagraphVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeParagraphVerbosityScope_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeParagraphVerbosityScope_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeParagraphVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeParagraphVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeParagraphVerbosityScope_put_SmartParagraphMode(This,prop)	\
    ( (This)->lpVtbl -> put_SmartParagraphMode(This,prop) ) 

#define BrowseModeParagraphVerbosityScope_get_SmartParagraphMode(This,prop)	\
    ( (This)->lpVtbl -> get_SmartParagraphMode(This,prop) ) 

#define BrowseModeParagraphVerbosityScope_put_ShowBlankLines(This,prop)	\
    ( (This)->lpVtbl -> put_ShowBlankLines(This,prop) ) 

#define BrowseModeParagraphVerbosityScope_get_ShowBlankLines(This,prop)	\
    ( (This)->lpVtbl -> get_ShowBlankLines(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeParagraphVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeQuoteVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeQuoteVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeQuoteVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeQuoteVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fb6ec9d5-60a6-43a4-9e69-fd29bf1dbfcb")
    BrowseModeQuoteVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indicate( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indicate( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeQuoteVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeQuoteVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeQuoteVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeQuoteVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeQuoteVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeQuoteVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeQuoteVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeQuoteVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeQuoteVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeQuoteVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indicate )( 
            BrowseModeQuoteVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indicate )( 
            BrowseModeQuoteVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeQuoteVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeQuoteVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeQuoteVerbosityScopeVtbl;

    interface BrowseModeQuoteVerbosityScope
    {
        CONST_VTBL struct BrowseModeQuoteVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeQuoteVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeQuoteVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeQuoteVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeQuoteVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeQuoteVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeQuoteVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeQuoteVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeQuoteVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeQuoteVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeQuoteVerbosityScope_put_Indicate(This,prop)	\
    ( (This)->lpVtbl -> put_Indicate(This,prop) ) 

#define BrowseModeQuoteVerbosityScope_get_Indicate(This,prop)	\
    ( (This)->lpVtbl -> get_Indicate(This,prop) ) 

#define BrowseModeQuoteVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeQuoteVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeQuoteVerbosityScope_INTERFACE_DEFINED__ */


#ifndef __BrowseModeTableVerbosityScope_INTERFACE_DEFINED__
#define __BrowseModeTableVerbosityScope_INTERFACE_DEFINED__

/* interface BrowseModeTableVerbosityScope */
/* [object][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeTableVerbosityScope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2ffc450f-e611-4b78-8113-7d32fe6bf0fc")
    BrowseModeTableVerbosityScope : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadToEnd( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadToEnd( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeSummary( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeSummary( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeSize( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeSize( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeRowGrouping( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeRowGrouping( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_IncludeMergedCells( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IncludeMergedCells( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_HeaderAttributeOverride( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_HeaderAttributeOverride( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indication( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indication( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_DefaultHeaderTo( 
            /* [in] */ SetFileScopes prop) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DefaultHeaderTo( 
            /* [retval][out] */ SetFileScopes *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeTableVerbosityScopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeTableVerbosityScope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeTableVerbosityScope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeTableVerbosityScope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeTableVerbosityScope * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeTableVerbosityScope * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadToEnd )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadToEnd )( 
            BrowseModeTableVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeSummary )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeSummary )( 
            BrowseModeTableVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeSize )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeSize )( 
            BrowseModeTableVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeRowGrouping )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeRowGrouping )( 
            BrowseModeTableVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeMergedCells )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeMergedCells )( 
            BrowseModeTableVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HeaderAttributeOverride )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HeaderAttributeOverride )( 
            BrowseModeTableVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indication )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indication )( 
            BrowseModeTableVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultHeaderTo )( 
            BrowseModeTableVerbosityScope * This,
            /* [in] */ SetFileScopes prop);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultHeaderTo )( 
            BrowseModeTableVerbosityScope * This,
            /* [retval][out] */ SetFileScopes *prop);
        
        END_INTERFACE
    } BrowseModeTableVerbosityScopeVtbl;

    interface BrowseModeTableVerbosityScope
    {
        CONST_VTBL struct BrowseModeTableVerbosityScopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeTableVerbosityScope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeTableVerbosityScope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeTableVerbosityScope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeTableVerbosityScope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeTableVerbosityScope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeTableVerbosityScope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeTableVerbosityScope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeTableVerbosityScope_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeTableVerbosityScope_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeTableVerbosityScope_put_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> put_ReadToEnd(This,prop) ) 

#define BrowseModeTableVerbosityScope_get_ReadToEnd(This,prop)	\
    ( (This)->lpVtbl -> get_ReadToEnd(This,prop) ) 

#define BrowseModeTableVerbosityScope_put_IncludeSummary(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeSummary(This,prop) ) 

#define BrowseModeTableVerbosityScope_get_IncludeSummary(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeSummary(This,prop) ) 

#define BrowseModeTableVerbosityScope_put_IncludeSize(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeSize(This,prop) ) 

#define BrowseModeTableVerbosityScope_get_IncludeSize(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeSize(This,prop) ) 

#define BrowseModeTableVerbosityScope_put_IncludeRowGrouping(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeRowGrouping(This,prop) ) 

#define BrowseModeTableVerbosityScope_get_IncludeRowGrouping(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeRowGrouping(This,prop) ) 

#define BrowseModeTableVerbosityScope_put_IncludeMergedCells(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeMergedCells(This,prop) ) 

#define BrowseModeTableVerbosityScope_get_IncludeMergedCells(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeMergedCells(This,prop) ) 

#define BrowseModeTableVerbosityScope_put_HeaderAttributeOverride(This,prop)	\
    ( (This)->lpVtbl -> put_HeaderAttributeOverride(This,prop) ) 

#define BrowseModeTableVerbosityScope_get_HeaderAttributeOverride(This,prop)	\
    ( (This)->lpVtbl -> get_HeaderAttributeOverride(This,prop) ) 

#define BrowseModeTableVerbosityScope_put_Indication(This,prop)	\
    ( (This)->lpVtbl -> put_Indication(This,prop) ) 

#define BrowseModeTableVerbosityScope_get_Indication(This,prop)	\
    ( (This)->lpVtbl -> get_Indication(This,prop) ) 

#define BrowseModeTableVerbosityScope_put_DefaultHeaderTo(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultHeaderTo(This,prop) ) 

#define BrowseModeTableVerbosityScope_get_DefaultHeaderTo(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultHeaderTo(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeTableVerbosityScope_INTERFACE_DEFINED__ */


#ifndef ___ApplicationEvents_INTERFACE_DEFINED__
#define ___ApplicationEvents_INTERFACE_DEFINED__

/* interface _ApplicationEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__ApplicationEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d3ae5d19-1833-4cc1-8647-194c201270ab")
    _ApplicationEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnQuit( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnHotkey( 
            /* [in] */ HotkeyID ID,
            /* [in] */ VARIANT_BOOL IsBeforeAction,
            /* [in] */ VARIANT_BOOL DefaultActionAborted,
            /* [retval][out] */ VARIANT_BOOL *AbortDefaultAction) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSetFileActivate( 
            /* [in] */ SetFile *newActive) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnCursorKey( 
            /* [in] */ CursorKey *CursorKey,
            /* [in] */ VARIANT_BOOL IsBeforeApplication,
            /* [in] */ VARIANT_BOOL DefaultActionAborted,
            /* [retval][out] */ VARIANT_BOOL *AbortDefaultAction) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _ApplicationEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnQuit )( 
            _ApplicationEvents * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnHotkey )( 
            _ApplicationEvents * This,
            /* [in] */ HotkeyID ID,
            /* [in] */ VARIANT_BOOL IsBeforeAction,
            /* [in] */ VARIANT_BOOL DefaultActionAborted,
            /* [retval][out] */ VARIANT_BOOL *AbortDefaultAction);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSetFileActivate )( 
            _ApplicationEvents * This,
            /* [in] */ SetFile *newActive);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnCursorKey )( 
            _ApplicationEvents * This,
            /* [in] */ CursorKey *CursorKey,
            /* [in] */ VARIANT_BOOL IsBeforeApplication,
            /* [in] */ VARIANT_BOOL DefaultActionAborted,
            /* [retval][out] */ VARIANT_BOOL *AbortDefaultAction);
        
        END_INTERFACE
    } _ApplicationEventsVtbl;

    interface _ApplicationEvents
    {
        CONST_VTBL struct _ApplicationEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ApplicationEvents_OnQuit(This)	\
    ( (This)->lpVtbl -> OnQuit(This) ) 

#define _ApplicationEvents_OnHotkey(This,ID,IsBeforeAction,DefaultActionAborted,AbortDefaultAction)	\
    ( (This)->lpVtbl -> OnHotkey(This,ID,IsBeforeAction,DefaultActionAborted,AbortDefaultAction) ) 

#define _ApplicationEvents_OnSetFileActivate(This,newActive)	\
    ( (This)->lpVtbl -> OnSetFileActivate(This,newActive) ) 

#define _ApplicationEvents_OnCursorKey(This,CursorKey,IsBeforeApplication,DefaultActionAborted,AbortDefaultAction)	\
    ( (This)->lpVtbl -> OnCursorKey(This,CursorKey,IsBeforeApplication,DefaultActionAborted,AbortDefaultAction) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___ApplicationEvents_INTERFACE_DEFINED__ */


#ifndef __ApplicationEvents_DISPINTERFACE_DEFINED__
#define __ApplicationEvents_DISPINTERFACE_DEFINED__

/* dispinterface ApplicationEvents */
/* [helpcontext][uuid] */ 


EXTERN_C const IID DIID_ApplicationEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("dcfe6a7d-1541-4ead-bc3a-bb9108c36c7f")
    ApplicationEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ApplicationEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ApplicationEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ApplicationEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ApplicationEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ApplicationEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ApplicationEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ApplicationEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ApplicationEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } ApplicationEventsVtbl;

    interface ApplicationEvents
    {
        CONST_VTBL struct ApplicationEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ApplicationEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ApplicationEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ApplicationEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ApplicationEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ApplicationEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ApplicationEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ApplicationEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ApplicationEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___SharedObjectEvents_INTERFACE_DEFINED__
#define ___SharedObjectEvents_INTERFACE_DEFINED__

/* interface _SharedObjectEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__SharedObjectEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("410cb436-7831-4707-a01f-64e425ff1f0e")
    _SharedObjectEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnStateChange( 
            /* [in] */ BSTR ObjectName,
            /* [in] */ VARIANT_BOOL Loaded) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _SharedObjectEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnStateChange )( 
            _SharedObjectEvents * This,
            /* [in] */ BSTR ObjectName,
            /* [in] */ VARIANT_BOOL Loaded);
        
        END_INTERFACE
    } _SharedObjectEventsVtbl;

    interface _SharedObjectEvents
    {
        CONST_VTBL struct _SharedObjectEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _SharedObjectEvents_OnStateChange(This,ObjectName,Loaded)	\
    ( (This)->lpVtbl -> OnStateChange(This,ObjectName,Loaded) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___SharedObjectEvents_INTERFACE_DEFINED__ */


#ifndef __SharedObjectEvents_DISPINTERFACE_DEFINED__
#define __SharedObjectEvents_DISPINTERFACE_DEFINED__

/* dispinterface SharedObjectEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_SharedObjectEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("88a69bf3-4f8b-406b-9720-29c25542bd9d")
    SharedObjectEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct SharedObjectEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SharedObjectEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SharedObjectEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SharedObjectEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SharedObjectEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SharedObjectEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SharedObjectEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SharedObjectEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } SharedObjectEventsVtbl;

    interface SharedObjectEvents
    {
        CONST_VTBL struct SharedObjectEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SharedObjectEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SharedObjectEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SharedObjectEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SharedObjectEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SharedObjectEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SharedObjectEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SharedObjectEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __SharedObjectEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___ClientInformationEvents_INTERFACE_DEFINED__
#define ___ClientInformationEvents_INTERFACE_DEFINED__

/* interface _ClientInformationEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__ClientInformationEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a09e1e00-2b3c-4e53-9005-40d400ce039a")
    _ClientInformationEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnShutdown( void) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _ClientInformationEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnShutdown )( 
            _ClientInformationEvents * This);
        
        END_INTERFACE
    } _ClientInformationEventsVtbl;

    interface _ClientInformationEvents
    {
        CONST_VTBL struct _ClientInformationEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ClientInformationEvents_OnShutdown(This)	\
    ( (This)->lpVtbl -> OnShutdown(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___ClientInformationEvents_INTERFACE_DEFINED__ */


#ifndef __ClientInformationEvents_DISPINTERFACE_DEFINED__
#define __ClientInformationEvents_DISPINTERFACE_DEFINED__

/* dispinterface ClientInformationEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_ClientInformationEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("b571f50f-ab45-487d-b320-66989edb305a")
    ClientInformationEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ClientInformationEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ClientInformationEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ClientInformationEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ClientInformationEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ClientInformationEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ClientInformationEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ClientInformationEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ClientInformationEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } ClientInformationEventsVtbl;

    interface ClientInformationEvents
    {
        CONST_VTBL struct ClientInformationEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ClientInformationEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ClientInformationEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ClientInformationEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ClientInformationEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ClientInformationEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ClientInformationEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ClientInformationEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ClientInformationEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___Script_INTERFACE_DEFINED__
#define ___Script_INTERFACE_DEFINED__

/* interface _Script */
/* [object][helpstring][hidden][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__Script;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9426c016-0f4f-4e32-bee8-bfd466c8cfcf")
    _Script : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **application) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateObject( 
            /* [in] */ BSTR progid,
            /* [retval][out] */ IDispatch **pDisp) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConnectEvent( 
            /* [in] */ VARIANT sourceObject,
            /* [in] */ VARIANT event,
            /* [in] */ VARIANT function,
            /* [retval][out] */ long *connectionHandle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Disconnect( 
            /* [in] */ long connectionHandle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Sleep( 
            /* [in] */ long Milliseconds) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartTimer( 
            /* [in] */ long Milliseconds,
            /* [in] */ VARIANT Function,
            /* [optional][in] */ VARIANT Parameter,
            /* [retval][out] */ long *TimerID) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StopTimer( 
            /* [in] */ long TimerID) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConnectObject( 
            /* [in] */ VARIANT sourceObject,
            /* [in] */ BSTR prefix,
            /* [retval][out] */ long *connectionHandle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputDebugString( 
            /* [in] */ BSTR str) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CommonFileDialog( 
            /* [in] */ VARIANT_BOOL UseForOpen,
            /* [optional][in] */ VARIANT DialogTitle,
            /* [optional][in] */ VARIANT InitialFileName,
            /* [optional][in] */ VARIANT InitialDirectory,
            /* [optional][in] */ VARIANT Filters,
            /* [optional][in] */ VARIANT FilterIndex,
            /* [optional][in] */ VARIANT DefaultExtension,
            /* [optional][in] */ VARIANT Flags,
            /* [optional][in] */ VARIANT ParentWindow,
            /* [retval][out] */ BSTR *FileName) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LoadClassInformation( 
            IDispatch *object) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StopScript( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DoEvents( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Queue( 
            /* [in] */ VARIANT Function,
            /* [optional][in] */ VARIANT Parameter) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConnectEventWithParameter( 
            /* [in] */ VARIANT sourceObject,
            /* [in] */ VARIANT event,
            /* [in] */ VARIANT function,
            /* [in] */ VARIANT parameter,
            /* [retval][out] */ long *connectionHandle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConnectObjectWithParameter( 
            /* [in] */ VARIANT sourceObject,
            /* [in] */ BSTR prefix,
            /* [in] */ VARIANT parameter,
            /* [retval][out] */ long *connectionHandle) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _ScriptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Script * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Script * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Script * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Script * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Script * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Script * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Script * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Script * This,
            /* [retval][out] */ _Application **application);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Script * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateObject )( 
            _Script * This,
            /* [in] */ BSTR progid,
            /* [retval][out] */ IDispatch **pDisp);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConnectEvent )( 
            _Script * This,
            /* [in] */ VARIANT sourceObject,
            /* [in] */ VARIANT event,
            /* [in] */ VARIANT function,
            /* [retval][out] */ long *connectionHandle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Disconnect )( 
            _Script * This,
            /* [in] */ long connectionHandle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Sleep )( 
            _Script * This,
            /* [in] */ long Milliseconds);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartTimer )( 
            _Script * This,
            /* [in] */ long Milliseconds,
            /* [in] */ VARIANT Function,
            /* [optional][in] */ VARIANT Parameter,
            /* [retval][out] */ long *TimerID);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StopTimer )( 
            _Script * This,
            /* [in] */ long TimerID);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConnectObject )( 
            _Script * This,
            /* [in] */ VARIANT sourceObject,
            /* [in] */ BSTR prefix,
            /* [retval][out] */ long *connectionHandle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutputDebugString )( 
            _Script * This,
            /* [in] */ BSTR str);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CommonFileDialog )( 
            _Script * This,
            /* [in] */ VARIANT_BOOL UseForOpen,
            /* [optional][in] */ VARIANT DialogTitle,
            /* [optional][in] */ VARIANT InitialFileName,
            /* [optional][in] */ VARIANT InitialDirectory,
            /* [optional][in] */ VARIANT Filters,
            /* [optional][in] */ VARIANT FilterIndex,
            /* [optional][in] */ VARIANT DefaultExtension,
            /* [optional][in] */ VARIANT Flags,
            /* [optional][in] */ VARIANT ParentWindow,
            /* [retval][out] */ BSTR *FileName);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LoadClassInformation )( 
            _Script * This,
            IDispatch *object);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StopScript )( 
            _Script * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DoEvents )( 
            _Script * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Queue )( 
            _Script * This,
            /* [in] */ VARIANT Function,
            /* [optional][in] */ VARIANT Parameter);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConnectEventWithParameter )( 
            _Script * This,
            /* [in] */ VARIANT sourceObject,
            /* [in] */ VARIANT event,
            /* [in] */ VARIANT function,
            /* [in] */ VARIANT parameter,
            /* [retval][out] */ long *connectionHandle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConnectObjectWithParameter )( 
            _Script * This,
            /* [in] */ VARIANT sourceObject,
            /* [in] */ BSTR prefix,
            /* [in] */ VARIANT parameter,
            /* [retval][out] */ long *connectionHandle);
        
        END_INTERFACE
    } _ScriptVtbl;

    interface _Script
    {
        CONST_VTBL struct _ScriptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Script_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Script_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Script_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Script_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Script_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Script_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Script_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Script_get_Application(This,application)	\
    ( (This)->lpVtbl -> get_Application(This,application) ) 

#define _Script_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Script_CreateObject(This,progid,pDisp)	\
    ( (This)->lpVtbl -> CreateObject(This,progid,pDisp) ) 

#define _Script_ConnectEvent(This,sourceObject,event,function,connectionHandle)	\
    ( (This)->lpVtbl -> ConnectEvent(This,sourceObject,event,function,connectionHandle) ) 

#define _Script_Disconnect(This,connectionHandle)	\
    ( (This)->lpVtbl -> Disconnect(This,connectionHandle) ) 

#define _Script_Sleep(This,Milliseconds)	\
    ( (This)->lpVtbl -> Sleep(This,Milliseconds) ) 

#define _Script_StartTimer(This,Milliseconds,Function,Parameter,TimerID)	\
    ( (This)->lpVtbl -> StartTimer(This,Milliseconds,Function,Parameter,TimerID) ) 

#define _Script_StopTimer(This,TimerID)	\
    ( (This)->lpVtbl -> StopTimer(This,TimerID) ) 

#define _Script_ConnectObject(This,sourceObject,prefix,connectionHandle)	\
    ( (This)->lpVtbl -> ConnectObject(This,sourceObject,prefix,connectionHandle) ) 

#define _Script_OutputDebugString(This,str)	\
    ( (This)->lpVtbl -> OutputDebugString(This,str) ) 

#define _Script_CommonFileDialog(This,UseForOpen,DialogTitle,InitialFileName,InitialDirectory,Filters,FilterIndex,DefaultExtension,Flags,ParentWindow,FileName)	\
    ( (This)->lpVtbl -> CommonFileDialog(This,UseForOpen,DialogTitle,InitialFileName,InitialDirectory,Filters,FilterIndex,DefaultExtension,Flags,ParentWindow,FileName) ) 

#define _Script_LoadClassInformation(This,object)	\
    ( (This)->lpVtbl -> LoadClassInformation(This,object) ) 

#define _Script_StopScript(This)	\
    ( (This)->lpVtbl -> StopScript(This) ) 

#define _Script_DoEvents(This)	\
    ( (This)->lpVtbl -> DoEvents(This) ) 

#define _Script_Queue(This,Function,Parameter)	\
    ( (This)->lpVtbl -> Queue(This,Function,Parameter) ) 

#define _Script_ConnectEventWithParameter(This,sourceObject,event,function,parameter,connectionHandle)	\
    ( (This)->lpVtbl -> ConnectEventWithParameter(This,sourceObject,event,function,parameter,connectionHandle) ) 

#define _Script_ConnectObjectWithParameter(This,sourceObject,prefix,parameter,connectionHandle)	\
    ( (This)->lpVtbl -> ConnectObjectWithParameter(This,sourceObject,prefix,parameter,connectionHandle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Script_INTERFACE_DEFINED__ */


#ifndef ___ScriptEvents_INTERFACE_DEFINED__
#define ___ScriptEvents_INTERFACE_DEFINED__

/* interface _ScriptEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__ScriptEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("54ea3dcb-7ced-4ee6-a8eb-60197b901657")
    _ScriptEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnError( 
            /* [in] */ BSTR ScriptPath,
            /* [in] */ BSTR ScriptName,
            /* [in] */ BSTR Description,
            /* [in] */ BSTR Source,
            /* [in] */ int wCode,
            /* [in] */ long sCode,
            /* [in] */ long line,
            /* [in] */ long column) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _ScriptEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnError )( 
            _ScriptEvents * This,
            /* [in] */ BSTR ScriptPath,
            /* [in] */ BSTR ScriptName,
            /* [in] */ BSTR Description,
            /* [in] */ BSTR Source,
            /* [in] */ int wCode,
            /* [in] */ long sCode,
            /* [in] */ long line,
            /* [in] */ long column);
        
        END_INTERFACE
    } _ScriptEventsVtbl;

    interface _ScriptEvents
    {
        CONST_VTBL struct _ScriptEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ScriptEvents_OnError(This,ScriptPath,ScriptName,Description,Source,wCode,sCode,line,column)	\
    ( (This)->lpVtbl -> OnError(This,ScriptPath,ScriptName,Description,Source,wCode,sCode,line,column) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___ScriptEvents_INTERFACE_DEFINED__ */


#ifndef __ScriptEvents_DISPINTERFACE_DEFINED__
#define __ScriptEvents_DISPINTERFACE_DEFINED__

/* dispinterface ScriptEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_ScriptEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("afad796f-288a-4947-b442-19541cbf9f9d")
    ScriptEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ScriptEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ScriptEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ScriptEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ScriptEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ScriptEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ScriptEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ScriptEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ScriptEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } ScriptEventsVtbl;

    interface ScriptEvents
    {
        CONST_VTBL struct ScriptEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ScriptEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ScriptEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ScriptEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ScriptEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ScriptEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ScriptEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ScriptEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ScriptEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___MouseEvents_INTERFACE_DEFINED__
#define ___MouseEvents_INTERFACE_DEFINED__

/* interface _MouseEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__MouseEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a7f54d0c-4dbd-4b50-a081-e8039352d118")
    _MouseEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnMove( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnButtonUp( 
            /* [in] */ MouseButton button) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnButtonDown( 
            /* [in] */ MouseButton button) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnMoveEx( 
            /* [in] */ ScreenPoint *screenPoint,
            /* [in] */ _Window *window,
            /* [in] */ MouseButton button,
            /* [in] */ KeyModifiers keyModifiers) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnButtonUpEx( 
            /* [in] */ ScreenPoint *screenPoint,
            /* [in] */ _Window *window,
            /* [in] */ MouseButton button,
            /* [in] */ KeyModifiers keyModifiers) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnButtonDownEx( 
            /* [in] */ ScreenPoint *screenPoint,
            /* [in] */ _Window *window,
            /* [in] */ MouseButton button,
            /* [in] */ KeyModifiers keyModifiers) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnWheel( 
            /* [in] */ ScreenPoint *screenPoint,
            /* [in] */ _Window *window,
            /* [in] */ MouseButton button,
            /* [in] */ KeyModifiers keyModifiers,
            /* [in] */ long Delta,
            /* [in] */ MouseWheelDirection direction) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _MouseEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnMove )( 
            _MouseEvents * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnButtonUp )( 
            _MouseEvents * This,
            /* [in] */ MouseButton button);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnButtonDown )( 
            _MouseEvents * This,
            /* [in] */ MouseButton button);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnMoveEx )( 
            _MouseEvents * This,
            /* [in] */ ScreenPoint *screenPoint,
            /* [in] */ _Window *window,
            /* [in] */ MouseButton button,
            /* [in] */ KeyModifiers keyModifiers);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnButtonUpEx )( 
            _MouseEvents * This,
            /* [in] */ ScreenPoint *screenPoint,
            /* [in] */ _Window *window,
            /* [in] */ MouseButton button,
            /* [in] */ KeyModifiers keyModifiers);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnButtonDownEx )( 
            _MouseEvents * This,
            /* [in] */ ScreenPoint *screenPoint,
            /* [in] */ _Window *window,
            /* [in] */ MouseButton button,
            /* [in] */ KeyModifiers keyModifiers);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnWheel )( 
            _MouseEvents * This,
            /* [in] */ ScreenPoint *screenPoint,
            /* [in] */ _Window *window,
            /* [in] */ MouseButton button,
            /* [in] */ KeyModifiers keyModifiers,
            /* [in] */ long Delta,
            /* [in] */ MouseWheelDirection direction);
        
        END_INTERFACE
    } _MouseEventsVtbl;

    interface _MouseEvents
    {
        CONST_VTBL struct _MouseEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _MouseEvents_OnMove(This)	\
    ( (This)->lpVtbl -> OnMove(This) ) 

#define _MouseEvents_OnButtonUp(This,button)	\
    ( (This)->lpVtbl -> OnButtonUp(This,button) ) 

#define _MouseEvents_OnButtonDown(This,button)	\
    ( (This)->lpVtbl -> OnButtonDown(This,button) ) 

#define _MouseEvents_OnMoveEx(This,screenPoint,window,button,keyModifiers)	\
    ( (This)->lpVtbl -> OnMoveEx(This,screenPoint,window,button,keyModifiers) ) 

#define _MouseEvents_OnButtonUpEx(This,screenPoint,window,button,keyModifiers)	\
    ( (This)->lpVtbl -> OnButtonUpEx(This,screenPoint,window,button,keyModifiers) ) 

#define _MouseEvents_OnButtonDownEx(This,screenPoint,window,button,keyModifiers)	\
    ( (This)->lpVtbl -> OnButtonDownEx(This,screenPoint,window,button,keyModifiers) ) 

#define _MouseEvents_OnWheel(This,screenPoint,window,button,keyModifiers,Delta,direction)	\
    ( (This)->lpVtbl -> OnWheel(This,screenPoint,window,button,keyModifiers,Delta,direction) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___MouseEvents_INTERFACE_DEFINED__ */


#ifndef __MouseEvents_DISPINTERFACE_DEFINED__
#define __MouseEvents_DISPINTERFACE_DEFINED__

/* dispinterface MouseEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_MouseEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("c54c5fb5-92d8-4f03-8354-646eb129a62f")
    MouseEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct MouseEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MouseEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MouseEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MouseEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MouseEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MouseEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MouseEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MouseEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } MouseEventsVtbl;

    interface MouseEvents
    {
        CONST_VTBL struct MouseEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MouseEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MouseEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MouseEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MouseEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MouseEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MouseEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MouseEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __MouseEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IWEConnectionPointSink_INTERFACE_DEFINED__
#define __IWEConnectionPointSink_INTERFACE_DEFINED__

/* interface IWEConnectionPointSink */
/* [object][uuid] */ 


EXTERN_C const IID IID_IWEConnectionPointSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f46b74a4-5bd8-45f5-8dcd-6b9c014aaefd")
    IWEConnectionPointSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE WantsEvent( 
            DISPID event) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IWEConnectionPointSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IWEConnectionPointSink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IWEConnectionPointSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IWEConnectionPointSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *WantsEvent )( 
            IWEConnectionPointSink * This,
            DISPID event);
        
        END_INTERFACE
    } IWEConnectionPointSinkVtbl;

    interface IWEConnectionPointSink
    {
        CONST_VTBL struct IWEConnectionPointSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IWEConnectionPointSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IWEConnectionPointSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IWEConnectionPointSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IWEConnectionPointSink_WantsEvent(This,event)	\
    ( (This)->lpVtbl -> WantsEvent(This,event) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IWEConnectionPointSink_INTERFACE_DEFINED__ */


#ifndef __WindowEvents_DISPINTERFACE_DEFINED__
#define __WindowEvents_DISPINTERFACE_DEFINED__

/* dispinterface WindowEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_WindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("609d3d91-10e3-474a-8922-7251af6157a5")
    WindowEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct WindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WindowEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WindowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WindowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WindowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WindowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WindowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WindowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } WindowEventsVtbl;

    interface WindowEvents
    {
        CONST_VTBL struct WindowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WindowEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WindowEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WindowEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WindowEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WindowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WindowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WindowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __WindowEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___KeyEvents_INTERFACE_DEFINED__
#define ___KeyEvents_INTERFACE_DEFINED__

/* interface _KeyEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__KeyEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("daa21096-0ef0-45b5-b242-315b379ef2d8")
    _KeyEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnKeyDown( 
            /* [in] */ long Key,
            /* [in] */ KeyModifiers Modifiers,
            /* [retval][out] */ KeyDisposition *disposition) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnKeyUp( 
            /* [in] */ long Key,
            /* [in] */ KeyModifiers Modifiers,
            /* [retval][out] */ KeyDisposition *disposition) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnKeyProcessedDown( 
            /* [in] */ long Key,
            /* [in] */ KeyModifiers Modifers) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnKeyProcessedUp( 
            /* [in] */ long Key,
            /* [in] */ KeyModifiers Modifers) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _KeyEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnKeyDown )( 
            _KeyEvents * This,
            /* [in] */ long Key,
            /* [in] */ KeyModifiers Modifiers,
            /* [retval][out] */ KeyDisposition *disposition);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnKeyUp )( 
            _KeyEvents * This,
            /* [in] */ long Key,
            /* [in] */ KeyModifiers Modifiers,
            /* [retval][out] */ KeyDisposition *disposition);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnKeyProcessedDown )( 
            _KeyEvents * This,
            /* [in] */ long Key,
            /* [in] */ KeyModifiers Modifers);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnKeyProcessedUp )( 
            _KeyEvents * This,
            /* [in] */ long Key,
            /* [in] */ KeyModifiers Modifers);
        
        END_INTERFACE
    } _KeyEventsVtbl;

    interface _KeyEvents
    {
        CONST_VTBL struct _KeyEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _KeyEvents_OnKeyDown(This,Key,Modifiers,disposition)	\
    ( (This)->lpVtbl -> OnKeyDown(This,Key,Modifiers,disposition) ) 

#define _KeyEvents_OnKeyUp(This,Key,Modifiers,disposition)	\
    ( (This)->lpVtbl -> OnKeyUp(This,Key,Modifiers,disposition) ) 

#define _KeyEvents_OnKeyProcessedDown(This,Key,Modifers)	\
    ( (This)->lpVtbl -> OnKeyProcessedDown(This,Key,Modifers) ) 

#define _KeyEvents_OnKeyProcessedUp(This,Key,Modifers)	\
    ( (This)->lpVtbl -> OnKeyProcessedUp(This,Key,Modifers) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___KeyEvents_INTERFACE_DEFINED__ */


#ifndef __KeyEvents_DISPINTERFACE_DEFINED__
#define __KeyEvents_DISPINTERFACE_DEFINED__

/* dispinterface KeyEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_KeyEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("67aae81e-d763-4bb2-b1c0-cd8421375688")
    KeyEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct KeyEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            KeyEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            KeyEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            KeyEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            KeyEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            KeyEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            KeyEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            KeyEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } KeyEventsVtbl;

    interface KeyEvents
    {
        CONST_VTBL struct KeyEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define KeyEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define KeyEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define KeyEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define KeyEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define KeyEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define KeyEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define KeyEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __KeyEvents_DISPINTERFACE_DEFINED__ */


#ifndef __BrailleAttributes_INTERFACE_DEFINED__
#define __BrailleAttributes_INTERFACE_DEFINED__

/* interface BrailleAttributes */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrailleAttributes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("27a1f779-31db-466e-8a62-57dbb89d3504")
    BrailleAttributes : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ControlType( 
            /* [retval][out] */ BrailleControlTypeEnum *type) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Bold( 
            /* [retval][out] */ VARIANT_BOOL *bold) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Highlight( 
            /* [retval][out] */ VARIANT_BOOL *highlight) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Italic( 
            /* [retval][out] */ VARIANT_BOOL *italic) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Strikeout( 
            /* [retval][out] */ VARIANT_BOOL *strikeout) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Underline( 
            /* [retval][out] */ VARIANT_BOOL *underline) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrailleAttributesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleAttributes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleAttributes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleAttributes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleAttributes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleAttributes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleAttributes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleAttributes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrailleAttributes * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrailleAttributes * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ControlType )( 
            BrailleAttributes * This,
            /* [retval][out] */ BrailleControlTypeEnum *type);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Bold )( 
            BrailleAttributes * This,
            /* [retval][out] */ VARIANT_BOOL *bold);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Highlight )( 
            BrailleAttributes * This,
            /* [retval][out] */ VARIANT_BOOL *highlight);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Italic )( 
            BrailleAttributes * This,
            /* [retval][out] */ VARIANT_BOOL *italic);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Strikeout )( 
            BrailleAttributes * This,
            /* [retval][out] */ VARIANT_BOOL *strikeout);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Underline )( 
            BrailleAttributes * This,
            /* [retval][out] */ VARIANT_BOOL *underline);
        
        END_INTERFACE
    } BrailleAttributesVtbl;

    interface BrailleAttributes
    {
        CONST_VTBL struct BrailleAttributesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleAttributes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleAttributes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleAttributes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleAttributes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleAttributes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleAttributes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleAttributes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrailleAttributes_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrailleAttributes_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrailleAttributes_get_ControlType(This,type)	\
    ( (This)->lpVtbl -> get_ControlType(This,type) ) 

#define BrailleAttributes_get_Bold(This,bold)	\
    ( (This)->lpVtbl -> get_Bold(This,bold) ) 

#define BrailleAttributes_get_Highlight(This,highlight)	\
    ( (This)->lpVtbl -> get_Highlight(This,highlight) ) 

#define BrailleAttributes_get_Italic(This,italic)	\
    ( (This)->lpVtbl -> get_Italic(This,italic) ) 

#define BrailleAttributes_get_Strikeout(This,strikeout)	\
    ( (This)->lpVtbl -> get_Strikeout(This,strikeout) ) 

#define BrailleAttributes_get_Underline(This,underline)	\
    ( (This)->lpVtbl -> get_Underline(This,underline) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrailleAttributes_INTERFACE_DEFINED__ */


#ifndef ___Braille_INTERFACE_DEFINED__
#define ___Braille_INTERFACE_DEFINED__

/* interface _Braille */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__Braille;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6b0afc3b-4428-483b-8801-89d035c6bcc0")
    _Braille : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PhysicalCellCount( 
            /* [retval][out] */ long *cellCount) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ActiveCellCount( 
            /* [retval][out] */ long *cellCount) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FirstActiveCell( 
            /* [retval][out] */ long *firstActive) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Character( 
            /* [in] */ long index,
            /* [retval][out] */ BSTR *character) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DotPattern( 
            /* [in] */ long index,
            /* [retval][out] */ BSTR *dotPattern) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [in] */ long index,
            /* [retval][out] */ BrailleAttributes **attributes) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Translated( 
            /* [in] */ long index,
            /* [retval][out] */ VARIANT_BOOL *translated) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [in] */ long index,
            /* [retval][out] */ ScreenPoint **position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MousePosition( 
            /* [retval][out] */ long *mousePosition) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CursorPosition( 
            /* [retval][out] */ long *cursorPosition) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_QuickMessageDisplayed( 
            /* [retval][out] */ VARIANT_BOOL *quickMessage) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ BSTR *line) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EntireDisplay( 
            /* [retval][out] */ Braille	**entireDisplay) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Word( 
            /* [in] */ long index,
            /* [retval][out] */ BSTR *word) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WordStart( 
            /* [in] */ long index,
            /* [retval][out] */ long *startIndex) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WordEnd( 
            /* [in] */ long index,
            /* [retval][out] */ long *endIndex) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DotPatternToUnicode( 
            /* [in] */ BSTR dotPattern,
            /* [retval][out] */ BSTR *unicode) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Display( 
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT index,
            /* [optional][in] */ VARIANT location) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DisplayQuickMessage( 
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Translate( 
            /* [in] */ BSTR text,
            /* [retval][out] */ BSTR *translatedText) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Freeze( 
            /* [in] */ BrailleFreezeLocation location,
            /* [in] */ long count,
            /* [retval][out] */ Braille	**frozen) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UnicodeToDotPattern( 
            /* [in] */ BSTR unicodeCharacter,
            /* [retval][out] */ BSTR *dotPattern) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DotPatternToUnicodeBraille( 
            /* [in] */ BSTR character,
            /* [retval][out] */ BSTR *unicode) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StringToUnicodeBraille( 
            /* [in] */ BSTR text,
            /* [retval][out] */ BSTR *unicode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DisplayMode( 
            /* [in] */ BrailleDisplayMode mode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DisplayMode( 
            /* [retval][out] */ BrailleDisplayMode *mode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TranslationTables( 
            /* [retval][out] */ BrailleTables **table) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_BrailleWindow( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_BrailleWindow( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SeparatorDotPattern( 
            /* [retval][out] */ BSTR *pattern) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SeparatorDotPattern( 
            /* [in] */ BSTR pattern) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ControlTypes( 
            /* [retval][out] */ BrailleControlTypes **types) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SpeechBoxModeCharacterLimit( 
            /* [retval][out] */ long *limit) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SpeechBoxModeCharacterLimit( 
            /* [in] */ long limit) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LineModeIncludeDataIndicators( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineModeIncludeDataIndicators( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LineModeLeftIndicatorDotPattern( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineModeLeftIndicatorDotPattern( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LineModeRightIndicatorDotPattern( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineModeRightIndicatorDotPattern( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_UseGraphicSeparator( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_UseGraphicSeparator( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DotPatterns( 
            /* [retval][out] */ BrailleDotPatterns **patterns) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Tracking( 
            /* [in] */ BrailleTracking prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Tracking( 
            /* [retval][out] */ BrailleTracking *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _BrailleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Braille * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Braille * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Braille * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Braille * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Braille * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Braille * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Braille * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Braille * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Braille * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PhysicalCellCount )( 
            _Braille * This,
            /* [retval][out] */ long *cellCount);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveCellCount )( 
            _Braille * This,
            /* [retval][out] */ long *cellCount);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstActiveCell )( 
            _Braille * This,
            /* [retval][out] */ long *firstActive);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Character )( 
            _Braille * This,
            /* [in] */ long index,
            /* [retval][out] */ BSTR *character);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DotPattern )( 
            _Braille * This,
            /* [in] */ long index,
            /* [retval][out] */ BSTR *dotPattern);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            _Braille * This,
            /* [in] */ long index,
            /* [retval][out] */ BrailleAttributes **attributes);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Translated )( 
            _Braille * This,
            /* [in] */ long index,
            /* [retval][out] */ VARIANT_BOOL *translated);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _Braille * This,
            /* [in] */ long index,
            /* [retval][out] */ ScreenPoint **position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MousePosition )( 
            _Braille * This,
            /* [retval][out] */ long *mousePosition);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CursorPosition )( 
            _Braille * This,
            /* [retval][out] */ long *cursorPosition);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuickMessageDisplayed )( 
            _Braille * This,
            /* [retval][out] */ VARIANT_BOOL *quickMessage);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            _Braille * This,
            /* [retval][out] */ BSTR *line);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EntireDisplay )( 
            _Braille * This,
            /* [retval][out] */ Braille	**entireDisplay);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Word )( 
            _Braille * This,
            /* [in] */ long index,
            /* [retval][out] */ BSTR *word);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WordStart )( 
            _Braille * This,
            /* [in] */ long index,
            /* [retval][out] */ long *startIndex);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WordEnd )( 
            _Braille * This,
            /* [in] */ long index,
            /* [retval][out] */ long *endIndex);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DotPatternToUnicode )( 
            _Braille * This,
            /* [in] */ BSTR dotPattern,
            /* [retval][out] */ BSTR *unicode);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Display )( 
            _Braille * This,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT index,
            /* [optional][in] */ VARIANT location);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DisplayQuickMessage )( 
            _Braille * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Translate )( 
            _Braille * This,
            /* [in] */ BSTR text,
            /* [retval][out] */ BSTR *translatedText);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Freeze )( 
            _Braille * This,
            /* [in] */ BrailleFreezeLocation location,
            /* [in] */ long count,
            /* [retval][out] */ Braille	**frozen);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            _Braille * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UnicodeToDotPattern )( 
            _Braille * This,
            /* [in] */ BSTR unicodeCharacter,
            /* [retval][out] */ BSTR *dotPattern);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DotPatternToUnicodeBraille )( 
            _Braille * This,
            /* [in] */ BSTR character,
            /* [retval][out] */ BSTR *unicode);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StringToUnicodeBraille )( 
            _Braille * This,
            /* [in] */ BSTR text,
            /* [retval][out] */ BSTR *unicode);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayMode )( 
            _Braille * This,
            /* [in] */ BrailleDisplayMode mode);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayMode )( 
            _Braille * This,
            /* [retval][out] */ BrailleDisplayMode *mode);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TranslationTables )( 
            _Braille * This,
            /* [retval][out] */ BrailleTables **table);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BrailleWindow )( 
            _Braille * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BrailleWindow )( 
            _Braille * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SeparatorDotPattern )( 
            _Braille * This,
            /* [retval][out] */ BSTR *pattern);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SeparatorDotPattern )( 
            _Braille * This,
            /* [in] */ BSTR pattern);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ControlTypes )( 
            _Braille * This,
            /* [retval][out] */ BrailleControlTypes **types);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SpeechBoxModeCharacterLimit )( 
            _Braille * This,
            /* [retval][out] */ long *limit);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SpeechBoxModeCharacterLimit )( 
            _Braille * This,
            /* [in] */ long limit);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineModeIncludeDataIndicators )( 
            _Braille * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineModeIncludeDataIndicators )( 
            _Braille * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineModeLeftIndicatorDotPattern )( 
            _Braille * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineModeLeftIndicatorDotPattern )( 
            _Braille * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineModeRightIndicatorDotPattern )( 
            _Braille * This,
            /* [in] */ BSTR prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineModeRightIndicatorDotPattern )( 
            _Braille * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UseGraphicSeparator )( 
            _Braille * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UseGraphicSeparator )( 
            _Braille * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DotPatterns )( 
            _Braille * This,
            /* [retval][out] */ BrailleDotPatterns **patterns);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Tracking )( 
            _Braille * This,
            /* [in] */ BrailleTracking prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Tracking )( 
            _Braille * This,
            /* [retval][out] */ BrailleTracking *prop);
        
        END_INTERFACE
    } _BrailleVtbl;

    interface _Braille
    {
        CONST_VTBL struct _BrailleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Braille_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Braille_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Braille_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Braille_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Braille_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Braille_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Braille_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Braille_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _Braille_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Braille_get_PhysicalCellCount(This,cellCount)	\
    ( (This)->lpVtbl -> get_PhysicalCellCount(This,cellCount) ) 

#define _Braille_get_ActiveCellCount(This,cellCount)	\
    ( (This)->lpVtbl -> get_ActiveCellCount(This,cellCount) ) 

#define _Braille_get_FirstActiveCell(This,firstActive)	\
    ( (This)->lpVtbl -> get_FirstActiveCell(This,firstActive) ) 

#define _Braille_get_Character(This,index,character)	\
    ( (This)->lpVtbl -> get_Character(This,index,character) ) 

#define _Braille_get_DotPattern(This,index,dotPattern)	\
    ( (This)->lpVtbl -> get_DotPattern(This,index,dotPattern) ) 

#define _Braille_get_Attributes(This,index,attributes)	\
    ( (This)->lpVtbl -> get_Attributes(This,index,attributes) ) 

#define _Braille_get_Translated(This,index,translated)	\
    ( (This)->lpVtbl -> get_Translated(This,index,translated) ) 

#define _Braille_get_Position(This,index,position)	\
    ( (This)->lpVtbl -> get_Position(This,index,position) ) 

#define _Braille_get_MousePosition(This,mousePosition)	\
    ( (This)->lpVtbl -> get_MousePosition(This,mousePosition) ) 

#define _Braille_get_CursorPosition(This,cursorPosition)	\
    ( (This)->lpVtbl -> get_CursorPosition(This,cursorPosition) ) 

#define _Braille_get_QuickMessageDisplayed(This,quickMessage)	\
    ( (This)->lpVtbl -> get_QuickMessageDisplayed(This,quickMessage) ) 

#define _Braille_get_Line(This,line)	\
    ( (This)->lpVtbl -> get_Line(This,line) ) 

#define _Braille_get_EntireDisplay(This,entireDisplay)	\
    ( (This)->lpVtbl -> get_EntireDisplay(This,entireDisplay) ) 

#define _Braille_Word(This,index,word)	\
    ( (This)->lpVtbl -> Word(This,index,word) ) 

#define _Braille_WordStart(This,index,startIndex)	\
    ( (This)->lpVtbl -> WordStart(This,index,startIndex) ) 

#define _Braille_WordEnd(This,index,endIndex)	\
    ( (This)->lpVtbl -> WordEnd(This,index,endIndex) ) 

#define _Braille_DotPatternToUnicode(This,dotPattern,unicode)	\
    ( (This)->lpVtbl -> DotPatternToUnicode(This,dotPattern,unicode) ) 

#define _Braille_Display(This,text,index,location)	\
    ( (This)->lpVtbl -> Display(This,text,index,location) ) 

#define _Braille_DisplayQuickMessage(This,text)	\
    ( (This)->lpVtbl -> DisplayQuickMessage(This,text) ) 

#define _Braille_Translate(This,text,translatedText)	\
    ( (This)->lpVtbl -> Translate(This,text,translatedText) ) 

#define _Braille_Freeze(This,location,count,frozen)	\
    ( (This)->lpVtbl -> Freeze(This,location,count,frozen) ) 

#define _Braille_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define _Braille_UnicodeToDotPattern(This,unicodeCharacter,dotPattern)	\
    ( (This)->lpVtbl -> UnicodeToDotPattern(This,unicodeCharacter,dotPattern) ) 

#define _Braille_DotPatternToUnicodeBraille(This,character,unicode)	\
    ( (This)->lpVtbl -> DotPatternToUnicodeBraille(This,character,unicode) ) 

#define _Braille_StringToUnicodeBraille(This,text,unicode)	\
    ( (This)->lpVtbl -> StringToUnicodeBraille(This,text,unicode) ) 

#define _Braille_put_DisplayMode(This,mode)	\
    ( (This)->lpVtbl -> put_DisplayMode(This,mode) ) 

#define _Braille_get_DisplayMode(This,mode)	\
    ( (This)->lpVtbl -> get_DisplayMode(This,mode) ) 

#define _Braille_get_TranslationTables(This,table)	\
    ( (This)->lpVtbl -> get_TranslationTables(This,table) ) 

#define _Braille_get_BrailleWindow(This,prop)	\
    ( (This)->lpVtbl -> get_BrailleWindow(This,prop) ) 

#define _Braille_put_BrailleWindow(This,prop)	\
    ( (This)->lpVtbl -> put_BrailleWindow(This,prop) ) 

#define _Braille_get_SeparatorDotPattern(This,pattern)	\
    ( (This)->lpVtbl -> get_SeparatorDotPattern(This,pattern) ) 

#define _Braille_put_SeparatorDotPattern(This,pattern)	\
    ( (This)->lpVtbl -> put_SeparatorDotPattern(This,pattern) ) 

#define _Braille_get_ControlTypes(This,types)	\
    ( (This)->lpVtbl -> get_ControlTypes(This,types) ) 

#define _Braille_get_SpeechBoxModeCharacterLimit(This,limit)	\
    ( (This)->lpVtbl -> get_SpeechBoxModeCharacterLimit(This,limit) ) 

#define _Braille_put_SpeechBoxModeCharacterLimit(This,limit)	\
    ( (This)->lpVtbl -> put_SpeechBoxModeCharacterLimit(This,limit) ) 

#define _Braille_put_LineModeIncludeDataIndicators(This,prop)	\
    ( (This)->lpVtbl -> put_LineModeIncludeDataIndicators(This,prop) ) 

#define _Braille_get_LineModeIncludeDataIndicators(This,prop)	\
    ( (This)->lpVtbl -> get_LineModeIncludeDataIndicators(This,prop) ) 

#define _Braille_put_LineModeLeftIndicatorDotPattern(This,prop)	\
    ( (This)->lpVtbl -> put_LineModeLeftIndicatorDotPattern(This,prop) ) 

#define _Braille_get_LineModeLeftIndicatorDotPattern(This,prop)	\
    ( (This)->lpVtbl -> get_LineModeLeftIndicatorDotPattern(This,prop) ) 

#define _Braille_put_LineModeRightIndicatorDotPattern(This,prop)	\
    ( (This)->lpVtbl -> put_LineModeRightIndicatorDotPattern(This,prop) ) 

#define _Braille_get_LineModeRightIndicatorDotPattern(This,prop)	\
    ( (This)->lpVtbl -> get_LineModeRightIndicatorDotPattern(This,prop) ) 

#define _Braille_get_UseGraphicSeparator(This,prop)	\
    ( (This)->lpVtbl -> get_UseGraphicSeparator(This,prop) ) 

#define _Braille_put_UseGraphicSeparator(This,prop)	\
    ( (This)->lpVtbl -> put_UseGraphicSeparator(This,prop) ) 

#define _Braille_get_DotPatterns(This,patterns)	\
    ( (This)->lpVtbl -> get_DotPatterns(This,patterns) ) 

#define _Braille_put_Tracking(This,prop)	\
    ( (This)->lpVtbl -> put_Tracking(This,prop) ) 

#define _Braille_get_Tracking(This,prop)	\
    ( (This)->lpVtbl -> get_Tracking(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Braille_INTERFACE_DEFINED__ */


#ifndef ___BrailleEvents_INTERFACE_DEFINED__
#define ___BrailleEvents_INTERFACE_DEFINED__

/* interface _BrailleEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__BrailleEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e864f32c-5e06-49a5-97fa-752ec7afef28")
    _BrailleEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnLengthChanged( 
            /* [in] */ long newLength) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnUpdate( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnRoutingKey( 
            /* [in] */ BrailleHotKey *key,
            /* [retval][out] */ VARIANT_BOOL *keep) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnTableActivate( 
            /* [in] */ BrailleTable *table) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _BrailleEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnLengthChanged )( 
            _BrailleEvents * This,
            /* [in] */ long newLength);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnUpdate )( 
            _BrailleEvents * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnRoutingKey )( 
            _BrailleEvents * This,
            /* [in] */ BrailleHotKey *key,
            /* [retval][out] */ VARIANT_BOOL *keep);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnTableActivate )( 
            _BrailleEvents * This,
            /* [in] */ BrailleTable *table);
        
        END_INTERFACE
    } _BrailleEventsVtbl;

    interface _BrailleEvents
    {
        CONST_VTBL struct _BrailleEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _BrailleEvents_OnLengthChanged(This,newLength)	\
    ( (This)->lpVtbl -> OnLengthChanged(This,newLength) ) 

#define _BrailleEvents_OnUpdate(This)	\
    ( (This)->lpVtbl -> OnUpdate(This) ) 

#define _BrailleEvents_OnRoutingKey(This,key,keep)	\
    ( (This)->lpVtbl -> OnRoutingKey(This,key,keep) ) 

#define _BrailleEvents_OnTableActivate(This,table)	\
    ( (This)->lpVtbl -> OnTableActivate(This,table) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___BrailleEvents_INTERFACE_DEFINED__ */


#ifndef __BrailleEvents_DISPINTERFACE_DEFINED__
#define __BrailleEvents_DISPINTERFACE_DEFINED__

/* dispinterface BrailleEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_BrailleEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1fd1fe04-9d70-43d9-ace3-62dc859bb93d")
    BrailleEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct BrailleEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } BrailleEventsVtbl;

    interface BrailleEvents
    {
        CONST_VTBL struct BrailleEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __BrailleEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___BrailleDisplayEvents_INTERFACE_DEFINED__
#define ___BrailleDisplayEvents_INTERFACE_DEFINED__

/* interface _BrailleDisplayEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__BrailleDisplayEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b8ed3390-bcd5-46eb-bb41-e76e0a187509")
    _BrailleDisplayEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnKey( 
            /* [in] */ BrailleHotKey *key,
            /* [retval][out] */ VARIANT_BOOL *keep) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _BrailleDisplayEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnKey )( 
            _BrailleDisplayEvents * This,
            /* [in] */ BrailleHotKey *key,
            /* [retval][out] */ VARIANT_BOOL *keep);
        
        END_INTERFACE
    } _BrailleDisplayEventsVtbl;

    interface _BrailleDisplayEvents
    {
        CONST_VTBL struct _BrailleDisplayEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _BrailleDisplayEvents_OnKey(This,key,keep)	\
    ( (This)->lpVtbl -> OnKey(This,key,keep) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___BrailleDisplayEvents_INTERFACE_DEFINED__ */


#ifndef __BrailleDisplayEvents_DISPINTERFACE_DEFINED__
#define __BrailleDisplayEvents_DISPINTERFACE_DEFINED__

/* dispinterface BrailleDisplayEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_BrailleDisplayEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7e518b60-494b-4153-bdc0-0501d2322fe5")
    BrailleDisplayEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct BrailleDisplayEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleDisplayEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleDisplayEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleDisplayEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleDisplayEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleDisplayEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleDisplayEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleDisplayEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } BrailleDisplayEventsVtbl;

    interface BrailleDisplayEvents
    {
        CONST_VTBL struct BrailleDisplayEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleDisplayEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleDisplayEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleDisplayEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleDisplayEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleDisplayEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleDisplayEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleDisplayEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __BrailleDisplayEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___BrailleDisplays_INTERFACE_DEFINED__
#define ___BrailleDisplays_INTERFACE_DEFINED__

/* interface _BrailleDisplays */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__BrailleDisplays;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bdfe3bab-a96d-4994-be3d-237966da8f4a")
    _BrailleDisplays : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ _BrailleDisplay **active) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Initialized( 
            /* [retval][out] */ VARIANT_BOOL *initalized) = 0;
        
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ _BrailleDisplay **brailleDisplay) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _BrailleDisplaysVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _BrailleDisplays * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _BrailleDisplays * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _BrailleDisplays * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _BrailleDisplays * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _BrailleDisplays * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _BrailleDisplays * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _BrailleDisplays * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _BrailleDisplays * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _BrailleDisplays * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            _BrailleDisplays * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            _BrailleDisplays * This,
            /* [retval][out] */ _BrailleDisplay **active);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Initialized )( 
            _BrailleDisplays * This,
            /* [retval][out] */ VARIANT_BOOL *initalized);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            _BrailleDisplays * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            _BrailleDisplays * This,
            /* [in] */ long index,
            /* [retval][out] */ _BrailleDisplay **brailleDisplay);
        
        END_INTERFACE
    } _BrailleDisplaysVtbl;

    interface _BrailleDisplays
    {
        CONST_VTBL struct _BrailleDisplaysVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _BrailleDisplays_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _BrailleDisplays_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _BrailleDisplays_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _BrailleDisplays_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _BrailleDisplays_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _BrailleDisplays_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _BrailleDisplays_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _BrailleDisplays_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _BrailleDisplays_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _BrailleDisplays_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define _BrailleDisplays_get_Active(This,active)	\
    ( (This)->lpVtbl -> get_Active(This,active) ) 

#define _BrailleDisplays_get_Initialized(This,initalized)	\
    ( (This)->lpVtbl -> get_Initialized(This,initalized) ) 

#define _BrailleDisplays_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define _BrailleDisplays_Item(This,index,brailleDisplay)	\
    ( (This)->lpVtbl -> Item(This,index,brailleDisplay) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___BrailleDisplays_INTERFACE_DEFINED__ */


#ifndef ___BrailleDisplaysEvents_INTERFACE_DEFINED__
#define ___BrailleDisplaysEvents_INTERFACE_DEFINED__

/* interface _BrailleDisplaysEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__BrailleDisplaysEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fa8e9baf-ca70-48aa-a0f7-8ff19b05320b")
    _BrailleDisplaysEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnActivate( 
            /* [in] */ _BrailleDisplay *newActive) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _BrailleDisplaysEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnActivate )( 
            _BrailleDisplaysEvents * This,
            /* [in] */ _BrailleDisplay *newActive);
        
        END_INTERFACE
    } _BrailleDisplaysEventsVtbl;

    interface _BrailleDisplaysEvents
    {
        CONST_VTBL struct _BrailleDisplaysEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _BrailleDisplaysEvents_OnActivate(This,newActive)	\
    ( (This)->lpVtbl -> OnActivate(This,newActive) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___BrailleDisplaysEvents_INTERFACE_DEFINED__ */


#ifndef __BrailleDisplaysEvents_DISPINTERFACE_DEFINED__
#define __BrailleDisplaysEvents_DISPINTERFACE_DEFINED__

/* dispinterface BrailleDisplaysEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_BrailleDisplaysEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("9a96ccbd-4e68-4d73-b5d7-ebf3d45cc930")
    BrailleDisplaysEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct BrailleDisplaysEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrailleDisplaysEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrailleDisplaysEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrailleDisplaysEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrailleDisplaysEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrailleDisplaysEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrailleDisplaysEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrailleDisplaysEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } BrailleDisplaysEventsVtbl;

    interface BrailleDisplaysEvents
    {
        CONST_VTBL struct BrailleDisplaysEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrailleDisplaysEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrailleDisplaysEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrailleDisplaysEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrailleDisplaysEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrailleDisplaysEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrailleDisplaysEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrailleDisplaysEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __BrailleDisplaysEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___SpeechEvents_INTERFACE_DEFINED__
#define ___SpeechEvents_INTERFACE_DEFINED__

/* interface _SpeechEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__SpeechEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("05911da0-f272-4fdb-8cdb-24b916957f72")
    _SpeechEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSpeak( 
            /* [in] */ BSTR OriginalStringToSpeak,
            /* [retval][out] */ BSTR *NewStringToSpeak) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnProcessCharacterDictionaries( 
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnProcessFormatAlert( 
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnProcessRepeatFilter( 
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnProcessExceptionDictionaries( 
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnProcessNumbers( 
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnProcessSplitAlphaNumeric( 
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnProcessSplitMixedCaseWords( 
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnLanguageSwitch( 
            /* [in] */ BSTR Language) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _SpeechEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSpeak )( 
            _SpeechEvents * This,
            /* [in] */ BSTR OriginalStringToSpeak,
            /* [retval][out] */ BSTR *NewStringToSpeak);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnProcessCharacterDictionaries )( 
            _SpeechEvents * This,
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnProcessFormatAlert )( 
            _SpeechEvents * This,
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnProcessRepeatFilter )( 
            _SpeechEvents * This,
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnProcessExceptionDictionaries )( 
            _SpeechEvents * This,
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnProcessNumbers )( 
            _SpeechEvents * This,
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnProcessSplitAlphaNumeric )( 
            _SpeechEvents * This,
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnProcessSplitMixedCaseWords )( 
            _SpeechEvents * This,
            /* [in] */ BSTR String,
            /* [out] */ BSTR *NewString,
            /* [retval][out] */ VARIANT_BOOL *Process);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnLanguageSwitch )( 
            _SpeechEvents * This,
            /* [in] */ BSTR Language);
        
        END_INTERFACE
    } _SpeechEventsVtbl;

    interface _SpeechEvents
    {
        CONST_VTBL struct _SpeechEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _SpeechEvents_OnSpeak(This,OriginalStringToSpeak,NewStringToSpeak)	\
    ( (This)->lpVtbl -> OnSpeak(This,OriginalStringToSpeak,NewStringToSpeak) ) 

#define _SpeechEvents_OnProcessCharacterDictionaries(This,String,NewString,Process)	\
    ( (This)->lpVtbl -> OnProcessCharacterDictionaries(This,String,NewString,Process) ) 

#define _SpeechEvents_OnProcessFormatAlert(This,String,NewString,Process)	\
    ( (This)->lpVtbl -> OnProcessFormatAlert(This,String,NewString,Process) ) 

#define _SpeechEvents_OnProcessRepeatFilter(This,String,NewString,Process)	\
    ( (This)->lpVtbl -> OnProcessRepeatFilter(This,String,NewString,Process) ) 

#define _SpeechEvents_OnProcessExceptionDictionaries(This,String,NewString,Process)	\
    ( (This)->lpVtbl -> OnProcessExceptionDictionaries(This,String,NewString,Process) ) 

#define _SpeechEvents_OnProcessNumbers(This,String,NewString,Process)	\
    ( (This)->lpVtbl -> OnProcessNumbers(This,String,NewString,Process) ) 

#define _SpeechEvents_OnProcessSplitAlphaNumeric(This,String,NewString,Process)	\
    ( (This)->lpVtbl -> OnProcessSplitAlphaNumeric(This,String,NewString,Process) ) 

#define _SpeechEvents_OnProcessSplitMixedCaseWords(This,String,NewString,Process)	\
    ( (This)->lpVtbl -> OnProcessSplitMixedCaseWords(This,String,NewString,Process) ) 

#define _SpeechEvents_OnLanguageSwitch(This,Language)	\
    ( (This)->lpVtbl -> OnLanguageSwitch(This,Language) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___SpeechEvents_INTERFACE_DEFINED__ */


#ifndef __SpeechEvents_DISPINTERFACE_DEFINED__
#define __SpeechEvents_DISPINTERFACE_DEFINED__

/* dispinterface SpeechEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_SpeechEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("a2f3eb81-cfcc-4d1e-8033-21822a9a6f68")
    SpeechEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct SpeechEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SpeechEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SpeechEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SpeechEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SpeechEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SpeechEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SpeechEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SpeechEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } SpeechEventsVtbl;

    interface SpeechEvents
    {
        CONST_VTBL struct SpeechEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SpeechEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SpeechEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SpeechEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SpeechEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SpeechEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SpeechEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SpeechEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __SpeechEvents_DISPINTERFACE_DEFINED__ */


#ifndef __CharacterOffsets_INTERFACE_DEFINED__
#define __CharacterOffsets_INTERFACE_DEFINED__

/* interface CharacterOffsets */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_CharacterOffsets;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3ad09936-1812-4f02-a430-a257e9a68bfc")
    CharacterOffsets : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ long *offset) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CharacterOffsetsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CharacterOffsets * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CharacterOffsets * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CharacterOffsets * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CharacterOffsets * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CharacterOffsets * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CharacterOffsets * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CharacterOffsets * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CharacterOffsets * This,
            /* [in] */ long index,
            /* [retval][out] */ long *offset);
        
        END_INTERFACE
    } CharacterOffsetsVtbl;

    interface CharacterOffsets
    {
        CONST_VTBL struct CharacterOffsetsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CharacterOffsets_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CharacterOffsets_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CharacterOffsets_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CharacterOffsets_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CharacterOffsets_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CharacterOffsets_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CharacterOffsets_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CharacterOffsets_Item(This,index,offset)	\
    ( (This)->lpVtbl -> Item(This,index,offset) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CharacterOffsets_INTERFACE_DEFINED__ */


#ifndef ___MouseCursorEvents_INTERFACE_DEFINED__
#define ___MouseCursorEvents_INTERFACE_DEFINED__

/* interface _MouseCursorEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__MouseCursorEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("737af3cd-f235-4d32-8263-5d918ba44e3f")
    _MouseCursorEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnChanged( 
            /* [in] */ long CursorID,
            /* [in] */ BSTR CursorName) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _MouseCursorEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnChanged )( 
            _MouseCursorEvents * This,
            /* [in] */ long CursorID,
            /* [in] */ BSTR CursorName);
        
        END_INTERFACE
    } _MouseCursorEventsVtbl;

    interface _MouseCursorEvents
    {
        CONST_VTBL struct _MouseCursorEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _MouseCursorEvents_OnChanged(This,CursorID,CursorName)	\
    ( (This)->lpVtbl -> OnChanged(This,CursorID,CursorName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___MouseCursorEvents_INTERFACE_DEFINED__ */


#ifndef __MouseCursorEvents_DISPINTERFACE_DEFINED__
#define __MouseCursorEvents_DISPINTERFACE_DEFINED__

/* dispinterface MouseCursorEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_MouseCursorEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3dac6012-ccae-4bc3-923b-1d57da9ba5e9")
    MouseCursorEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct MouseCursorEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MouseCursorEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MouseCursorEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MouseCursorEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MouseCursorEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MouseCursorEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MouseCursorEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MouseCursorEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } MouseCursorEventsVtbl;

    interface MouseCursorEvents
    {
        CONST_VTBL struct MouseCursorEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MouseCursorEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MouseCursorEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MouseCursorEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MouseCursorEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MouseCursorEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MouseCursorEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MouseCursorEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __MouseCursorEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___EditBox_INTERFACE_DEFINED__
#define ___EditBox_INTERFACE_DEFINED__

/* interface _EditBox */
/* [object][hidden][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__EditBox;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f38f6dfc-06e8-42a0-8c64-9138fc36637d")
    _EditBox : public _Control
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FirstVisibleLine( 
            /* [retval][out] */ long *line) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextLimit( 
            /* [retval][out] */ long *limit) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextLimit( 
            /* [in] */ long limit) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LineCount( 
            /* [retval][out] */ long *lines) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelectionStart( 
            /* [retval][out] */ long *selStart) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SelectionStart( 
            /* [in] */ long selStart) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelectionEnd( 
            /* [retval][out] */ long *selEnd) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SelectionEnd( 
            /* [in] */ long selEnd) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ VARIANT_BOOL *readOnly) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ReadOnly( 
            /* [in] */ VARIANT_BOOL readOnly) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextAlignment( 
            /* [retval][out] */ TextAlignment *alignment) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextAlignment( 
            /* [in] */ TextAlignment alignment) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Multiline( 
            /* [retval][out] */ VARIANT_BOOL *multiline) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Password( 
            /* [retval][out] */ VARIANT_BOOL *password) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cursor( 
            /* [retval][out] */ long *cursor) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Cursor( 
            /* [in] */ long cursor) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ BSTR *Selection) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharAtPoint( 
            /* [in] */ ClientPoint *point,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Line( 
            /* [in] */ long lineNumber,
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LineFromChar( 
            /* [in] */ long index,
            /* [retval][out] */ long *lineNumber) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharFromLine( 
            /* [in] */ long lineNumber,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LineLength( 
            /* [in] */ long lineNumber,
            /* [retval][out] */ long *length) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScrollBy( 
            /* [in] */ long x,
            /* [in] */ long y) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharacterPosition( 
            /* [in] */ long index,
            /* [retval][out] */ ClientPoint **point) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Replace( 
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScrollToCursor( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EditBoxVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EditBox * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EditBox * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EditBox * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EditBox * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EditBox * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EditBox * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EditBox * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            _EditBox * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            _EditBox * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _EditBox * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _EditBox * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _EditBox * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            _EditBox * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            _EditBox * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            _EditBox * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _EditBox * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            _EditBox * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            _EditBox * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _EditBox * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _EditBox * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _EditBox * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _EditBox * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            _EditBox * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            _EditBox * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            _EditBox * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            _EditBox * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            _EditBox * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            _EditBox * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _EditBox * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            _EditBox * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            _EditBox * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            _EditBox * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            _EditBox * This);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            _EditBox * This,
            /* [in] */ long id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FirstVisibleLine )( 
            _EditBox * This,
            /* [retval][out] */ long *line);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextLimit )( 
            _EditBox * This,
            /* [retval][out] */ long *limit);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextLimit )( 
            _EditBox * This,
            /* [in] */ long limit);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LineCount )( 
            _EditBox * This,
            /* [retval][out] */ long *lines);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionStart )( 
            _EditBox * This,
            /* [retval][out] */ long *selStart);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SelectionStart )( 
            _EditBox * This,
            /* [in] */ long selStart);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionEnd )( 
            _EditBox * This,
            /* [retval][out] */ long *selEnd);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SelectionEnd )( 
            _EditBox * This,
            /* [in] */ long selEnd);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            _EditBox * This,
            /* [retval][out] */ VARIANT_BOOL *readOnly);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ReadOnly )( 
            _EditBox * This,
            /* [in] */ VARIANT_BOOL readOnly);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextAlignment )( 
            _EditBox * This,
            /* [retval][out] */ TextAlignment *alignment);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextAlignment )( 
            _EditBox * This,
            /* [in] */ TextAlignment alignment);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Multiline )( 
            _EditBox * This,
            /* [retval][out] */ VARIANT_BOOL *multiline);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Password )( 
            _EditBox * This,
            /* [retval][out] */ VARIANT_BOOL *password);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cursor )( 
            _EditBox * This,
            /* [retval][out] */ long *cursor);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Cursor )( 
            _EditBox * This,
            /* [in] */ long cursor);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            _EditBox * This,
            /* [retval][out] */ BSTR *Selection);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharAtPoint )( 
            _EditBox * This,
            /* [in] */ ClientPoint *point,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Line )( 
            _EditBox * This,
            /* [in] */ long lineNumber,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LineFromChar )( 
            _EditBox * This,
            /* [in] */ long index,
            /* [retval][out] */ long *lineNumber);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharFromLine )( 
            _EditBox * This,
            /* [in] */ long lineNumber,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LineLength )( 
            _EditBox * This,
            /* [in] */ long lineNumber,
            /* [retval][out] */ long *length);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScrollBy )( 
            _EditBox * This,
            /* [in] */ long x,
            /* [in] */ long y);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharacterPosition )( 
            _EditBox * This,
            /* [in] */ long index,
            /* [retval][out] */ ClientPoint **point);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Replace )( 
            _EditBox * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScrollToCursor )( 
            _EditBox * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            _EditBox * This);
        
        END_INTERFACE
    } _EditBoxVtbl;

    interface _EditBox
    {
        CONST_VTBL struct _EditBoxVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EditBox_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _EditBox_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _EditBox_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _EditBox_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _EditBox_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _EditBox_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _EditBox_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _EditBox_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define _EditBox_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define _EditBox_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _EditBox_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _EditBox_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define _EditBox_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define _EditBox_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define _EditBox_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define _EditBox_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define _EditBox_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define _EditBox_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define _EditBox_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define _EditBox_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define _EditBox_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define _EditBox_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define _EditBox_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define _EditBox_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define _EditBox_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define _EditBox_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define _EditBox_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define _EditBox_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define _EditBox_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _EditBox_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define _EditBox_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define _EditBox_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define _EditBox_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define _EditBox_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 


#define _EditBox_get_FirstVisibleLine(This,line)	\
    ( (This)->lpVtbl -> get_FirstVisibleLine(This,line) ) 

#define _EditBox_get_TextLimit(This,limit)	\
    ( (This)->lpVtbl -> get_TextLimit(This,limit) ) 

#define _EditBox_put_TextLimit(This,limit)	\
    ( (This)->lpVtbl -> put_TextLimit(This,limit) ) 

#define _EditBox_get_LineCount(This,lines)	\
    ( (This)->lpVtbl -> get_LineCount(This,lines) ) 

#define _EditBox_get_SelectionStart(This,selStart)	\
    ( (This)->lpVtbl -> get_SelectionStart(This,selStart) ) 

#define _EditBox_put_SelectionStart(This,selStart)	\
    ( (This)->lpVtbl -> put_SelectionStart(This,selStart) ) 

#define _EditBox_get_SelectionEnd(This,selEnd)	\
    ( (This)->lpVtbl -> get_SelectionEnd(This,selEnd) ) 

#define _EditBox_put_SelectionEnd(This,selEnd)	\
    ( (This)->lpVtbl -> put_SelectionEnd(This,selEnd) ) 

#define _EditBox_get_ReadOnly(This,readOnly)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,readOnly) ) 

#define _EditBox_put_ReadOnly(This,readOnly)	\
    ( (This)->lpVtbl -> put_ReadOnly(This,readOnly) ) 

#define _EditBox_get_TextAlignment(This,alignment)	\
    ( (This)->lpVtbl -> get_TextAlignment(This,alignment) ) 

#define _EditBox_put_TextAlignment(This,alignment)	\
    ( (This)->lpVtbl -> put_TextAlignment(This,alignment) ) 

#define _EditBox_get_Multiline(This,multiline)	\
    ( (This)->lpVtbl -> get_Multiline(This,multiline) ) 

#define _EditBox_get_Password(This,password)	\
    ( (This)->lpVtbl -> get_Password(This,password) ) 

#define _EditBox_get_Cursor(This,cursor)	\
    ( (This)->lpVtbl -> get_Cursor(This,cursor) ) 

#define _EditBox_put_Cursor(This,cursor)	\
    ( (This)->lpVtbl -> put_Cursor(This,cursor) ) 

#define _EditBox_get_Selection(This,Selection)	\
    ( (This)->lpVtbl -> get_Selection(This,Selection) ) 

#define _EditBox_CharAtPoint(This,point,index)	\
    ( (This)->lpVtbl -> CharAtPoint(This,point,index) ) 

#define _EditBox_Line(This,lineNumber,text)	\
    ( (This)->lpVtbl -> Line(This,lineNumber,text) ) 

#define _EditBox_LineFromChar(This,index,lineNumber)	\
    ( (This)->lpVtbl -> LineFromChar(This,index,lineNumber) ) 

#define _EditBox_CharFromLine(This,lineNumber,index)	\
    ( (This)->lpVtbl -> CharFromLine(This,lineNumber,index) ) 

#define _EditBox_LineLength(This,lineNumber,length)	\
    ( (This)->lpVtbl -> LineLength(This,lineNumber,length) ) 

#define _EditBox_ScrollBy(This,x,y)	\
    ( (This)->lpVtbl -> ScrollBy(This,x,y) ) 

#define _EditBox_CharacterPosition(This,index,point)	\
    ( (This)->lpVtbl -> CharacterPosition(This,index,point) ) 

#define _EditBox_Replace(This,text)	\
    ( (This)->lpVtbl -> Replace(This,text) ) 

#define _EditBox_ScrollToCursor(This)	\
    ( (This)->lpVtbl -> ScrollToCursor(This) ) 

#define _EditBox_SelectAll(This)	\
    ( (This)->lpVtbl -> SelectAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___EditBox_INTERFACE_DEFINED__ */


#ifndef ___Pushbutton_INTERFACE_DEFINED__
#define ___Pushbutton_INTERFACE_DEFINED__

/* interface _Pushbutton */
/* [object][hidden][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__Pushbutton;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f7125e61-8e5d-44aa-86dc-e2bc92d40c73")
    _Pushbutton : public _Control
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextAlignment( 
            /* [retval][out] */ TextAlignment *align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextAlignment( 
            /* [in] */ TextAlignment align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ VerticalAlignment *align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ VerticalAlignment align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Default( 
            /* [retval][out] */ VARIANT_BOOL *def) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Default( 
            /* [in] */ VARIANT_BOOL def) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Click( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _PushbuttonVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Pushbutton * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Pushbutton * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Pushbutton * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Pushbutton * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Pushbutton * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Pushbutton * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Pushbutton * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            _Pushbutton * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            _Pushbutton * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _Pushbutton * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Pushbutton * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _Pushbutton * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            _Pushbutton * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            _Pushbutton * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            _Pushbutton * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _Pushbutton * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            _Pushbutton * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            _Pushbutton * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _Pushbutton * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _Pushbutton * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _Pushbutton * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _Pushbutton * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            _Pushbutton * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            _Pushbutton * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            _Pushbutton * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            _Pushbutton * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            _Pushbutton * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            _Pushbutton * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _Pushbutton * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            _Pushbutton * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            _Pushbutton * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            _Pushbutton * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            _Pushbutton * This);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            _Pushbutton * This,
            /* [in] */ long id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextAlignment )( 
            _Pushbutton * This,
            /* [retval][out] */ TextAlignment *align);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextAlignment )( 
            _Pushbutton * This,
            /* [in] */ TextAlignment align);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            _Pushbutton * This,
            /* [retval][out] */ VerticalAlignment *align);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            _Pushbutton * This,
            /* [in] */ VerticalAlignment align);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Default )( 
            _Pushbutton * This,
            /* [retval][out] */ VARIANT_BOOL *def);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Default )( 
            _Pushbutton * This,
            /* [in] */ VARIANT_BOOL def);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Click )( 
            _Pushbutton * This);
        
        END_INTERFACE
    } _PushbuttonVtbl;

    interface _Pushbutton
    {
        CONST_VTBL struct _PushbuttonVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Pushbutton_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Pushbutton_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Pushbutton_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Pushbutton_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Pushbutton_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Pushbutton_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Pushbutton_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Pushbutton_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define _Pushbutton_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define _Pushbutton_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _Pushbutton_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _Pushbutton_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define _Pushbutton_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define _Pushbutton_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define _Pushbutton_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define _Pushbutton_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define _Pushbutton_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define _Pushbutton_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define _Pushbutton_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define _Pushbutton_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define _Pushbutton_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define _Pushbutton_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define _Pushbutton_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define _Pushbutton_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define _Pushbutton_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define _Pushbutton_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define _Pushbutton_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define _Pushbutton_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define _Pushbutton_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _Pushbutton_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define _Pushbutton_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define _Pushbutton_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define _Pushbutton_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define _Pushbutton_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 


#define _Pushbutton_get_TextAlignment(This,align)	\
    ( (This)->lpVtbl -> get_TextAlignment(This,align) ) 

#define _Pushbutton_put_TextAlignment(This,align)	\
    ( (This)->lpVtbl -> put_TextAlignment(This,align) ) 

#define _Pushbutton_get_VerticalAlignment(This,align)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,align) ) 

#define _Pushbutton_put_VerticalAlignment(This,align)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,align) ) 

#define _Pushbutton_get_Default(This,def)	\
    ( (This)->lpVtbl -> get_Default(This,def) ) 

#define _Pushbutton_put_Default(This,def)	\
    ( (This)->lpVtbl -> put_Default(This,def) ) 

#define _Pushbutton_Click(This)	\
    ( (This)->lpVtbl -> Click(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Pushbutton_INTERFACE_DEFINED__ */


#ifndef ___CheckBox_INTERFACE_DEFINED__
#define ___CheckBox_INTERFACE_DEFINED__

/* interface _CheckBox */
/* [object][hidden][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__CheckBox;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fdf989f9-5d53-46b1-a31b-4e1ec662d316")
    _CheckBox : public _Control
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextAlignment( 
            /* [retval][out] */ TextAlignment *align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextAlignment( 
            /* [in] */ TextAlignment align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ThreeState( 
            /* [retval][out] */ VARIANT_BOOL *threeState) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ThreeState( 
            /* [in] */ VARIANT_BOOL threeState) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftText( 
            /* [retval][out] */ VARIANT_BOOL *leftText) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LeftText( 
            /* [in] */ VARIANT_BOOL leftText) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Checked( 
            /* [retval][out] */ CheckState *checked) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Checked( 
            /* [in] */ CheckState checked) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Click( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _CheckBoxVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _CheckBox * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _CheckBox * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _CheckBox * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _CheckBox * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _CheckBox * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _CheckBox * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _CheckBox * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            _CheckBox * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            _CheckBox * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _CheckBox * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _CheckBox * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _CheckBox * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            _CheckBox * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            _CheckBox * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            _CheckBox * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _CheckBox * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            _CheckBox * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            _CheckBox * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _CheckBox * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _CheckBox * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _CheckBox * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _CheckBox * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            _CheckBox * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            _CheckBox * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            _CheckBox * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            _CheckBox * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            _CheckBox * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            _CheckBox * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _CheckBox * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            _CheckBox * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            _CheckBox * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            _CheckBox * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            _CheckBox * This);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            _CheckBox * This,
            /* [in] */ long id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextAlignment )( 
            _CheckBox * This,
            /* [retval][out] */ TextAlignment *align);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextAlignment )( 
            _CheckBox * This,
            /* [in] */ TextAlignment align);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ThreeState )( 
            _CheckBox * This,
            /* [retval][out] */ VARIANT_BOOL *threeState);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ThreeState )( 
            _CheckBox * This,
            /* [in] */ VARIANT_BOOL threeState);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftText )( 
            _CheckBox * This,
            /* [retval][out] */ VARIANT_BOOL *leftText);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LeftText )( 
            _CheckBox * This,
            /* [in] */ VARIANT_BOOL leftText);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Checked )( 
            _CheckBox * This,
            /* [retval][out] */ CheckState *checked);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Checked )( 
            _CheckBox * This,
            /* [in] */ CheckState checked);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Click )( 
            _CheckBox * This);
        
        END_INTERFACE
    } _CheckBoxVtbl;

    interface _CheckBox
    {
        CONST_VTBL struct _CheckBoxVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _CheckBox_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _CheckBox_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _CheckBox_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _CheckBox_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _CheckBox_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _CheckBox_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _CheckBox_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _CheckBox_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define _CheckBox_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define _CheckBox_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _CheckBox_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _CheckBox_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define _CheckBox_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define _CheckBox_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define _CheckBox_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define _CheckBox_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define _CheckBox_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define _CheckBox_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define _CheckBox_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define _CheckBox_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define _CheckBox_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define _CheckBox_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define _CheckBox_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define _CheckBox_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define _CheckBox_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define _CheckBox_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define _CheckBox_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define _CheckBox_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define _CheckBox_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _CheckBox_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define _CheckBox_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define _CheckBox_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define _CheckBox_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define _CheckBox_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 


#define _CheckBox_get_TextAlignment(This,align)	\
    ( (This)->lpVtbl -> get_TextAlignment(This,align) ) 

#define _CheckBox_put_TextAlignment(This,align)	\
    ( (This)->lpVtbl -> put_TextAlignment(This,align) ) 

#define _CheckBox_get_ThreeState(This,threeState)	\
    ( (This)->lpVtbl -> get_ThreeState(This,threeState) ) 

#define _CheckBox_put_ThreeState(This,threeState)	\
    ( (This)->lpVtbl -> put_ThreeState(This,threeState) ) 

#define _CheckBox_get_LeftText(This,leftText)	\
    ( (This)->lpVtbl -> get_LeftText(This,leftText) ) 

#define _CheckBox_put_LeftText(This,leftText)	\
    ( (This)->lpVtbl -> put_LeftText(This,leftText) ) 

#define _CheckBox_get_Checked(This,checked)	\
    ( (This)->lpVtbl -> get_Checked(This,checked) ) 

#define _CheckBox_put_Checked(This,checked)	\
    ( (This)->lpVtbl -> put_Checked(This,checked) ) 

#define _CheckBox_Click(This)	\
    ( (This)->lpVtbl -> Click(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___CheckBox_INTERFACE_DEFINED__ */


#ifndef ___RadioButton_INTERFACE_DEFINED__
#define ___RadioButton_INTERFACE_DEFINED__

/* interface _RadioButton */
/* [object][hidden][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__RadioButton;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c8508d98-adc2-47e3-a51e-ceb0436592df")
    _RadioButton : public _Control
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextAlignment( 
            /* [retval][out] */ TextAlignment *align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextAlignment( 
            /* [in] */ TextAlignment align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_LeftText( 
            /* [retval][out] */ VARIANT_BOOL *leftText) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_LeftText( 
            /* [in] */ VARIANT_BOOL leftText) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Checked( 
            /* [retval][out] */ CheckState *checked) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Checked( 
            /* [in] */ CheckState checked) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Click( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _RadioButtonVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _RadioButton * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _RadioButton * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _RadioButton * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _RadioButton * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _RadioButton * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _RadioButton * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _RadioButton * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            _RadioButton * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            _RadioButton * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _RadioButton * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _RadioButton * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _RadioButton * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            _RadioButton * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            _RadioButton * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            _RadioButton * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _RadioButton * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            _RadioButton * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            _RadioButton * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _RadioButton * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _RadioButton * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _RadioButton * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _RadioButton * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            _RadioButton * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            _RadioButton * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            _RadioButton * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            _RadioButton * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            _RadioButton * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            _RadioButton * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _RadioButton * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            _RadioButton * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            _RadioButton * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            _RadioButton * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            _RadioButton * This);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            _RadioButton * This,
            /* [in] */ long id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextAlignment )( 
            _RadioButton * This,
            /* [retval][out] */ TextAlignment *align);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextAlignment )( 
            _RadioButton * This,
            /* [in] */ TextAlignment align);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftText )( 
            _RadioButton * This,
            /* [retval][out] */ VARIANT_BOOL *leftText);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_LeftText )( 
            _RadioButton * This,
            /* [in] */ VARIANT_BOOL leftText);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Checked )( 
            _RadioButton * This,
            /* [retval][out] */ CheckState *checked);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Checked )( 
            _RadioButton * This,
            /* [in] */ CheckState checked);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Click )( 
            _RadioButton * This);
        
        END_INTERFACE
    } _RadioButtonVtbl;

    interface _RadioButton
    {
        CONST_VTBL struct _RadioButtonVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _RadioButton_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _RadioButton_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _RadioButton_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _RadioButton_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _RadioButton_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _RadioButton_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _RadioButton_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _RadioButton_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define _RadioButton_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define _RadioButton_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _RadioButton_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _RadioButton_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define _RadioButton_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define _RadioButton_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define _RadioButton_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define _RadioButton_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define _RadioButton_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define _RadioButton_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define _RadioButton_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define _RadioButton_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define _RadioButton_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define _RadioButton_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define _RadioButton_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define _RadioButton_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define _RadioButton_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define _RadioButton_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define _RadioButton_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define _RadioButton_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define _RadioButton_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _RadioButton_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define _RadioButton_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define _RadioButton_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define _RadioButton_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define _RadioButton_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 


#define _RadioButton_get_TextAlignment(This,align)	\
    ( (This)->lpVtbl -> get_TextAlignment(This,align) ) 

#define _RadioButton_put_TextAlignment(This,align)	\
    ( (This)->lpVtbl -> put_TextAlignment(This,align) ) 

#define _RadioButton_get_LeftText(This,leftText)	\
    ( (This)->lpVtbl -> get_LeftText(This,leftText) ) 

#define _RadioButton_put_LeftText(This,leftText)	\
    ( (This)->lpVtbl -> put_LeftText(This,leftText) ) 

#define _RadioButton_get_Checked(This,checked)	\
    ( (This)->lpVtbl -> get_Checked(This,checked) ) 

#define _RadioButton_put_Checked(This,checked)	\
    ( (This)->lpVtbl -> put_Checked(This,checked) ) 

#define _RadioButton_Click(This)	\
    ( (This)->lpVtbl -> Click(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___RadioButton_INTERFACE_DEFINED__ */


#ifndef __GroupBox_INTERFACE_DEFINED__
#define __GroupBox_INTERFACE_DEFINED__

/* interface GroupBox */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_GroupBox;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6182416d-f3d5-4602-8b5a-47561bee7ecb")
    GroupBox : public _Control
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct GroupBoxVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            GroupBox * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            GroupBox * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            GroupBox * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            GroupBox * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            GroupBox * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            GroupBox * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            GroupBox * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            GroupBox * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            GroupBox * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            GroupBox * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            GroupBox * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            GroupBox * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            GroupBox * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            GroupBox * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            GroupBox * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            GroupBox * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            GroupBox * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            GroupBox * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            GroupBox * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            GroupBox * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            GroupBox * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            GroupBox * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            GroupBox * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            GroupBox * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            GroupBox * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            GroupBox * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            GroupBox * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            GroupBox * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            GroupBox * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            GroupBox * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            GroupBox * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            GroupBox * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            GroupBox * This);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            GroupBox * This,
            /* [in] */ long id);
        
        END_INTERFACE
    } GroupBoxVtbl;

    interface GroupBox
    {
        CONST_VTBL struct GroupBoxVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define GroupBox_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define GroupBox_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define GroupBox_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define GroupBox_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define GroupBox_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define GroupBox_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define GroupBox_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define GroupBox_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define GroupBox_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define GroupBox_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define GroupBox_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define GroupBox_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define GroupBox_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define GroupBox_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define GroupBox_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define GroupBox_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define GroupBox_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define GroupBox_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define GroupBox_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define GroupBox_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define GroupBox_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define GroupBox_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define GroupBox_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define GroupBox_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define GroupBox_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define GroupBox_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define GroupBox_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define GroupBox_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define GroupBox_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define GroupBox_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define GroupBox_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define GroupBox_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define GroupBox_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define GroupBox_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __GroupBox_INTERFACE_DEFINED__ */


#ifndef __Static_INTERFACE_DEFINED__
#define __Static_INTERFACE_DEFINED__

/* interface Static */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Static;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cf8cae4c-15c6-4226-8984-1c66352171de")
    Static : public _Control
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TextAlignment( 
            /* [retval][out] */ TextAlignment *align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TextAlignment( 
            /* [in] */ TextAlignment align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Prefix( 
            /* [retval][out] */ VARIANT_BOOL *prefix) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Prefix( 
            /* [in] */ VARIANT_BOOL prefix) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StaticVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Static * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Static * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Static * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Static * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Static * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Static * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Static * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            Static * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            Static * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Static * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Static * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            Static * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            Static * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            Static * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            Static * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            Static * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            Static * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            Static * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Static * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Static * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Static * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Static * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            Static * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            Static * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            Static * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            Static * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            Static * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            Static * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            Static * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            Static * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            Static * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            Static * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            Static * This);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            Static * This,
            /* [in] */ long id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TextAlignment )( 
            Static * This,
            /* [retval][out] */ TextAlignment *align);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TextAlignment )( 
            Static * This,
            /* [in] */ TextAlignment align);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Prefix )( 
            Static * This,
            /* [retval][out] */ VARIANT_BOOL *prefix);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Prefix )( 
            Static * This,
            /* [in] */ VARIANT_BOOL prefix);
        
        END_INTERFACE
    } StaticVtbl;

    interface Static
    {
        CONST_VTBL struct StaticVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Static_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Static_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Static_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Static_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Static_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Static_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Static_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Static_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define Static_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define Static_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define Static_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define Static_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define Static_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define Static_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define Static_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define Static_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define Static_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define Static_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define Static_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define Static_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define Static_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define Static_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define Static_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define Static_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define Static_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define Static_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define Static_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define Static_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define Static_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define Static_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define Static_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define Static_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define Static_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define Static_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 


#define Static_get_TextAlignment(This,align)	\
    ( (This)->lpVtbl -> get_TextAlignment(This,align) ) 

#define Static_put_TextAlignment(This,align)	\
    ( (This)->lpVtbl -> put_TextAlignment(This,align) ) 

#define Static_get_Prefix(This,prefix)	\
    ( (This)->lpVtbl -> get_Prefix(This,prefix) ) 

#define Static_put_Prefix(This,prefix)	\
    ( (This)->lpVtbl -> put_Prefix(This,prefix) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Static_INTERFACE_DEFINED__ */


#ifndef ___ComboBox_INTERFACE_DEFINED__
#define ___ComboBox_INTERFACE_DEFINED__

/* interface _ComboBox */
/* [object][hidden][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__ComboBox;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("86e0723d-a77f-44d8-ae7b-427d4aeb9fa5")
    _ComboBox : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [optional][in] */ VARIANT index,
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ ClientPoint **position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ ClientPoint *position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ VARIANT_BOOL *focused) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *height) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long height) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabOrder( 
            /* [retval][out] */ long *tabOrder) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabOrder( 
            /* [in] */ long tabOrder) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabStop( 
            /* [retval][out] */ VARIANT_BOOL *tabStop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabStop( 
            /* [in] */ VARIANT_BOOL tabStop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Group( 
            /* [retval][out] */ VARIANT_BOOL *group) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Group( 
            /* [in] */ VARIANT_BOOL group) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ long *id) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Focus( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ ComboBoxType *type) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Sort( 
            /* [retval][out] */ VARIANT_BOOL *sort) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DropdownVisible( 
            /* [retval][out] */ VARIANT_BOOL *visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DropdownVisible( 
            /* [in] */ VARIANT_BOOL visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelectedItem( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SelectedItem( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EditSelectionStart( 
            /* [retval][out] */ long *start) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EditSelectionStart( 
            /* [in] */ long start) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_EditSelectionEnd( 
            /* [retval][out] */ long *end) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_EditSelectionEnd( 
            /* [in] */ long end) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Data( 
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ long *data) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Data( 
            /* [optional][in] */ VARIANT index,
            /* [in] */ long data) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT data,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindStart( 
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Rectangle( 
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ ClientRectangle **rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ long index,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT data,
            /* [retval][out] */ long *newIndex) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindData( 
            /* [in] */ long data,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Replace( 
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Id( 
            /* [in] */ long id) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _ComboBoxVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _ComboBox * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _ComboBox * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _ComboBox * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _ComboBox * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _ComboBox * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _ComboBox * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _ComboBox * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            _ComboBox * This,
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            _ComboBox * This,
            /* [optional][in] */ VARIANT index,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _ComboBox * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _ComboBox * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _ComboBox * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            _ComboBox * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            _ComboBox * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            _ComboBox * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _ComboBox * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            _ComboBox * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            _ComboBox * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _ComboBox * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _ComboBox * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _ComboBox * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _ComboBox * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            _ComboBox * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            _ComboBox * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            _ComboBox * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            _ComboBox * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            _ComboBox * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            _ComboBox * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _ComboBox * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            _ComboBox * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            _ComboBox * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            _ComboBox * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            _ComboBox * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            _ComboBox * This,
            /* [retval][out] */ ComboBoxType *type);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sort )( 
            _ComboBox * This,
            /* [retval][out] */ VARIANT_BOOL *sort);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DropdownVisible )( 
            _ComboBox * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DropdownVisible )( 
            _ComboBox * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            _ComboBox * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedItem )( 
            _ComboBox * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SelectedItem )( 
            _ComboBox * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EditSelectionStart )( 
            _ComboBox * This,
            /* [retval][out] */ long *start);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EditSelectionStart )( 
            _ComboBox * This,
            /* [in] */ long start);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_EditSelectionEnd )( 
            _ComboBox * This,
            /* [retval][out] */ long *end);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_EditSelectionEnd )( 
            _ComboBox * This,
            /* [in] */ long end);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Data )( 
            _ComboBox * This,
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ long *data);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Data )( 
            _ComboBox * This,
            /* [optional][in] */ VARIANT index,
            /* [in] */ long data);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            _ComboBox * This,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT data,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            _ComboBox * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindStart )( 
            _ComboBox * This,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Find )( 
            _ComboBox * This,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Rectangle )( 
            _ComboBox * This,
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ ClientRectangle **rectangle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            _ComboBox * This,
            /* [in] */ long index,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT data,
            /* [retval][out] */ long *newIndex);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            _ComboBox * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindData )( 
            _ComboBox * This,
            /* [in] */ long data,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Replace )( 
            _ComboBox * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            _ComboBox * This,
            /* [in] */ long id);
        
        END_INTERFACE
    } _ComboBoxVtbl;

    interface _ComboBox
    {
        CONST_VTBL struct _ComboBoxVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ComboBox_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _ComboBox_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _ComboBox_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _ComboBox_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _ComboBox_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _ComboBox_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _ComboBox_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _ComboBox_get_Text(This,index,text)	\
    ( (This)->lpVtbl -> get_Text(This,index,text) ) 

#define _ComboBox_put_Text(This,index,text)	\
    ( (This)->lpVtbl -> put_Text(This,index,text) ) 

#define _ComboBox_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _ComboBox_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _ComboBox_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define _ComboBox_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define _ComboBox_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define _ComboBox_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define _ComboBox_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define _ComboBox_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define _ComboBox_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define _ComboBox_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define _ComboBox_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define _ComboBox_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define _ComboBox_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define _ComboBox_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define _ComboBox_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define _ComboBox_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define _ComboBox_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define _ComboBox_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define _ComboBox_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define _ComboBox_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _ComboBox_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define _ComboBox_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define _ComboBox_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define _ComboBox_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define _ComboBox_get_Type(This,type)	\
    ( (This)->lpVtbl -> get_Type(This,type) ) 

#define _ComboBox_get_Sort(This,sort)	\
    ( (This)->lpVtbl -> get_Sort(This,sort) ) 

#define _ComboBox_get_DropdownVisible(This,visible)	\
    ( (This)->lpVtbl -> get_DropdownVisible(This,visible) ) 

#define _ComboBox_put_DropdownVisible(This,visible)	\
    ( (This)->lpVtbl -> put_DropdownVisible(This,visible) ) 

#define _ComboBox_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define _ComboBox_get_SelectedItem(This,index)	\
    ( (This)->lpVtbl -> get_SelectedItem(This,index) ) 

#define _ComboBox_put_SelectedItem(This,index)	\
    ( (This)->lpVtbl -> put_SelectedItem(This,index) ) 

#define _ComboBox_get_EditSelectionStart(This,start)	\
    ( (This)->lpVtbl -> get_EditSelectionStart(This,start) ) 

#define _ComboBox_put_EditSelectionStart(This,start)	\
    ( (This)->lpVtbl -> put_EditSelectionStart(This,start) ) 

#define _ComboBox_get_EditSelectionEnd(This,end)	\
    ( (This)->lpVtbl -> get_EditSelectionEnd(This,end) ) 

#define _ComboBox_put_EditSelectionEnd(This,end)	\
    ( (This)->lpVtbl -> put_EditSelectionEnd(This,end) ) 

#define _ComboBox_get_Data(This,index,data)	\
    ( (This)->lpVtbl -> get_Data(This,index,data) ) 

#define _ComboBox_put_Data(This,index,data)	\
    ( (This)->lpVtbl -> put_Data(This,index,data) ) 

#define _ComboBox_Add(This,text,data,index)	\
    ( (This)->lpVtbl -> Add(This,text,data,index) ) 

#define _ComboBox_Delete(This,index)	\
    ( (This)->lpVtbl -> Delete(This,index) ) 

#define _ComboBox_FindStart(This,text,startIndex,index)	\
    ( (This)->lpVtbl -> FindStart(This,text,startIndex,index) ) 

#define _ComboBox_Find(This,text,startIndex,index)	\
    ( (This)->lpVtbl -> Find(This,text,startIndex,index) ) 

#define _ComboBox_Rectangle(This,index,rectangle)	\
    ( (This)->lpVtbl -> Rectangle(This,index,rectangle) ) 

#define _ComboBox_Insert(This,index,text,data,newIndex)	\
    ( (This)->lpVtbl -> Insert(This,index,text,data,newIndex) ) 

#define _ComboBox_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define _ComboBox_FindData(This,data,startIndex,index)	\
    ( (This)->lpVtbl -> FindData(This,data,startIndex,index) ) 

#define _ComboBox_Replace(This,text)	\
    ( (This)->lpVtbl -> Replace(This,text) ) 

#define _ComboBox_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___ComboBox_INTERFACE_DEFINED__ */


#ifndef ___ListBox_INTERFACE_DEFINED__
#define ___ListBox_INTERFACE_DEFINED__

/* interface _ListBox */
/* [object][hidden][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__ListBox;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f8209e01-c266-4fc1-96f7-61ea7c30bf4a")
    _ListBox : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [optional][in] */ VARIANT index,
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ ClientPoint **position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ ClientPoint *position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ VARIANT_BOOL *focused) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *height) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long height) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabOrder( 
            /* [retval][out] */ long *tabOrder) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabOrder( 
            /* [in] */ long tabOrder) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabStop( 
            /* [retval][out] */ VARIANT_BOOL *tabStop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabStop( 
            /* [in] */ VARIANT_BOOL tabStop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Group( 
            /* [retval][out] */ VARIANT_BOOL *group) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Group( 
            /* [in] */ VARIANT_BOOL group) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ long *id) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Focus( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ ListBoxType *type) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Sort( 
            /* [retval][out] */ VARIANT_BOOL *sort) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelectedCount( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Data( 
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ long *data) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Data( 
            /* [optional][in] */ VARIANT index,
            /* [in] */ long data) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selected( 
            /* [in] */ long index,
            /* [retval][out] */ VARIANT_BOOL *selected) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Selected( 
            /* [in] */ long index,
            /* [in] */ VARIANT_BOOL selected) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FocusedIndex( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FocusedIndex( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT data,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindStart( 
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Rectangle( 
            /* [in] */ long index,
            /* [retval][out] */ ClientRectangle **rectangle) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ long index,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT data,
            /* [retval][out] */ long *newIndex) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindData( 
            /* [in] */ long data,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectedItem( 
            /* [optional][in] */ VARIANT itemNumber,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Id( 
            /* [in] */ long id) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _ListBoxVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _ListBox * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _ListBox * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _ListBox * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _ListBox * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _ListBox * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _ListBox * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _ListBox * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            _ListBox * This,
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            _ListBox * This,
            /* [optional][in] */ VARIANT index,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _ListBox * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _ListBox * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _ListBox * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            _ListBox * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            _ListBox * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            _ListBox * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _ListBox * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            _ListBox * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            _ListBox * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _ListBox * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _ListBox * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _ListBox * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _ListBox * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            _ListBox * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            _ListBox * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            _ListBox * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            _ListBox * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            _ListBox * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            _ListBox * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _ListBox * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            _ListBox * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            _ListBox * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            _ListBox * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            _ListBox * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            _ListBox * This,
            /* [retval][out] */ ListBoxType *type);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sort )( 
            _ListBox * This,
            /* [retval][out] */ VARIANT_BOOL *sort);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            _ListBox * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedCount )( 
            _ListBox * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Data )( 
            _ListBox * This,
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ long *data);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Data )( 
            _ListBox * This,
            /* [optional][in] */ VARIANT index,
            /* [in] */ long data);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selected )( 
            _ListBox * This,
            /* [in] */ long index,
            /* [retval][out] */ VARIANT_BOOL *selected);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Selected )( 
            _ListBox * This,
            /* [in] */ long index,
            /* [in] */ VARIANT_BOOL selected);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FocusedIndex )( 
            _ListBox * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FocusedIndex )( 
            _ListBox * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            _ListBox * This,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT data,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            _ListBox * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindStart )( 
            _ListBox * This,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Find )( 
            _ListBox * This,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Rectangle )( 
            _ListBox * This,
            /* [in] */ long index,
            /* [retval][out] */ ClientRectangle **rectangle);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            _ListBox * This,
            /* [in] */ long index,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT data,
            /* [retval][out] */ long *newIndex);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            _ListBox * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindData )( 
            _ListBox * This,
            /* [in] */ long data,
            /* [optional][in] */ VARIANT startIndex,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectedItem )( 
            _ListBox * This,
            /* [optional][in] */ VARIANT itemNumber,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            _ListBox * This,
            /* [in] */ long id);
        
        END_INTERFACE
    } _ListBoxVtbl;

    interface _ListBox
    {
        CONST_VTBL struct _ListBoxVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ListBox_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _ListBox_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _ListBox_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _ListBox_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _ListBox_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _ListBox_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _ListBox_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _ListBox_get_Text(This,index,text)	\
    ( (This)->lpVtbl -> get_Text(This,index,text) ) 

#define _ListBox_put_Text(This,index,text)	\
    ( (This)->lpVtbl -> put_Text(This,index,text) ) 

#define _ListBox_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _ListBox_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _ListBox_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define _ListBox_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define _ListBox_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define _ListBox_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define _ListBox_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define _ListBox_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define _ListBox_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define _ListBox_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define _ListBox_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define _ListBox_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define _ListBox_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define _ListBox_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define _ListBox_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define _ListBox_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define _ListBox_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define _ListBox_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define _ListBox_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define _ListBox_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _ListBox_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define _ListBox_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define _ListBox_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define _ListBox_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define _ListBox_get_Type(This,type)	\
    ( (This)->lpVtbl -> get_Type(This,type) ) 

#define _ListBox_get_Sort(This,sort)	\
    ( (This)->lpVtbl -> get_Sort(This,sort) ) 

#define _ListBox_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define _ListBox_get_SelectedCount(This,count)	\
    ( (This)->lpVtbl -> get_SelectedCount(This,count) ) 

#define _ListBox_get_Data(This,index,data)	\
    ( (This)->lpVtbl -> get_Data(This,index,data) ) 

#define _ListBox_put_Data(This,index,data)	\
    ( (This)->lpVtbl -> put_Data(This,index,data) ) 

#define _ListBox_get_Selected(This,index,selected)	\
    ( (This)->lpVtbl -> get_Selected(This,index,selected) ) 

#define _ListBox_put_Selected(This,index,selected)	\
    ( (This)->lpVtbl -> put_Selected(This,index,selected) ) 

#define _ListBox_get_FocusedIndex(This,index)	\
    ( (This)->lpVtbl -> get_FocusedIndex(This,index) ) 

#define _ListBox_put_FocusedIndex(This,index)	\
    ( (This)->lpVtbl -> put_FocusedIndex(This,index) ) 

#define _ListBox_Add(This,text,data,index)	\
    ( (This)->lpVtbl -> Add(This,text,data,index) ) 

#define _ListBox_Delete(This,index)	\
    ( (This)->lpVtbl -> Delete(This,index) ) 

#define _ListBox_FindStart(This,text,startIndex,index)	\
    ( (This)->lpVtbl -> FindStart(This,text,startIndex,index) ) 

#define _ListBox_Find(This,text,startIndex,index)	\
    ( (This)->lpVtbl -> Find(This,text,startIndex,index) ) 

#define _ListBox_Rectangle(This,index,rectangle)	\
    ( (This)->lpVtbl -> Rectangle(This,index,rectangle) ) 

#define _ListBox_Insert(This,index,text,data,newIndex)	\
    ( (This)->lpVtbl -> Insert(This,index,text,data,newIndex) ) 

#define _ListBox_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define _ListBox_FindData(This,data,startIndex,index)	\
    ( (This)->lpVtbl -> FindData(This,data,startIndex,index) ) 

#define _ListBox_SelectedItem(This,itemNumber,index)	\
    ( (This)->lpVtbl -> SelectedItem(This,itemNumber,index) ) 

#define _ListBox_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___ListBox_INTERFACE_DEFINED__ */


#ifndef ___UpDown_INTERFACE_DEFINED__
#define ___UpDown_INTERFACE_DEFINED__

/* interface _UpDown */
/* [object][hidden][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__UpDown;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b34df9b0-5781-4cb5-bf97-ce7004ae7fa5")
    _UpDown : public _Control
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_AlignLeft( 
            /* [retval][out] */ VARIANT_BOOL *left) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_AlignLeft( 
            /* [in] */ VARIANT_BOOL left) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Horizontal( 
            /* [retval][out] */ VARIANT_BOOL *horizontal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Horizontal( 
            /* [in] */ VARIANT_BOOL horizontal) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ArrowKeys( 
            /* [retval][out] */ VARIANT_BOOL *arrowKeys) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ArrowKeys( 
            /* [in] */ VARIANT_BOOL arrowKeys) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Wrap( 
            /* [retval][out] */ VARIANT_BOOL *wrap) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Wrap( 
            /* [in] */ VARIANT_BOOL wrap) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Auto( 
            /* [retval][out] */ VARIANT_BOOL *isAuto) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Auto( 
            /* [in] */ VARIANT_BOOL isAuto) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Commas( 
            /* [retval][out] */ VARIANT_BOOL *commas) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Commas( 
            /* [in] */ VARIANT_BOOL commas) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Base( 
            /* [retval][out] */ long *base) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Base( 
            /* [in] */ long base) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Buddy( 
            /* [retval][out] */ _Control **control) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Buddy( 
            /* [in] */ IDispatch *control) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ long value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Minimum( 
            /* [retval][out] */ long *minimum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Minimum( 
            /* [in] */ long minimum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Maximum( 
            /* [retval][out] */ long *maximum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Maximum( 
            /* [in] */ long maximum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _UpDownVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _UpDown * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _UpDown * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _UpDown * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _UpDown * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _UpDown * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _UpDown * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _UpDown * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            _UpDown * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            _UpDown * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _UpDown * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _UpDown * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _UpDown * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            _UpDown * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            _UpDown * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            _UpDown * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _UpDown * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            _UpDown * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            _UpDown * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _UpDown * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _UpDown * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _UpDown * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _UpDown * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            _UpDown * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            _UpDown * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            _UpDown * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            _UpDown * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            _UpDown * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            _UpDown * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _UpDown * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            _UpDown * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            _UpDown * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            _UpDown * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            _UpDown * This);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            _UpDown * This,
            /* [in] */ long id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AlignLeft )( 
            _UpDown * This,
            /* [retval][out] */ VARIANT_BOOL *left);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_AlignLeft )( 
            _UpDown * This,
            /* [in] */ VARIANT_BOOL left);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Horizontal )( 
            _UpDown * This,
            /* [retval][out] */ VARIANT_BOOL *horizontal);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Horizontal )( 
            _UpDown * This,
            /* [in] */ VARIANT_BOOL horizontal);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ArrowKeys )( 
            _UpDown * This,
            /* [retval][out] */ VARIANT_BOOL *arrowKeys);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ArrowKeys )( 
            _UpDown * This,
            /* [in] */ VARIANT_BOOL arrowKeys);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Wrap )( 
            _UpDown * This,
            /* [retval][out] */ VARIANT_BOOL *wrap);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Wrap )( 
            _UpDown * This,
            /* [in] */ VARIANT_BOOL wrap);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Auto )( 
            _UpDown * This,
            /* [retval][out] */ VARIANT_BOOL *isAuto);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Auto )( 
            _UpDown * This,
            /* [in] */ VARIANT_BOOL isAuto);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Commas )( 
            _UpDown * This,
            /* [retval][out] */ VARIANT_BOOL *commas);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Commas )( 
            _UpDown * This,
            /* [in] */ VARIANT_BOOL commas);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Base )( 
            _UpDown * This,
            /* [retval][out] */ long *base);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Base )( 
            _UpDown * This,
            /* [in] */ long base);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Buddy )( 
            _UpDown * This,
            /* [retval][out] */ _Control **control);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Buddy )( 
            _UpDown * This,
            /* [in] */ IDispatch *control);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            _UpDown * This,
            /* [retval][out] */ long *value);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            _UpDown * This,
            /* [in] */ long value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Minimum )( 
            _UpDown * This,
            /* [retval][out] */ long *minimum);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Minimum )( 
            _UpDown * This,
            /* [in] */ long minimum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Maximum )( 
            _UpDown * This,
            /* [retval][out] */ long *maximum);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Maximum )( 
            _UpDown * This,
            /* [in] */ long maximum);
        
        END_INTERFACE
    } _UpDownVtbl;

    interface _UpDown
    {
        CONST_VTBL struct _UpDownVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _UpDown_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _UpDown_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _UpDown_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _UpDown_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _UpDown_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _UpDown_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _UpDown_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _UpDown_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define _UpDown_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define _UpDown_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _UpDown_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _UpDown_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define _UpDown_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define _UpDown_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define _UpDown_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define _UpDown_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define _UpDown_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define _UpDown_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define _UpDown_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define _UpDown_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define _UpDown_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define _UpDown_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define _UpDown_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define _UpDown_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define _UpDown_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define _UpDown_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define _UpDown_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define _UpDown_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define _UpDown_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _UpDown_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define _UpDown_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define _UpDown_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define _UpDown_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define _UpDown_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 


#define _UpDown_get_AlignLeft(This,left)	\
    ( (This)->lpVtbl -> get_AlignLeft(This,left) ) 

#define _UpDown_put_AlignLeft(This,left)	\
    ( (This)->lpVtbl -> put_AlignLeft(This,left) ) 

#define _UpDown_get_Horizontal(This,horizontal)	\
    ( (This)->lpVtbl -> get_Horizontal(This,horizontal) ) 

#define _UpDown_put_Horizontal(This,horizontal)	\
    ( (This)->lpVtbl -> put_Horizontal(This,horizontal) ) 

#define _UpDown_get_ArrowKeys(This,arrowKeys)	\
    ( (This)->lpVtbl -> get_ArrowKeys(This,arrowKeys) ) 

#define _UpDown_put_ArrowKeys(This,arrowKeys)	\
    ( (This)->lpVtbl -> put_ArrowKeys(This,arrowKeys) ) 

#define _UpDown_get_Wrap(This,wrap)	\
    ( (This)->lpVtbl -> get_Wrap(This,wrap) ) 

#define _UpDown_put_Wrap(This,wrap)	\
    ( (This)->lpVtbl -> put_Wrap(This,wrap) ) 

#define _UpDown_get_Auto(This,isAuto)	\
    ( (This)->lpVtbl -> get_Auto(This,isAuto) ) 

#define _UpDown_put_Auto(This,isAuto)	\
    ( (This)->lpVtbl -> put_Auto(This,isAuto) ) 

#define _UpDown_get_Commas(This,commas)	\
    ( (This)->lpVtbl -> get_Commas(This,commas) ) 

#define _UpDown_put_Commas(This,commas)	\
    ( (This)->lpVtbl -> put_Commas(This,commas) ) 

#define _UpDown_get_Base(This,base)	\
    ( (This)->lpVtbl -> get_Base(This,base) ) 

#define _UpDown_put_Base(This,base)	\
    ( (This)->lpVtbl -> put_Base(This,base) ) 

#define _UpDown_get_Buddy(This,control)	\
    ( (This)->lpVtbl -> get_Buddy(This,control) ) 

#define _UpDown_put_Buddy(This,control)	\
    ( (This)->lpVtbl -> put_Buddy(This,control) ) 

#define _UpDown_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#define _UpDown_put_Value(This,value)	\
    ( (This)->lpVtbl -> put_Value(This,value) ) 

#define _UpDown_get_Minimum(This,minimum)	\
    ( (This)->lpVtbl -> get_Minimum(This,minimum) ) 

#define _UpDown_put_Minimum(This,minimum)	\
    ( (This)->lpVtbl -> put_Minimum(This,minimum) ) 

#define _UpDown_get_Maximum(This,maximum)	\
    ( (This)->lpVtbl -> get_Maximum(This,maximum) ) 

#define _UpDown_put_Maximum(This,maximum)	\
    ( (This)->lpVtbl -> put_Maximum(This,maximum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___UpDown_INTERFACE_DEFINED__ */


#ifndef __ProgressBar_INTERFACE_DEFINED__
#define __ProgressBar_INTERFACE_DEFINED__

/* interface ProgressBar */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ProgressBar;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("20134f69-7a84-4198-9560-da2ca87016ca")
    ProgressBar : public _Control
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Vertical( 
            /* [retval][out] */ VARIANT_BOOL *vertical) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Vertical( 
            /* [in] */ VARIANT_BOOL vertical) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ long value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Minimum( 
            /* [retval][out] */ long *minimum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Minimum( 
            /* [in] */ long minimum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Maximum( 
            /* [retval][out] */ long *maximum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Maximum( 
            /* [in] */ long maximum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Step( 
            /* [retval][out] */ long *step) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Step( 
            /* [in] */ long step) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Marquee( 
            /* [in] */ long time) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Increase( 
            /* [in] */ long amount) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncreaseStep( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProgressBarVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ProgressBar * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ProgressBar * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ProgressBar * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ProgressBar * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ProgressBar * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ProgressBar * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ProgressBar * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            ProgressBar * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            ProgressBar * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ProgressBar * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ProgressBar * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ProgressBar * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            ProgressBar * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            ProgressBar * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            ProgressBar * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            ProgressBar * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            ProgressBar * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            ProgressBar * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ProgressBar * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            ProgressBar * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            ProgressBar * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            ProgressBar * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            ProgressBar * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            ProgressBar * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            ProgressBar * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            ProgressBar * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            ProgressBar * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            ProgressBar * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            ProgressBar * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            ProgressBar * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            ProgressBar * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            ProgressBar * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            ProgressBar * This);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            ProgressBar * This,
            /* [in] */ long id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Vertical )( 
            ProgressBar * This,
            /* [retval][out] */ VARIANT_BOOL *vertical);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Vertical )( 
            ProgressBar * This,
            /* [in] */ VARIANT_BOOL vertical);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ProgressBar * This,
            /* [retval][out] */ long *value);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            ProgressBar * This,
            /* [in] */ long value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Minimum )( 
            ProgressBar * This,
            /* [retval][out] */ long *minimum);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Minimum )( 
            ProgressBar * This,
            /* [in] */ long minimum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Maximum )( 
            ProgressBar * This,
            /* [retval][out] */ long *maximum);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Maximum )( 
            ProgressBar * This,
            /* [in] */ long maximum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Step )( 
            ProgressBar * This,
            /* [retval][out] */ long *step);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Step )( 
            ProgressBar * This,
            /* [in] */ long step);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Marquee )( 
            ProgressBar * This,
            /* [in] */ long time);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Increase )( 
            ProgressBar * This,
            /* [in] */ long amount);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncreaseStep )( 
            ProgressBar * This);
        
        END_INTERFACE
    } ProgressBarVtbl;

    interface ProgressBar
    {
        CONST_VTBL struct ProgressBarVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ProgressBar_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ProgressBar_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ProgressBar_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ProgressBar_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ProgressBar_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ProgressBar_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ProgressBar_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ProgressBar_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define ProgressBar_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define ProgressBar_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ProgressBar_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ProgressBar_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define ProgressBar_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define ProgressBar_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define ProgressBar_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define ProgressBar_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define ProgressBar_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define ProgressBar_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define ProgressBar_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define ProgressBar_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define ProgressBar_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define ProgressBar_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define ProgressBar_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define ProgressBar_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define ProgressBar_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define ProgressBar_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define ProgressBar_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define ProgressBar_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define ProgressBar_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define ProgressBar_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define ProgressBar_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define ProgressBar_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define ProgressBar_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define ProgressBar_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 


#define ProgressBar_get_Vertical(This,vertical)	\
    ( (This)->lpVtbl -> get_Vertical(This,vertical) ) 

#define ProgressBar_put_Vertical(This,vertical)	\
    ( (This)->lpVtbl -> put_Vertical(This,vertical) ) 

#define ProgressBar_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#define ProgressBar_put_Value(This,value)	\
    ( (This)->lpVtbl -> put_Value(This,value) ) 

#define ProgressBar_get_Minimum(This,minimum)	\
    ( (This)->lpVtbl -> get_Minimum(This,minimum) ) 

#define ProgressBar_put_Minimum(This,minimum)	\
    ( (This)->lpVtbl -> put_Minimum(This,minimum) ) 

#define ProgressBar_get_Maximum(This,maximum)	\
    ( (This)->lpVtbl -> get_Maximum(This,maximum) ) 

#define ProgressBar_put_Maximum(This,maximum)	\
    ( (This)->lpVtbl -> put_Maximum(This,maximum) ) 

#define ProgressBar_get_Step(This,step)	\
    ( (This)->lpVtbl -> get_Step(This,step) ) 

#define ProgressBar_put_Step(This,step)	\
    ( (This)->lpVtbl -> put_Step(This,step) ) 

#define ProgressBar_put_Marquee(This,time)	\
    ( (This)->lpVtbl -> put_Marquee(This,time) ) 

#define ProgressBar_Increase(This,amount)	\
    ( (This)->lpVtbl -> Increase(This,amount) ) 

#define ProgressBar_IncreaseStep(This)	\
    ( (This)->lpVtbl -> IncreaseStep(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ProgressBar_INTERFACE_DEFINED__ */


#ifndef ___TrackBar_INTERFACE_DEFINED__
#define ___TrackBar_INTERFACE_DEFINED__

/* interface _TrackBar */
/* [object][hidden][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID__TrackBar;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fea9e0b5-7aeb-4f65-9df7-3696876076ad")
    _TrackBar : public _Control
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Ticks( 
            /* [retval][out] */ TickPlacement *tickPlacement) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Ticks( 
            /* [in] */ TickPlacement tickPlacement) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TickLocation( 
            /* [retval][out] */ TickLocation *tickLocation) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TickLocation( 
            /* [in] */ TickLocation tickLocation) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DownIsLeft( 
            /* [retval][out] */ VARIANT_BOOL *downIsLeft) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DownIsLeft( 
            /* [in] */ VARIANT_BOOL downIsLeft) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Vertical( 
            /* [retval][out] */ VARIANT_BOOL *vertical) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Vertical( 
            /* [in] */ VARIANT_BOOL vertical) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Reversed( 
            /* [retval][out] */ VARIANT_BOOL *reversed) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Reversed( 
            /* [in] */ VARIANT_BOOL reversed) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ long value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Minimum( 
            /* [retval][out] */ long *minimum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Minimum( 
            /* [in] */ long minimum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Maximum( 
            /* [retval][out] */ long *maximum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Maximum( 
            /* [in] */ long maximum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Line( 
            /* [in] */ long value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Page( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Page( 
            /* [in] */ long value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TickInterval( 
            /* [in] */ long value) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TickCount( 
            /* [retval][out] */ long *value) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearTicks( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTick( 
            /* [in] */ long position) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Tick( 
            /* [in] */ long index,
            /* [retval][out] */ long *position) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _TrackBarVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _TrackBar * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _TrackBar * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _TrackBar * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _TrackBar * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _TrackBar * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _TrackBar * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _TrackBar * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            _TrackBar * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            _TrackBar * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _TrackBar * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _TrackBar * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _TrackBar * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            _TrackBar * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            _TrackBar * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            _TrackBar * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _TrackBar * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            _TrackBar * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            _TrackBar * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _TrackBar * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _TrackBar * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _TrackBar * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _TrackBar * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            _TrackBar * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            _TrackBar * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            _TrackBar * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            _TrackBar * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            _TrackBar * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            _TrackBar * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            _TrackBar * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            _TrackBar * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            _TrackBar * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            _TrackBar * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            _TrackBar * This);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            _TrackBar * This,
            /* [in] */ long id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Ticks )( 
            _TrackBar * This,
            /* [retval][out] */ TickPlacement *tickPlacement);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Ticks )( 
            _TrackBar * This,
            /* [in] */ TickPlacement tickPlacement);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TickLocation )( 
            _TrackBar * This,
            /* [retval][out] */ TickLocation *tickLocation);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TickLocation )( 
            _TrackBar * This,
            /* [in] */ TickLocation tickLocation);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DownIsLeft )( 
            _TrackBar * This,
            /* [retval][out] */ VARIANT_BOOL *downIsLeft);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DownIsLeft )( 
            _TrackBar * This,
            /* [in] */ VARIANT_BOOL downIsLeft);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Vertical )( 
            _TrackBar * This,
            /* [retval][out] */ VARIANT_BOOL *vertical);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Vertical )( 
            _TrackBar * This,
            /* [in] */ VARIANT_BOOL vertical);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Reversed )( 
            _TrackBar * This,
            /* [retval][out] */ VARIANT_BOOL *reversed);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Reversed )( 
            _TrackBar * This,
            /* [in] */ VARIANT_BOOL reversed);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            _TrackBar * This,
            /* [retval][out] */ long *value);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            _TrackBar * This,
            /* [in] */ long value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Minimum )( 
            _TrackBar * This,
            /* [retval][out] */ long *minimum);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Minimum )( 
            _TrackBar * This,
            /* [in] */ long minimum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Maximum )( 
            _TrackBar * This,
            /* [retval][out] */ long *maximum);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Maximum )( 
            _TrackBar * This,
            /* [in] */ long maximum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            _TrackBar * This,
            /* [retval][out] */ long *value);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Line )( 
            _TrackBar * This,
            /* [in] */ long value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Page )( 
            _TrackBar * This,
            /* [retval][out] */ long *value);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Page )( 
            _TrackBar * This,
            /* [in] */ long value);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TickInterval )( 
            _TrackBar * This,
            /* [in] */ long value);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TickCount )( 
            _TrackBar * This,
            /* [retval][out] */ long *value);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearTicks )( 
            _TrackBar * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTick )( 
            _TrackBar * This,
            /* [in] */ long position);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Tick )( 
            _TrackBar * This,
            /* [in] */ long index,
            /* [retval][out] */ long *position);
        
        END_INTERFACE
    } _TrackBarVtbl;

    interface _TrackBar
    {
        CONST_VTBL struct _TrackBarVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _TrackBar_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _TrackBar_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _TrackBar_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _TrackBar_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _TrackBar_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _TrackBar_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _TrackBar_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _TrackBar_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define _TrackBar_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define _TrackBar_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define _TrackBar_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define _TrackBar_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define _TrackBar_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define _TrackBar_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define _TrackBar_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define _TrackBar_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define _TrackBar_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define _TrackBar_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define _TrackBar_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define _TrackBar_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define _TrackBar_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define _TrackBar_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define _TrackBar_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define _TrackBar_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define _TrackBar_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define _TrackBar_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define _TrackBar_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define _TrackBar_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define _TrackBar_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define _TrackBar_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define _TrackBar_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define _TrackBar_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define _TrackBar_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define _TrackBar_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 


#define _TrackBar_get_Ticks(This,tickPlacement)	\
    ( (This)->lpVtbl -> get_Ticks(This,tickPlacement) ) 

#define _TrackBar_put_Ticks(This,tickPlacement)	\
    ( (This)->lpVtbl -> put_Ticks(This,tickPlacement) ) 

#define _TrackBar_get_TickLocation(This,tickLocation)	\
    ( (This)->lpVtbl -> get_TickLocation(This,tickLocation) ) 

#define _TrackBar_put_TickLocation(This,tickLocation)	\
    ( (This)->lpVtbl -> put_TickLocation(This,tickLocation) ) 

#define _TrackBar_get_DownIsLeft(This,downIsLeft)	\
    ( (This)->lpVtbl -> get_DownIsLeft(This,downIsLeft) ) 

#define _TrackBar_put_DownIsLeft(This,downIsLeft)	\
    ( (This)->lpVtbl -> put_DownIsLeft(This,downIsLeft) ) 

#define _TrackBar_get_Vertical(This,vertical)	\
    ( (This)->lpVtbl -> get_Vertical(This,vertical) ) 

#define _TrackBar_put_Vertical(This,vertical)	\
    ( (This)->lpVtbl -> put_Vertical(This,vertical) ) 

#define _TrackBar_get_Reversed(This,reversed)	\
    ( (This)->lpVtbl -> get_Reversed(This,reversed) ) 

#define _TrackBar_put_Reversed(This,reversed)	\
    ( (This)->lpVtbl -> put_Reversed(This,reversed) ) 

#define _TrackBar_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 

#define _TrackBar_put_Value(This,value)	\
    ( (This)->lpVtbl -> put_Value(This,value) ) 

#define _TrackBar_get_Minimum(This,minimum)	\
    ( (This)->lpVtbl -> get_Minimum(This,minimum) ) 

#define _TrackBar_put_Minimum(This,minimum)	\
    ( (This)->lpVtbl -> put_Minimum(This,minimum) ) 

#define _TrackBar_get_Maximum(This,maximum)	\
    ( (This)->lpVtbl -> get_Maximum(This,maximum) ) 

#define _TrackBar_put_Maximum(This,maximum)	\
    ( (This)->lpVtbl -> put_Maximum(This,maximum) ) 

#define _TrackBar_get_Line(This,value)	\
    ( (This)->lpVtbl -> get_Line(This,value) ) 

#define _TrackBar_put_Line(This,value)	\
    ( (This)->lpVtbl -> put_Line(This,value) ) 

#define _TrackBar_get_Page(This,value)	\
    ( (This)->lpVtbl -> get_Page(This,value) ) 

#define _TrackBar_put_Page(This,value)	\
    ( (This)->lpVtbl -> put_Page(This,value) ) 

#define _TrackBar_put_TickInterval(This,value)	\
    ( (This)->lpVtbl -> put_TickInterval(This,value) ) 

#define _TrackBar_get_TickCount(This,value)	\
    ( (This)->lpVtbl -> get_TickCount(This,value) ) 

#define _TrackBar_ClearTicks(This)	\
    ( (This)->lpVtbl -> ClearTicks(This) ) 

#define _TrackBar_AddTick(This,position)	\
    ( (This)->lpVtbl -> AddTick(This,position) ) 

#define _TrackBar_Tick(This,index,position)	\
    ( (This)->lpVtbl -> Tick(This,index,position) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___TrackBar_INTERFACE_DEFINED__ */


#ifndef __TabControl_INTERFACE_DEFINED__
#define __TabControl_INTERFACE_DEFINED__

/* interface TabControl */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_TabControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("13c16134-27db-4d84-beb2-14842aee4b40")
    TabControl : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [optional][in] */ VARIANT index,
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ ClientPoint **position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ ClientPoint *position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ VARIANT_BOOL *focused) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *height) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long height) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabOrder( 
            /* [retval][out] */ long *tabOrder) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabOrder( 
            /* [in] */ long tabOrder) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabStop( 
            /* [retval][out] */ VARIANT_BOOL *tabStop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabStop( 
            /* [in] */ VARIANT_BOOL tabStop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Group( 
            /* [retval][out] */ VARIANT_BOOL *group) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Group( 
            /* [in] */ VARIANT_BOOL group) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ long *id) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Focus( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_MultiLine( 
            /* [retval][out] */ VARIANT_BOOL *multiline) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_MultiLine( 
            /* [in] */ VARIANT_BOOL multiline) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Justified( 
            /* [retval][out] */ VARIANT_BOOL *justified) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Justified( 
            /* [in] */ VARIANT_BOOL justified) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FocusedIndex( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_FocusedIndex( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SelectedIndex( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SelectedIndex( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Rows( 
            /* [retval][out] */ long *rows) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ long index,
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Id( 
            /* [in] */ long id) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TabControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TabControl * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TabControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TabControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TabControl * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TabControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TabControl * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TabControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            TabControl * This,
            /* [optional][in] */ VARIANT index,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            TabControl * This,
            /* [optional][in] */ VARIANT index,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TabControl * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TabControl * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            TabControl * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            TabControl * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            TabControl * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            TabControl * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            TabControl * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            TabControl * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            TabControl * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            TabControl * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            TabControl * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            TabControl * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            TabControl * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            TabControl * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            TabControl * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            TabControl * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            TabControl * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            TabControl * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            TabControl * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            TabControl * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            TabControl * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            TabControl * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            TabControl * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            TabControl * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MultiLine )( 
            TabControl * This,
            /* [retval][out] */ VARIANT_BOOL *multiline);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MultiLine )( 
            TabControl * This,
            /* [in] */ VARIANT_BOOL multiline);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Justified )( 
            TabControl * This,
            /* [retval][out] */ VARIANT_BOOL *justified);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Justified )( 
            TabControl * This,
            /* [in] */ VARIANT_BOOL justified);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TabControl * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FocusedIndex )( 
            TabControl * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_FocusedIndex )( 
            TabControl * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedIndex )( 
            TabControl * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SelectedIndex )( 
            TabControl * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Rows )( 
            TabControl * This,
            /* [retval][out] */ long *rows);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            TabControl * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TabControl * This,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            TabControl * This,
            /* [in] */ long index,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            TabControl * This,
            /* [in] */ long id);
        
        END_INTERFACE
    } TabControlVtbl;

    interface TabControl
    {
        CONST_VTBL struct TabControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TabControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TabControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TabControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TabControl_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TabControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TabControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TabControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TabControl_get_Text(This,index,text)	\
    ( (This)->lpVtbl -> get_Text(This,index,text) ) 

#define TabControl_put_Text(This,index,text)	\
    ( (This)->lpVtbl -> put_Text(This,index,text) ) 

#define TabControl_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define TabControl_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define TabControl_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define TabControl_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define TabControl_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define TabControl_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define TabControl_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define TabControl_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define TabControl_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define TabControl_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define TabControl_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define TabControl_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define TabControl_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define TabControl_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define TabControl_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define TabControl_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define TabControl_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define TabControl_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define TabControl_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define TabControl_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define TabControl_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define TabControl_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define TabControl_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define TabControl_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define TabControl_get_MultiLine(This,multiline)	\
    ( (This)->lpVtbl -> get_MultiLine(This,multiline) ) 

#define TabControl_put_MultiLine(This,multiline)	\
    ( (This)->lpVtbl -> put_MultiLine(This,multiline) ) 

#define TabControl_get_Justified(This,justified)	\
    ( (This)->lpVtbl -> get_Justified(This,justified) ) 

#define TabControl_put_Justified(This,justified)	\
    ( (This)->lpVtbl -> put_Justified(This,justified) ) 

#define TabControl_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define TabControl_get_FocusedIndex(This,index)	\
    ( (This)->lpVtbl -> get_FocusedIndex(This,index) ) 

#define TabControl_put_FocusedIndex(This,index)	\
    ( (This)->lpVtbl -> put_FocusedIndex(This,index) ) 

#define TabControl_get_SelectedIndex(This,index)	\
    ( (This)->lpVtbl -> get_SelectedIndex(This,index) ) 

#define TabControl_put_SelectedIndex(This,index)	\
    ( (This)->lpVtbl -> put_SelectedIndex(This,index) ) 

#define TabControl_get_Rows(This,rows)	\
    ( (This)->lpVtbl -> get_Rows(This,rows) ) 

#define TabControl_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define TabControl_Delete(This,index)	\
    ( (This)->lpVtbl -> Delete(This,index) ) 

#define TabControl_Insert(This,index,text)	\
    ( (This)->lpVtbl -> Insert(This,index,text) ) 

#define TabControl_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TabControl_INTERFACE_DEFINED__ */


#ifndef __TreeViewEventInfo_INTERFACE_DEFINED__
#define __TreeViewEventInfo_INTERFACE_DEFINED__

/* interface TreeViewEventInfo */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_TreeViewEventInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("723d6972-a7fe-46ac-babf-69f37d28c953")
    TreeViewEventInfo : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OldItem( 
            /* [retval][out] */ TreeViewItem **oldItem) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_NewItem( 
            /* [retval][out] */ TreeViewItem **newItem) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Action( 
            /* [retval][out] */ long *action) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TreeViewEventInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TreeViewEventInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TreeViewEventInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TreeViewEventInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TreeViewEventInfo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TreeViewEventInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TreeViewEventInfo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TreeViewEventInfo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TreeViewEventInfo * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TreeViewEventInfo * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OldItem )( 
            TreeViewEventInfo * This,
            /* [retval][out] */ TreeViewItem **oldItem);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NewItem )( 
            TreeViewEventInfo * This,
            /* [retval][out] */ TreeViewItem **newItem);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Action )( 
            TreeViewEventInfo * This,
            /* [retval][out] */ long *action);
        
        END_INTERFACE
    } TreeViewEventInfoVtbl;

    interface TreeViewEventInfo
    {
        CONST_VTBL struct TreeViewEventInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TreeViewEventInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TreeViewEventInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TreeViewEventInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TreeViewEventInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TreeViewEventInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TreeViewEventInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TreeViewEventInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TreeViewEventInfo_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define TreeViewEventInfo_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define TreeViewEventInfo_get_OldItem(This,oldItem)	\
    ( (This)->lpVtbl -> get_OldItem(This,oldItem) ) 

#define TreeViewEventInfo_get_NewItem(This,newItem)	\
    ( (This)->lpVtbl -> get_NewItem(This,newItem) ) 

#define TreeViewEventInfo_get_Action(This,action)	\
    ( (This)->lpVtbl -> get_Action(This,action) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TreeViewEventInfo_INTERFACE_DEFINED__ */


#ifndef __ListViewItem_INTERFACE_DEFINED__
#define __ListViewItem_INTERFACE_DEFINED__

/* interface ListViewItem */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ListViewItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bd6ea316-f119-4e3b-b6d5-0f89aa4ceb32")
    ListViewItem : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [optional][in] */ VARIANT subitem,
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [optional][in] */ VARIANT subitem,
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Indent( 
            /* [retval][out] */ long *indent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Indent( 
            /* [in] */ long indent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Data( 
            /* [retval][out] */ long *data) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Data( 
            /* [in] */ long data) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ VARIANT_BOOL *focused) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Focused( 
            /* [in] */ VARIANT_BOOL focused) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selected( 
            /* [retval][out] */ VARIANT_BOOL *selected) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Selected( 
            /* [in] */ VARIANT_BOOL selected) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [optional][in] */ VARIANT subitem,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Image( 
            /* [optional][in] */ VARIANT subitem,
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_OverlayImage( 
            /* [optional][in] */ VARIANT subitem,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_OverlayImage( 
            /* [optional][in] */ VARIANT subitem,
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_StateImage( 
            /* [optional][in] */ VARIANT subitem,
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_StateImage( 
            /* [optional][in] */ VARIANT subitem,
            /* [in] */ long index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Checked( 
            /* [retval][out] */ listviewCheck *checked) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Checked( 
            /* [in] */ listviewCheck checked) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScrollTo( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ long index) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListViewItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListViewItem * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListViewItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListViewItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListViewItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListViewItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListViewItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListViewItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            ListViewItem * This,
            /* [optional][in] */ VARIANT subitem,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            ListViewItem * This,
            /* [optional][in] */ VARIANT subitem,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ListViewItem * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListViewItem * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Indent )( 
            ListViewItem * This,
            /* [retval][out] */ long *indent);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Indent )( 
            ListViewItem * This,
            /* [in] */ long indent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Data )( 
            ListViewItem * This,
            /* [retval][out] */ long *data);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Data )( 
            ListViewItem * This,
            /* [in] */ long data);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            ListViewItem * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Focused )( 
            ListViewItem * This,
            /* [in] */ VARIANT_BOOL focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selected )( 
            ListViewItem * This,
            /* [retval][out] */ VARIANT_BOOL *selected);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Selected )( 
            ListViewItem * This,
            /* [in] */ VARIANT_BOOL selected);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            ListViewItem * This,
            /* [optional][in] */ VARIANT subitem,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            ListViewItem * This,
            /* [optional][in] */ VARIANT subitem,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OverlayImage )( 
            ListViewItem * This,
            /* [optional][in] */ VARIANT subitem,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_OverlayImage )( 
            ListViewItem * This,
            /* [optional][in] */ VARIANT subitem,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_StateImage )( 
            ListViewItem * This,
            /* [optional][in] */ VARIANT subitem,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_StateImage )( 
            ListViewItem * This,
            /* [optional][in] */ VARIANT subitem,
            /* [in] */ long index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Checked )( 
            ListViewItem * This,
            /* [retval][out] */ listviewCheck *checked);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Checked )( 
            ListViewItem * This,
            /* [in] */ listviewCheck checked);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            ListViewItem * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ListViewItem * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScrollTo )( 
            ListViewItem * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            ListViewItem * This,
            /* [in] */ long index);
        
        END_INTERFACE
    } ListViewItemVtbl;

    interface ListViewItem
    {
        CONST_VTBL struct ListViewItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListViewItem_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListViewItem_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListViewItem_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListViewItem_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListViewItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListViewItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListViewItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListViewItem_get_Text(This,subitem,text)	\
    ( (This)->lpVtbl -> get_Text(This,subitem,text) ) 

#define ListViewItem_put_Text(This,subitem,text)	\
    ( (This)->lpVtbl -> put_Text(This,subitem,text) ) 

#define ListViewItem_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ListViewItem_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ListViewItem_get_Indent(This,indent)	\
    ( (This)->lpVtbl -> get_Indent(This,indent) ) 

#define ListViewItem_put_Indent(This,indent)	\
    ( (This)->lpVtbl -> put_Indent(This,indent) ) 

#define ListViewItem_get_Data(This,data)	\
    ( (This)->lpVtbl -> get_Data(This,data) ) 

#define ListViewItem_put_Data(This,data)	\
    ( (This)->lpVtbl -> put_Data(This,data) ) 

#define ListViewItem_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define ListViewItem_put_Focused(This,focused)	\
    ( (This)->lpVtbl -> put_Focused(This,focused) ) 

#define ListViewItem_get_Selected(This,selected)	\
    ( (This)->lpVtbl -> get_Selected(This,selected) ) 

#define ListViewItem_put_Selected(This,selected)	\
    ( (This)->lpVtbl -> put_Selected(This,selected) ) 

#define ListViewItem_get_Image(This,subitem,index)	\
    ( (This)->lpVtbl -> get_Image(This,subitem,index) ) 

#define ListViewItem_put_Image(This,subitem,index)	\
    ( (This)->lpVtbl -> put_Image(This,subitem,index) ) 

#define ListViewItem_get_OverlayImage(This,subitem,index)	\
    ( (This)->lpVtbl -> get_OverlayImage(This,subitem,index) ) 

#define ListViewItem_put_OverlayImage(This,subitem,index)	\
    ( (This)->lpVtbl -> put_OverlayImage(This,subitem,index) ) 

#define ListViewItem_get_StateImage(This,subitem,index)	\
    ( (This)->lpVtbl -> get_StateImage(This,subitem,index) ) 

#define ListViewItem_put_StateImage(This,subitem,index)	\
    ( (This)->lpVtbl -> put_StateImage(This,subitem,index) ) 

#define ListViewItem_get_Checked(This,checked)	\
    ( (This)->lpVtbl -> get_Checked(This,checked) ) 

#define ListViewItem_put_Checked(This,checked)	\
    ( (This)->lpVtbl -> put_Checked(This,checked) ) 

#define ListViewItem_get_Index(This,index)	\
    ( (This)->lpVtbl -> get_Index(This,index) ) 

#define ListViewItem_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define ListViewItem_ScrollTo(This)	\
    ( (This)->lpVtbl -> ScrollTo(This) ) 

#define ListViewItem_Insert(This,index)	\
    ( (This)->lpVtbl -> Insert(This,index) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListViewItem_INTERFACE_DEFINED__ */


#ifndef __ListViewItems_INTERFACE_DEFINED__
#define __ListViewItems_INTERFACE_DEFINED__

/* interface ListViewItems */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ListViewItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1189bf9d-c69f-43cb-ad9a-39b77d2744cd")
    ListViewItems : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selected( 
            /* [retval][out] */ ListViewItems **selectedItems) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ ListViewItem **focusedItem) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ ListViewItem **item) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindText( 
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT partial,
            /* [retval][out] */ ListViewItems **items) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindData( 
            /* [in] */ long data,
            /* [retval][out] */ ListViewItems **items) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListViewItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListViewItems * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListViewItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListViewItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListViewItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListViewItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListViewItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListViewItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ListViewItems * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ListViewItems * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListViewItems * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ListViewItems * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selected )( 
            ListViewItems * This,
            /* [retval][out] */ ListViewItems **selectedItems);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            ListViewItems * This,
            /* [retval][out] */ ListViewItem **focusedItem);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ListViewItems * This,
            /* [in] */ long index,
            /* [retval][out] */ ListViewItem **item);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindText )( 
            ListViewItems * This,
            /* [in] */ BSTR text,
            /* [optional][in] */ VARIANT partial,
            /* [retval][out] */ ListViewItems **items);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindData )( 
            ListViewItems * This,
            /* [in] */ long data,
            /* [retval][out] */ ListViewItems **items);
        
        END_INTERFACE
    } ListViewItemsVtbl;

    interface ListViewItems
    {
        CONST_VTBL struct ListViewItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListViewItems_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListViewItems_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListViewItems_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListViewItems_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListViewItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListViewItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListViewItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListViewItems_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define ListViewItems_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ListViewItems_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ListViewItems_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define ListViewItems_get_Selected(This,selectedItems)	\
    ( (This)->lpVtbl -> get_Selected(This,selectedItems) ) 

#define ListViewItems_get_Focused(This,focusedItem)	\
    ( (This)->lpVtbl -> get_Focused(This,focusedItem) ) 

#define ListViewItems_Item(This,index,item)	\
    ( (This)->lpVtbl -> Item(This,index,item) ) 

#define ListViewItems_FindText(This,text,partial,items)	\
    ( (This)->lpVtbl -> FindText(This,text,partial,items) ) 

#define ListViewItems_FindData(This,data,items)	\
    ( (This)->lpVtbl -> FindData(This,data,items) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListViewItems_INTERFACE_DEFINED__ */


#ifndef __ListViewColumn_INTERFACE_DEFINED__
#define __ListViewColumn_INTERFACE_DEFINED__

/* interface ListViewColumn */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ListViewColumn;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("202e439e-5524-4cfa-926d-a9bd4a602b05")
    ListViewColumn : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Header( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Header( 
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ TextAlignment *align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ TextAlignment align) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Subitem( 
            /* [retval][out] */ long *subitem) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Subitem( 
            /* [in] */ long subitem) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Order( 
            /* [retval][out] */ long *order) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Order( 
            /* [in] */ long order) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ long index) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListViewColumnVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListViewColumn * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListViewColumn * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListViewColumn * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListViewColumn * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListViewColumn * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListViewColumn * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListViewColumn * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Header )( 
            ListViewColumn * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Header )( 
            ListViewColumn * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ListViewColumn * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListViewColumn * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            ListViewColumn * This,
            /* [retval][out] */ TextAlignment *align);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            ListViewColumn * This,
            /* [in] */ TextAlignment align);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ListViewColumn * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            ListViewColumn * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Subitem )( 
            ListViewColumn * This,
            /* [retval][out] */ long *subitem);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Subitem )( 
            ListViewColumn * This,
            /* [in] */ long subitem);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Order )( 
            ListViewColumn * This,
            /* [retval][out] */ long *order);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Order )( 
            ListViewColumn * This,
            /* [in] */ long order);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ListViewColumn * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            ListViewColumn * This,
            /* [in] */ long index);
        
        END_INTERFACE
    } ListViewColumnVtbl;

    interface ListViewColumn
    {
        CONST_VTBL struct ListViewColumnVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListViewColumn_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListViewColumn_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListViewColumn_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListViewColumn_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListViewColumn_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListViewColumn_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListViewColumn_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListViewColumn_get_Header(This,text)	\
    ( (This)->lpVtbl -> get_Header(This,text) ) 

#define ListViewColumn_put_Header(This,text)	\
    ( (This)->lpVtbl -> put_Header(This,text) ) 

#define ListViewColumn_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ListViewColumn_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ListViewColumn_get_Alignment(This,align)	\
    ( (This)->lpVtbl -> get_Alignment(This,align) ) 

#define ListViewColumn_put_Alignment(This,align)	\
    ( (This)->lpVtbl -> put_Alignment(This,align) ) 

#define ListViewColumn_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define ListViewColumn_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define ListViewColumn_get_Subitem(This,subitem)	\
    ( (This)->lpVtbl -> get_Subitem(This,subitem) ) 

#define ListViewColumn_put_Subitem(This,subitem)	\
    ( (This)->lpVtbl -> put_Subitem(This,subitem) ) 

#define ListViewColumn_get_Order(This,order)	\
    ( (This)->lpVtbl -> get_Order(This,order) ) 

#define ListViewColumn_put_Order(This,order)	\
    ( (This)->lpVtbl -> put_Order(This,order) ) 

#define ListViewColumn_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define ListViewColumn_Insert(This,index)	\
    ( (This)->lpVtbl -> Insert(This,index) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListViewColumn_INTERFACE_DEFINED__ */


#ifndef __ListViewColumns_INTERFACE_DEFINED__
#define __ListViewColumns_INTERFACE_DEFINED__

/* interface ListViewColumns */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ListViewColumns;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("88e0cd20-399a-4d9e-8ee1-616a4049ada3")
    ListViewColumns : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Selected( 
            /* [retval][out] */ ListViewColumn **selected) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ ListViewColumn **item) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListViewColumnsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListViewColumns * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListViewColumns * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListViewColumns * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListViewColumns * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListViewColumns * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListViewColumns * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListViewColumns * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ListViewColumns * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ListViewColumns * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListViewColumns * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ListViewColumns * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Selected )( 
            ListViewColumns * This,
            /* [retval][out] */ ListViewColumn **selected);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ListViewColumns * This,
            /* [in] */ long index,
            /* [retval][out] */ ListViewColumn **item);
        
        END_INTERFACE
    } ListViewColumnsVtbl;

    interface ListViewColumns
    {
        CONST_VTBL struct ListViewColumnsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListViewColumns_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListViewColumns_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListViewColumns_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListViewColumns_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListViewColumns_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListViewColumns_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListViewColumns_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListViewColumns_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define ListViewColumns_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ListViewColumns_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ListViewColumns_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define ListViewColumns_get_Selected(This,selected)	\
    ( (This)->lpVtbl -> get_Selected(This,selected) ) 

#define ListViewColumns_Item(This,index,item)	\
    ( (This)->lpVtbl -> Item(This,index,item) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListViewColumns_INTERFACE_DEFINED__ */


#ifndef __ListView_INTERFACE_DEFINED__
#define __ListView_INTERFACE_DEFINED__

/* interface ListView */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_ListView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4fd84575-2de1-4823-89fd-ca13be72aba5")
    ListView : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [optional][in] */ VARIANT index,
            /* [optional][in] */ VARIANT subindex,
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [optional][in] */ VARIANT index,
            /* [optional][in] */ VARIANT subindex,
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ ClientPoint **position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ ClientPoint *position) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL *enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL enabled) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL visible) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Focused( 
            /* [retval][out] */ VARIANT_BOOL *focused) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long width) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *height) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long height) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabOrder( 
            /* [retval][out] */ long *tabOrder) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabOrder( 
            /* [in] */ long tabOrder) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_TabStop( 
            /* [retval][out] */ VARIANT_BOOL *tabStop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_TabStop( 
            /* [in] */ VARIANT_BOOL tabStop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Group( 
            /* [retval][out] */ VARIANT_BOOL *group) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Group( 
            /* [in] */ VARIANT_BOOL group) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ _Window **window) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ long *id) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Focus( void) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_View( 
            /* [retval][out] */ listviewView *view) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_View( 
            /* [in] */ listviewView view) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ColumnHeaders( 
            /* [retval][out] */ VARIANT_BOOL *headers) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Sort( 
            /* [retval][out] */ listviewSort *sort) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Checkboxes( 
            /* [retval][out] */ VARIANT_BOOL *checkboxes) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Items( 
            /* [retval][out] */ ListViewItems **items) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Columns( 
            /* [retval][out] */ ListViewColumns **columns) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewItem( 
            /* [retval][out] */ ListViewItem **listViewItem) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewColumn( 
            /* [retval][out] */ ListViewColumn **listViewColumn) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Id( 
            /* [in] */ long id) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListView * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListView * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListView * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListView * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListView * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            ListView * This,
            /* [optional][in] */ VARIANT index,
            /* [optional][in] */ VARIANT subindex,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            ListView * This,
            /* [optional][in] */ VARIANT index,
            /* [optional][in] */ VARIANT subindex,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ListView * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListView * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            ListView * This,
            /* [retval][out] */ ClientPoint **position);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            ListView * This,
            /* [in] */ ClientPoint *position);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            ListView * This,
            /* [retval][out] */ VARIANT_BOOL *enabled);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            ListView * This,
            /* [in] */ VARIANT_BOOL enabled);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            ListView * This,
            /* [retval][out] */ VARIANT_BOOL *visible);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            ListView * This,
            /* [in] */ VARIANT_BOOL visible);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Focused )( 
            ListView * This,
            /* [retval][out] */ VARIANT_BOOL *focused);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ListView * This,
            /* [retval][out] */ long *width);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            ListView * This,
            /* [in] */ long width);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            ListView * This,
            /* [retval][out] */ long *height);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            ListView * This,
            /* [in] */ long height);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabOrder )( 
            ListView * This,
            /* [retval][out] */ long *tabOrder);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabOrder )( 
            ListView * This,
            /* [in] */ long tabOrder);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TabStop )( 
            ListView * This,
            /* [retval][out] */ VARIANT_BOOL *tabStop);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_TabStop )( 
            ListView * This,
            /* [in] */ VARIANT_BOOL tabStop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            ListView * This,
            /* [retval][out] */ VARIANT_BOOL *group);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Group )( 
            ListView * This,
            /* [in] */ VARIANT_BOOL group);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            ListView * This,
            /* [retval][out] */ _Window **window);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            ListView * This,
            /* [retval][out] */ long *id);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            ListView * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            ListView * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Focus )( 
            ListView * This);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            ListView * This,
            /* [retval][out] */ listviewView *view);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_View )( 
            ListView * This,
            /* [in] */ listviewView view);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnHeaders )( 
            ListView * This,
            /* [retval][out] */ VARIANT_BOOL *headers);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sort )( 
            ListView * This,
            /* [retval][out] */ listviewSort *sort);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Checkboxes )( 
            ListView * This,
            /* [retval][out] */ VARIANT_BOOL *checkboxes);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Items )( 
            ListView * This,
            /* [retval][out] */ ListViewItems **items);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Columns )( 
            ListView * This,
            /* [retval][out] */ ListViewColumns **columns);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ListView * This);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewItem )( 
            ListView * This,
            /* [retval][out] */ ListViewItem **listViewItem);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewColumn )( 
            ListView * This,
            /* [retval][out] */ ListViewColumn **listViewColumn);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Id )( 
            ListView * This,
            /* [in] */ long id);
        
        END_INTERFACE
    } ListViewVtbl;

    interface ListView
    {
        CONST_VTBL struct ListViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListView_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListView_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListView_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListView_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListView_get_Text(This,index,subindex,text)	\
    ( (This)->lpVtbl -> get_Text(This,index,subindex,text) ) 

#define ListView_put_Text(This,index,subindex,text)	\
    ( (This)->lpVtbl -> put_Text(This,index,subindex,text) ) 

#define ListView_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define ListView_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define ListView_get_Position(This,position)	\
    ( (This)->lpVtbl -> get_Position(This,position) ) 

#define ListView_put_Position(This,position)	\
    ( (This)->lpVtbl -> put_Position(This,position) ) 

#define ListView_get_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> get_Enabled(This,enabled) ) 

#define ListView_put_Enabled(This,enabled)	\
    ( (This)->lpVtbl -> put_Enabled(This,enabled) ) 

#define ListView_get_Visible(This,visible)	\
    ( (This)->lpVtbl -> get_Visible(This,visible) ) 

#define ListView_put_Visible(This,visible)	\
    ( (This)->lpVtbl -> put_Visible(This,visible) ) 

#define ListView_get_Focused(This,focused)	\
    ( (This)->lpVtbl -> get_Focused(This,focused) ) 

#define ListView_get_Width(This,width)	\
    ( (This)->lpVtbl -> get_Width(This,width) ) 

#define ListView_put_Width(This,width)	\
    ( (This)->lpVtbl -> put_Width(This,width) ) 

#define ListView_get_Height(This,height)	\
    ( (This)->lpVtbl -> get_Height(This,height) ) 

#define ListView_put_Height(This,height)	\
    ( (This)->lpVtbl -> put_Height(This,height) ) 

#define ListView_get_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> get_TabOrder(This,tabOrder) ) 

#define ListView_put_TabOrder(This,tabOrder)	\
    ( (This)->lpVtbl -> put_TabOrder(This,tabOrder) ) 

#define ListView_get_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> get_TabStop(This,tabStop) ) 

#define ListView_put_TabStop(This,tabStop)	\
    ( (This)->lpVtbl -> put_TabStop(This,tabStop) ) 

#define ListView_get_Group(This,group)	\
    ( (This)->lpVtbl -> get_Group(This,group) ) 

#define ListView_put_Group(This,group)	\
    ( (This)->lpVtbl -> put_Group(This,group) ) 

#define ListView_get_Window(This,window)	\
    ( (This)->lpVtbl -> get_Window(This,window) ) 

#define ListView_get_Id(This,id)	\
    ( (This)->lpVtbl -> get_Id(This,id) ) 

#define ListView_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define ListView_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define ListView_Focus(This)	\
    ( (This)->lpVtbl -> Focus(This) ) 

#define ListView_get_View(This,view)	\
    ( (This)->lpVtbl -> get_View(This,view) ) 

#define ListView_put_View(This,view)	\
    ( (This)->lpVtbl -> put_View(This,view) ) 

#define ListView_get_ColumnHeaders(This,headers)	\
    ( (This)->lpVtbl -> get_ColumnHeaders(This,headers) ) 

#define ListView_get_Sort(This,sort)	\
    ( (This)->lpVtbl -> get_Sort(This,sort) ) 

#define ListView_get_Checkboxes(This,checkboxes)	\
    ( (This)->lpVtbl -> get_Checkboxes(This,checkboxes) ) 

#define ListView_get_Items(This,items)	\
    ( (This)->lpVtbl -> get_Items(This,items) ) 

#define ListView_get_Columns(This,columns)	\
    ( (This)->lpVtbl -> get_Columns(This,columns) ) 

#define ListView_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define ListView_NewItem(This,listViewItem)	\
    ( (This)->lpVtbl -> NewItem(This,listViewItem) ) 

#define ListView_NewColumn(This,listViewColumn)	\
    ( (This)->lpVtbl -> NewColumn(This,listViewColumn) ) 

#define ListView_put_Id(This,id)	\
    ( (This)->lpVtbl -> put_Id(This,id) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListView_INTERFACE_DEFINED__ */


#ifndef __UpDownEventInfo_INTERFACE_DEFINED__
#define __UpDownEventInfo_INTERFACE_DEFINED__

/* interface UpDownEventInfo */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_UpDownEventInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1ffa0bd0-f1b0-436d-98eb-1acb5ffbe1ff")
    UpDownEventInfo : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentPosition( 
            /* [retval][out] */ long *currentPosition) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Delta( 
            /* [retval][out] */ long *delta) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UpDownEventInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UpDownEventInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UpDownEventInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UpDownEventInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UpDownEventInfo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UpDownEventInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UpDownEventInfo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UpDownEventInfo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            UpDownEventInfo * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            UpDownEventInfo * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentPosition )( 
            UpDownEventInfo * This,
            /* [retval][out] */ long *currentPosition);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Delta )( 
            UpDownEventInfo * This,
            /* [retval][out] */ long *delta);
        
        END_INTERFACE
    } UpDownEventInfoVtbl;

    interface UpDownEventInfo
    {
        CONST_VTBL struct UpDownEventInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UpDownEventInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define UpDownEventInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define UpDownEventInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define UpDownEventInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define UpDownEventInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define UpDownEventInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define UpDownEventInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define UpDownEventInfo_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define UpDownEventInfo_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define UpDownEventInfo_get_CurrentPosition(This,currentPosition)	\
    ( (This)->lpVtbl -> get_CurrentPosition(This,currentPosition) ) 

#define UpDownEventInfo_get_Delta(This,delta)	\
    ( (This)->lpVtbl -> get_Delta(This,delta) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __UpDownEventInfo_INTERFACE_DEFINED__ */


#ifndef ___SynthesizersEvents_INTERFACE_DEFINED__
#define ___SynthesizersEvents_INTERFACE_DEFINED__

/* interface _SynthesizersEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__SynthesizersEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("529a02d5-8e8c-4c07-8dd2-b7a916390aa5")
    _SynthesizersEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnActivate( 
            /* [in] */ _Synthesizer *newActive) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _SynthesizersEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnActivate )( 
            _SynthesizersEvents * This,
            /* [in] */ _Synthesizer *newActive);
        
        END_INTERFACE
    } _SynthesizersEventsVtbl;

    interface _SynthesizersEvents
    {
        CONST_VTBL struct _SynthesizersEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _SynthesizersEvents_OnActivate(This,newActive)	\
    ( (This)->lpVtbl -> OnActivate(This,newActive) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___SynthesizersEvents_INTERFACE_DEFINED__ */


#ifndef __SynthesizersEvents_DISPINTERFACE_DEFINED__
#define __SynthesizersEvents_DISPINTERFACE_DEFINED__

/* dispinterface SynthesizersEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_SynthesizersEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("93280a3e-5c14-4b12-8b79-75cb454000dd")
    SynthesizersEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct SynthesizersEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SynthesizersEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SynthesizersEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SynthesizersEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SynthesizersEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SynthesizersEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SynthesizersEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SynthesizersEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } SynthesizersEventsVtbl;

    interface SynthesizersEvents
    {
        CONST_VTBL struct SynthesizersEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SynthesizersEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SynthesizersEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SynthesizersEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SynthesizersEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SynthesizersEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SynthesizersEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SynthesizersEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __SynthesizersEvents_DISPINTERFACE_DEFINED__ */


#ifndef __MSAAEventBlock_INTERFACE_DEFINED__
#define __MSAAEventBlock_INTERFACE_DEFINED__

/* interface MSAAEventBlock */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_MSAAEventBlock;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("11ca4e4b-148d-4311-9b1a-6bcc2c466647")
    MSAAEventBlock : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Unblock( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MSAAEventBlockVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MSAAEventBlock * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MSAAEventBlock * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MSAAEventBlock * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MSAAEventBlock * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MSAAEventBlock * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MSAAEventBlock * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MSAAEventBlock * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Unblock )( 
            MSAAEventBlock * This);
        
        END_INTERFACE
    } MSAAEventBlockVtbl;

    interface MSAAEventBlock
    {
        CONST_VTBL struct MSAAEventBlockVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MSAAEventBlock_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MSAAEventBlock_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MSAAEventBlock_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MSAAEventBlock_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MSAAEventBlock_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MSAAEventBlock_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MSAAEventBlock_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MSAAEventBlock_Unblock(This)	\
    ( (This)->lpVtbl -> Unblock(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MSAAEventBlock_INTERFACE_DEFINED__ */


#ifndef ____MSAAEvents_INTERFACE_DEFINED__
#define ____MSAAEvents_INTERFACE_DEFINED__

/* interface __MSAAEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID___MSAAEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8d8b648d-6c23-48a9-a544-6bcd010fa13d")
    __MSAAEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemSound( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemAlert( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemForeground( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemMenuStart( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemMenuEnd( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemMenuPopupStart( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemMenuPopupEnd( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemCaptureStart( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemCaptureEnd( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemMoveSizeStart( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemMoveSizeEnd( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemContextHelpStart( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemContextHelpEnd( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemDragDropStart( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemDragDropEnd( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemDialogStart( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemDialogEnd( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemScrollingStart( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemScrollingEnd( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemSwitchStart( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemSwitchEnd( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemMinimizeStart( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnSystemMinimizeEnd( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnConsoleCaret( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnConsoleUpdateRegion( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnConsoleUpdateSimple( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnConsoleUpdateScroll( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnConsoleLayout( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnConsoleStartApplication( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnConsoleEndApplication( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectShow( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectHide( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectReorder( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectFocus( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectSelection( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectSelectionAdd( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectSelectionRemove( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectSelectionWithin( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectStateChange( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectLocationChange( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectNameChange( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectDescriptionChange( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectValueChange( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectParentChange( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectHelpChange( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectDefActionChange( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectAcceleratorChange( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectTextSelectionChanged( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectContentScrolled( 
            /* [in] */ Accessible *accessible) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnObjectInvoked( 
            /* [in] */ Accessible *accessible) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct __MSAAEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemSound )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemAlert )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemForeground )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemMenuStart )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemMenuEnd )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemMenuPopupStart )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemMenuPopupEnd )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemCaptureStart )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemCaptureEnd )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemMoveSizeStart )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemMoveSizeEnd )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemContextHelpStart )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemContextHelpEnd )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemDragDropStart )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemDragDropEnd )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemDialogStart )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemDialogEnd )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemScrollingStart )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemScrollingEnd )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemSwitchStart )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemSwitchEnd )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemMinimizeStart )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnSystemMinimizeEnd )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnConsoleCaret )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnConsoleUpdateRegion )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnConsoleUpdateSimple )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnConsoleUpdateScroll )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnConsoleLayout )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnConsoleStartApplication )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnConsoleEndApplication )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectShow )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectHide )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectReorder )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectFocus )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectSelection )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectSelectionAdd )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectSelectionRemove )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectSelectionWithin )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectStateChange )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectLocationChange )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectNameChange )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectDescriptionChange )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectValueChange )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectParentChange )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectHelpChange )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectDefActionChange )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectAcceleratorChange )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectTextSelectionChanged )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectContentScrolled )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnObjectInvoked )( 
            __MSAAEvents * This,
            /* [in] */ Accessible *accessible);
        
        END_INTERFACE
    } __MSAAEventsVtbl;

    interface __MSAAEvents
    {
        CONST_VTBL struct __MSAAEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define __MSAAEvents_OnSystemSound(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemSound(This,accessible) ) 

#define __MSAAEvents_OnSystemAlert(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemAlert(This,accessible) ) 

#define __MSAAEvents_OnSystemForeground(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemForeground(This,accessible) ) 

#define __MSAAEvents_OnSystemMenuStart(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemMenuStart(This,accessible) ) 

#define __MSAAEvents_OnSystemMenuEnd(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemMenuEnd(This,accessible) ) 

#define __MSAAEvents_OnSystemMenuPopupStart(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemMenuPopupStart(This,accessible) ) 

#define __MSAAEvents_OnSystemMenuPopupEnd(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemMenuPopupEnd(This,accessible) ) 

#define __MSAAEvents_OnSystemCaptureStart(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemCaptureStart(This,accessible) ) 

#define __MSAAEvents_OnSystemCaptureEnd(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemCaptureEnd(This,accessible) ) 

#define __MSAAEvents_OnSystemMoveSizeStart(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemMoveSizeStart(This,accessible) ) 

#define __MSAAEvents_OnSystemMoveSizeEnd(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemMoveSizeEnd(This,accessible) ) 

#define __MSAAEvents_OnSystemContextHelpStart(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemContextHelpStart(This,accessible) ) 

#define __MSAAEvents_OnSystemContextHelpEnd(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemContextHelpEnd(This,accessible) ) 

#define __MSAAEvents_OnSystemDragDropStart(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemDragDropStart(This,accessible) ) 

#define __MSAAEvents_OnSystemDragDropEnd(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemDragDropEnd(This,accessible) ) 

#define __MSAAEvents_OnSystemDialogStart(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemDialogStart(This,accessible) ) 

#define __MSAAEvents_OnSystemDialogEnd(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemDialogEnd(This,accessible) ) 

#define __MSAAEvents_OnSystemScrollingStart(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemScrollingStart(This,accessible) ) 

#define __MSAAEvents_OnSystemScrollingEnd(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemScrollingEnd(This,accessible) ) 

#define __MSAAEvents_OnSystemSwitchStart(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemSwitchStart(This,accessible) ) 

#define __MSAAEvents_OnSystemSwitchEnd(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemSwitchEnd(This,accessible) ) 

#define __MSAAEvents_OnSystemMinimizeStart(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemMinimizeStart(This,accessible) ) 

#define __MSAAEvents_OnSystemMinimizeEnd(This,accessible)	\
    ( (This)->lpVtbl -> OnSystemMinimizeEnd(This,accessible) ) 

#define __MSAAEvents_OnConsoleCaret(This,accessible)	\
    ( (This)->lpVtbl -> OnConsoleCaret(This,accessible) ) 

#define __MSAAEvents_OnConsoleUpdateRegion(This,accessible)	\
    ( (This)->lpVtbl -> OnConsoleUpdateRegion(This,accessible) ) 

#define __MSAAEvents_OnConsoleUpdateSimple(This,accessible)	\
    ( (This)->lpVtbl -> OnConsoleUpdateSimple(This,accessible) ) 

#define __MSAAEvents_OnConsoleUpdateScroll(This,accessible)	\
    ( (This)->lpVtbl -> OnConsoleUpdateScroll(This,accessible) ) 

#define __MSAAEvents_OnConsoleLayout(This,accessible)	\
    ( (This)->lpVtbl -> OnConsoleLayout(This,accessible) ) 

#define __MSAAEvents_OnConsoleStartApplication(This,accessible)	\
    ( (This)->lpVtbl -> OnConsoleStartApplication(This,accessible) ) 

#define __MSAAEvents_OnConsoleEndApplication(This,accessible)	\
    ( (This)->lpVtbl -> OnConsoleEndApplication(This,accessible) ) 

#define __MSAAEvents_OnObjectShow(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectShow(This,accessible) ) 

#define __MSAAEvents_OnObjectHide(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectHide(This,accessible) ) 

#define __MSAAEvents_OnObjectReorder(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectReorder(This,accessible) ) 

#define __MSAAEvents_OnObjectFocus(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectFocus(This,accessible) ) 

#define __MSAAEvents_OnObjectSelection(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectSelection(This,accessible) ) 

#define __MSAAEvents_OnObjectSelectionAdd(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectSelectionAdd(This,accessible) ) 

#define __MSAAEvents_OnObjectSelectionRemove(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectSelectionRemove(This,accessible) ) 

#define __MSAAEvents_OnObjectSelectionWithin(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectSelectionWithin(This,accessible) ) 

#define __MSAAEvents_OnObjectStateChange(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectStateChange(This,accessible) ) 

#define __MSAAEvents_OnObjectLocationChange(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectLocationChange(This,accessible) ) 

#define __MSAAEvents_OnObjectNameChange(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectNameChange(This,accessible) ) 

#define __MSAAEvents_OnObjectDescriptionChange(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectDescriptionChange(This,accessible) ) 

#define __MSAAEvents_OnObjectValueChange(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectValueChange(This,accessible) ) 

#define __MSAAEvents_OnObjectParentChange(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectParentChange(This,accessible) ) 

#define __MSAAEvents_OnObjectHelpChange(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectHelpChange(This,accessible) ) 

#define __MSAAEvents_OnObjectDefActionChange(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectDefActionChange(This,accessible) ) 

#define __MSAAEvents_OnObjectAcceleratorChange(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectAcceleratorChange(This,accessible) ) 

#define __MSAAEvents_OnObjectTextSelectionChanged(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectTextSelectionChanged(This,accessible) ) 

#define __MSAAEvents_OnObjectContentScrolled(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectContentScrolled(This,accessible) ) 

#define __MSAAEvents_OnObjectInvoked(This,accessible)	\
    ( (This)->lpVtbl -> OnObjectInvoked(This,accessible) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ____MSAAEvents_INTERFACE_DEFINED__ */


#ifndef __MSAAEvents_DISPINTERFACE_DEFINED__
#define __MSAAEvents_DISPINTERFACE_DEFINED__

/* dispinterface MSAAEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_MSAAEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("324cc008-e06c-477b-96b7-071c50c6fece")
    MSAAEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct MSAAEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MSAAEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MSAAEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MSAAEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MSAAEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MSAAEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MSAAEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MSAAEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } MSAAEventsVtbl;

    interface MSAAEvents
    {
        CONST_VTBL struct MSAAEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MSAAEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MSAAEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MSAAEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MSAAEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MSAAEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MSAAEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MSAAEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __MSAAEvents_DISPINTERFACE_DEFINED__ */


#ifndef __BrowseModeLine_INTERFACE_DEFINED__
#define __BrowseModeLine_INTERFACE_DEFINED__

/* interface BrowseModeLine */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeLine;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("08c8faff-dfbd-48ef-85a3-6e6886ab8457")
    BrowseModeLine : public IDispatch
    {
    public:
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR text) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DOMNode( 
            /* [retval][out] */ IDispatch **domNode) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *index) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsLink( 
            /* [retval][out] */ VARIANT_BOOL *isLink) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsAbbreviation( 
            /* [retval][out] */ VARIANT_BOOL *isAbbreviation) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasAccessKey( 
            /* [retval][out] */ VARIANT_BOOL *hasAccessKey) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsAcronym( 
            /* [retval][out] */ VARIANT_BOOL *isAcronym) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsBlank( 
            /* [retval][out] */ VARIANT_BOOL *isBlank) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsGraphic( 
            /* [retval][out] */ VARIANT_BOOL *isGraphic) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsHeading( 
            /* [retval][out] */ VARIANT_BOOL *isHeading) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasOnClick( 
            /* [retval][out] */ VARIANT_BOOL *hasOnClick) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsQuote( 
            /* [retval][out] */ VARIANT_BOOL *isQuote) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsSecure( 
            /* [retval][out] */ VARIANT_BOOL *isSecure) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsSilent( 
            /* [retval][out] */ VARIANT_BOOL *isSilent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Accessible( 
            /* [retval][out] */ Accessible **accessible) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeLineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeLine * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeLine * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeLine * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeLine * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeLine * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeLine * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeLine * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            BrowseModeLine * This,
            /* [retval][out] */ BSTR *text);
        
        /* [helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            BrowseModeLine * This,
            /* [in] */ BSTR text);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeLine * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeLine * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DOMNode )( 
            BrowseModeLine * This,
            /* [retval][out] */ IDispatch **domNode);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            BrowseModeLine * This,
            /* [retval][out] */ long *index);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsLink )( 
            BrowseModeLine * This,
            /* [retval][out] */ VARIANT_BOOL *isLink);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsAbbreviation )( 
            BrowseModeLine * This,
            /* [retval][out] */ VARIANT_BOOL *isAbbreviation);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasAccessKey )( 
            BrowseModeLine * This,
            /* [retval][out] */ VARIANT_BOOL *hasAccessKey);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsAcronym )( 
            BrowseModeLine * This,
            /* [retval][out] */ VARIANT_BOOL *isAcronym);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsBlank )( 
            BrowseModeLine * This,
            /* [retval][out] */ VARIANT_BOOL *isBlank);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsGraphic )( 
            BrowseModeLine * This,
            /* [retval][out] */ VARIANT_BOOL *isGraphic);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsHeading )( 
            BrowseModeLine * This,
            /* [retval][out] */ VARIANT_BOOL *isHeading);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasOnClick )( 
            BrowseModeLine * This,
            /* [retval][out] */ VARIANT_BOOL *hasOnClick);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsQuote )( 
            BrowseModeLine * This,
            /* [retval][out] */ VARIANT_BOOL *isQuote);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSecure )( 
            BrowseModeLine * This,
            /* [retval][out] */ VARIANT_BOOL *isSecure);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSilent )( 
            BrowseModeLine * This,
            /* [retval][out] */ VARIANT_BOOL *isSilent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Accessible )( 
            BrowseModeLine * This,
            /* [retval][out] */ Accessible **accessible);
        
        END_INTERFACE
    } BrowseModeLineVtbl;

    interface BrowseModeLine
    {
        CONST_VTBL struct BrowseModeLineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeLine_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeLine_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeLine_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeLine_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeLine_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeLine_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeLine_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeLine_get_Text(This,text)	\
    ( (This)->lpVtbl -> get_Text(This,text) ) 

#define BrowseModeLine_put_Text(This,text)	\
    ( (This)->lpVtbl -> put_Text(This,text) ) 

#define BrowseModeLine_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeLine_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeLine_get_DOMNode(This,domNode)	\
    ( (This)->lpVtbl -> get_DOMNode(This,domNode) ) 

#define BrowseModeLine_get_Index(This,index)	\
    ( (This)->lpVtbl -> get_Index(This,index) ) 

#define BrowseModeLine_get_IsLink(This,isLink)	\
    ( (This)->lpVtbl -> get_IsLink(This,isLink) ) 

#define BrowseModeLine_get_IsAbbreviation(This,isAbbreviation)	\
    ( (This)->lpVtbl -> get_IsAbbreviation(This,isAbbreviation) ) 

#define BrowseModeLine_get_HasAccessKey(This,hasAccessKey)	\
    ( (This)->lpVtbl -> get_HasAccessKey(This,hasAccessKey) ) 

#define BrowseModeLine_get_IsAcronym(This,isAcronym)	\
    ( (This)->lpVtbl -> get_IsAcronym(This,isAcronym) ) 

#define BrowseModeLine_get_IsBlank(This,isBlank)	\
    ( (This)->lpVtbl -> get_IsBlank(This,isBlank) ) 

#define BrowseModeLine_get_IsGraphic(This,isGraphic)	\
    ( (This)->lpVtbl -> get_IsGraphic(This,isGraphic) ) 

#define BrowseModeLine_get_IsHeading(This,isHeading)	\
    ( (This)->lpVtbl -> get_IsHeading(This,isHeading) ) 

#define BrowseModeLine_get_HasOnClick(This,hasOnClick)	\
    ( (This)->lpVtbl -> get_HasOnClick(This,hasOnClick) ) 

#define BrowseModeLine_get_IsQuote(This,isQuote)	\
    ( (This)->lpVtbl -> get_IsQuote(This,isQuote) ) 

#define BrowseModeLine_get_IsSecure(This,isSecure)	\
    ( (This)->lpVtbl -> get_IsSecure(This,isSecure) ) 

#define BrowseModeLine_get_IsSilent(This,isSilent)	\
    ( (This)->lpVtbl -> get_IsSilent(This,isSilent) ) 

#define BrowseModeLine_get_Accessible(This,accessible)	\
    ( (This)->lpVtbl -> get_Accessible(This,accessible) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeLine_INTERFACE_DEFINED__ */


#ifndef __BrowseModeLines_INTERFACE_DEFINED__
#define __BrowseModeLines_INTERFACE_DEFINED__

/* interface BrowseModeLines */
/* [object][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_BrowseModeLines;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e5eff012-6802-4dc8-990f-571d6856dcdd")
    BrowseModeLines : public IDispatch
    {
    public:
        virtual /* [hidden][id][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **pEnum) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ _Application **app) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **parent) = 0;
        
        virtual /* [helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *count) = 0;
        
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long index,
            /* [retval][out] */ BrowseModeLine **line) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeLinesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeLines * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeLines * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeLines * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeLines * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeLines * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeLines * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeLines * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            BrowseModeLines * This,
            /* [retval][out] */ IUnknown **pEnum);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            BrowseModeLines * This,
            /* [retval][out] */ _Application **app);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BrowseModeLines * This,
            /* [retval][out] */ IDispatch **parent);
        
        /* [helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            BrowseModeLines * This,
            /* [retval][out] */ long *count);
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            BrowseModeLines * This,
            /* [in] */ long index,
            /* [retval][out] */ BrowseModeLine **line);
        
        END_INTERFACE
    } BrowseModeLinesVtbl;

    interface BrowseModeLines
    {
        CONST_VTBL struct BrowseModeLinesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeLines_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeLines_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeLines_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeLines_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeLines_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeLines_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeLines_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define BrowseModeLines_get__NewEnum(This,pEnum)	\
    ( (This)->lpVtbl -> get__NewEnum(This,pEnum) ) 

#define BrowseModeLines_get_Application(This,app)	\
    ( (This)->lpVtbl -> get_Application(This,app) ) 

#define BrowseModeLines_get_Parent(This,parent)	\
    ( (This)->lpVtbl -> get_Parent(This,parent) ) 

#define BrowseModeLines_get_Count(This,count)	\
    ( (This)->lpVtbl -> get_Count(This,count) ) 

#define BrowseModeLines_Item(This,index,line)	\
    ( (This)->lpVtbl -> Item(This,index,line) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __BrowseModeLines_INTERFACE_DEFINED__ */


#ifndef ___BrowseModeEvents_INTERFACE_DEFINED__
#define ___BrowseModeEvents_INTERFACE_DEFINED__

/* interface _BrowseModeEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID IID__BrowseModeEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("14397875-7e87-42a6-b338-0d053fc08ca4")
    _BrowseModeEvents
    {
    public:
        BEGIN_INTERFACE
        virtual /* [helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnStateChange( 
            /* [in] */ BrowseModeState newState) = 0;
        
        END_INTERFACE
    };
    
#else 	/* C style interface */

    typedef struct _BrowseModeEventsVtbl
    {
        BEGIN_INTERFACE
        
        /* [helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnStateChange )( 
            _BrowseModeEvents * This,
            /* [in] */ BrowseModeState newState);
        
        END_INTERFACE
    } _BrowseModeEventsVtbl;

    interface _BrowseModeEvents
    {
        CONST_VTBL struct _BrowseModeEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _BrowseModeEvents_OnStateChange(This,newState)	\
    ( (This)->lpVtbl -> OnStateChange(This,newState) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___BrowseModeEvents_INTERFACE_DEFINED__ */


#ifndef __BrowseModeEvents_DISPINTERFACE_DEFINED__
#define __BrowseModeEvents_DISPINTERFACE_DEFINED__

/* dispinterface BrowseModeEvents */
/* [helpcontext][version][uuid] */ 


EXTERN_C const IID DIID_BrowseModeEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("d12b2ffd-52b7-43d9-a18d-a55745cccb67")
    BrowseModeEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct BrowseModeEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BrowseModeEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BrowseModeEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BrowseModeEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BrowseModeEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BrowseModeEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BrowseModeEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BrowseModeEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } BrowseModeEventsVtbl;

    interface BrowseModeEvents
    {
        CONST_VTBL struct BrowseModeEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BrowseModeEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define BrowseModeEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define BrowseModeEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define BrowseModeEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define BrowseModeEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define BrowseModeEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define BrowseModeEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __BrowseModeEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Application;

#ifdef __cplusplus

class DECLSPEC_UUID("76d4f4e6-3e5d-43e8-b9d9-fc58684a6b8c")
Application;
#endif

EXTERN_C const CLSID CLSID_Keyboard;

#ifdef __cplusplus

class DECLSPEC_UUID("43c8dc45-4f69-4898-8d9d-783de615afd7")
Keyboard;
#endif

EXTERN_C const CLSID CLSID_Key;

#ifdef __cplusplus

class DECLSPEC_UUID("b7d5d28f-a998-4efb-b2e9-8bdba3086f36")
Key;
#endif

EXTERN_C const CLSID CLSID_Script;

#ifdef __cplusplus

class DECLSPEC_UUID("86352b61-b01a-4a1b-bb40-dc92121f6781")
Script;
#endif

EXTERN_C const CLSID CLSID_Window;

#ifdef __cplusplus

class DECLSPEC_UUID("37018039-132b-43ef-b079-b6a13d2c02d1")
Window;
#endif

EXTERN_C const CLSID CLSID_ClientInformation;

#ifdef __cplusplus

class DECLSPEC_UUID("bda6df44-cfd0-4dec-947f-364d83c4b079")
ClientInformation;
#endif

EXTERN_C const CLSID CLSID_Mouse;

#ifdef __cplusplus

class DECLSPEC_UUID("e9c3515d-58ab-4b80-9d6b-a47e2578eed7")
Mouse;
#endif

EXTERN_C const CLSID CLSID_Dialog;

#ifdef __cplusplus

class DECLSPEC_UUID("b2adcafa-c744-43cf-8591-4aab3e6feded")
Dialog;
#endif

EXTERN_C const CLSID CLSID_MousePointer;

#ifdef __cplusplus

class DECLSPEC_UUID("45b8228b-2dcd-4f35-9ae8-13f6272941e4")
MousePointer;
#endif

EXTERN_C const CLSID CLSID_Control;

#ifdef __cplusplus

class DECLSPEC_UUID("5f118e43-c234-4879-a655-2a8f0041b463")
Control;
#endif

EXTERN_C const CLSID CLSID_EditBox;

#ifdef __cplusplus

class DECLSPEC_UUID("9abf4cc0-a154-4248-bd84-b53d2aad51e7")
EditBox;
#endif

EXTERN_C const CLSID CLSID_Pushbutton;

#ifdef __cplusplus

class DECLSPEC_UUID("e9b4a950-bdad-443a-ba63-637075835d76")
Pushbutton;
#endif

EXTERN_C const CLSID CLSID_CheckBox;

#ifdef __cplusplus

class DECLSPEC_UUID("61c99ffb-1a53-4106-bab4-04d888acad1e")
CheckBox;
#endif

EXTERN_C const CLSID CLSID_RadioButton;

#ifdef __cplusplus

class DECLSPEC_UUID("648c7a43-cb4b-47b5-9dbd-c64a3e60b966")
RadioButton;
#endif

EXTERN_C const CLSID CLSID_ComboBox;

#ifdef __cplusplus

class DECLSPEC_UUID("a9cc725c-1a13-4780-bc7e-aef3898d18ca")
ComboBox;
#endif

EXTERN_C const CLSID CLSID_ListBox;

#ifdef __cplusplus

class DECLSPEC_UUID("abd450ab-9039-4ba6-8396-e97b2c67b016")
ListBox;
#endif

EXTERN_C const CLSID CLSID_UpDown;

#ifdef __cplusplus

class DECLSPEC_UUID("cadb2ddd-9d9e-4eae-ac1c-c55e4a000337")
UpDown;
#endif

EXTERN_C const CLSID CLSID_TrackBar;

#ifdef __cplusplus

class DECLSPEC_UUID("876b6b1a-c823-4bbf-8b5b-d57d08800773")
TrackBar;
#endif

EXTERN_C const CLSID CLSID_Synthesizer;

#ifdef __cplusplus

class DECLSPEC_UUID("d353fc81-02d3-4967-b11e-a541a06ad1b5")
Synthesizer;
#endif

EXTERN_C const CLSID CLSID_Speech;

#ifdef __cplusplus

class DECLSPEC_UUID("215aa611-9c86-48b3-89e5-ec1452adae8b")
Speech;
#endif

EXTERN_C const CLSID CLSID_MSAAEventSource;

#ifdef __cplusplus

class DECLSPEC_UUID("a330fefd-f752-4a37-bae4-eece1d998ea3")
MSAAEventSource;
#endif

EXTERN_C const CLSID CLSID_BrowseMode;

#ifdef __cplusplus

class DECLSPEC_UUID("eaacab81-2159-4768-8208-42210cc6d484")
BrowseMode;
#endif

EXTERN_C const CLSID CLSID_SharedObjects;

#ifdef __cplusplus

class DECLSPEC_UUID("cdc696e2-2b07-434c-8f11-87924e56983d")
SharedObjects;
#endif

EXTERN_C const CLSID CLSID_BrailleDisplay;

#ifdef __cplusplus

class DECLSPEC_UUID("34fe5e9b-27e3-4cb9-8c5d-5e8dd1fe771d")
BrailleDisplay;
#endif

EXTERN_C const CLSID CLSID_Braille;

#ifdef __cplusplus

class DECLSPEC_UUID("4db82e86-92f3-4cd1-bedf-17d963d325ab")
Braille;
#endif

EXTERN_C const CLSID CLSID_BrailleDisplays;

#ifdef __cplusplus

class DECLSPEC_UUID("589c86a7-883e-43b0-960e-d55ee8e3da84")
BrailleDisplays;
#endif

EXTERN_C const CLSID CLSID_Synthesizers;

#ifdef __cplusplus

class DECLSPEC_UUID("88eb8543-46b6-4642-b017-63c7daac13d0")
Synthesizers;
#endif
#endif /* __WindowEyes_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


